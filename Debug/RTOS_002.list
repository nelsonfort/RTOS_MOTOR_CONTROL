
RTOS_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008280  08008280  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008280  08008280  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000259c  20000010  08008298  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025ac  08008298  000225ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001557d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b93  00000000  00000000  000355bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00038150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  00039358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219ef  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f608  00000000  00000000  0005be37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1d00  00000000  00000000  0006b43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d13f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  0013d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800814c 	.word	0x0800814c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800814c 	.word	0x0800814c

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000088 	.word	0x20000088

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b0ac      	sub	sp, #176	; 0xb0
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fe8b 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f8bb 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fa55 	bl	80006d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000226:	f000 f99d 	bl	8000564 <MX_TIM3_Init>
  MX_TIM1_Init();
 800022a:	f000 f919 	bl	8000460 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800022e:	f000 fa1f 	bl	8000670 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexEncoder */
  osMutexDef(MutexEncoder);
 8000232:	2300      	movs	r3, #0
 8000234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000238:	2300      	movs	r3, #0
 800023a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  MutexEncoderHandle = osMutexCreate(osMutex(MutexEncoder));
 800023e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000242:	4618      	mov	r0, r3
 8000244:	f005 f834 	bl	80052b0 <osMutexCreate>
 8000248:	4602      	mov	r2, r0
 800024a:	4b43      	ldr	r3, [pc, #268]	; (8000358 <main+0x144>)
 800024c:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem1 */
  osSemaphoreDef(binSem1);
 800024e:	2300      	movs	r3, #0
 8000250:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000254:	2300      	movs	r3, #0
 8000256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  binSem1Handle = osSemaphoreCreate(osSemaphore(binSem1), 1);
 800025a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800025e:	2101      	movs	r1, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f005 f83d 	bl	80052e0 <osSemaphoreCreate>
 8000266:	4602      	mov	r2, r0
 8000268:	4b3c      	ldr	r3, [pc, #240]	; (800035c <main+0x148>)
 800026a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueUARTSend */
  osMessageQDef(QueueUARTSend, 32, UART_DATA_SEND_t);
 800026c:	4b3c      	ldr	r3, [pc, #240]	; (8000360 <main+0x14c>)
 800026e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueUARTSendHandle = osMessageCreate(osMessageQ(QueueUARTSend), NULL);
 8000278:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f005 f9e6 	bl	8005650 <osMessageCreate>
 8000284:	4602      	mov	r2, r0
 8000286:	4b37      	ldr	r3, [pc, #220]	; (8000364 <main+0x150>)
 8000288:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueUARTSndHandle = osMailCreate(osMailQ(QueueUARTSnd), NULL);      // create mail queue
 800028a:	2100      	movs	r1, #0
 800028c:	4836      	ldr	r0, [pc, #216]	; (8000368 <main+0x154>)
 800028e:	f005 fa08 	bl	80056a2 <osMailCreate>
 8000292:	4602      	mov	r2, r0
 8000294:	4b35      	ldr	r3, [pc, #212]	; (800036c <main+0x158>)
 8000296:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 8000298:	4b35      	ldr	r3, [pc, #212]	; (8000370 <main+0x15c>)
 800029a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800029e:	461d      	mov	r5, r3
 80002a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80002ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f004 ff9c 	bl	80051f0 <osThreadCreate>
 80002b8:	4602      	mov	r2, r0
 80002ba:	4b2e      	ldr	r3, [pc, #184]	; (8000374 <main+0x160>)
 80002bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 80002be:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <main+0x164>)
 80002c0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80002d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f004 ff89 	bl	80051f0 <osThreadCreate>
 80002de:	4602      	mov	r2, r0
 80002e0:	4b26      	ldr	r3, [pc, #152]	; (800037c <main+0x168>)
 80002e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskPWM */
  osThreadDef(TaskPWM, TaskPWM_App, osPriorityIdle, 0, 128);
 80002e4:	4b26      	ldr	r3, [pc, #152]	; (8000380 <main+0x16c>)
 80002e6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002ea:	461d      	mov	r5, r3
 80002ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPWMHandle = osThreadCreate(osThread(TaskPWM), NULL);
 80002f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 ff76 	bl	80051f0 <osThreadCreate>
 8000304:	4602      	mov	r2, r0
 8000306:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <main+0x170>)
 8000308:	601a      	str	r2, [r3, #0]

  /* definition and creation of readMotorSpeed */
  osThreadDef(readMotorSpeed, readMotorSpeed_App, osPriorityNormal, 0, 128);
 800030a:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <main+0x174>)
 800030c:	f107 0420 	add.w	r4, r7, #32
 8000310:	461d      	mov	r5, r3
 8000312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800031a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readMotorSpeedHandle = osThreadCreate(osThread(readMotorSpeed), NULL);
 800031e:	f107 0320 	add.w	r3, r7, #32
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f004 ff63 	bl	80051f0 <osThreadCreate>
 800032a:	4602      	mov	r2, r0
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <main+0x178>)
 800032e:	601a      	str	r2, [r3, #0]

  /* definition and creation of uartSend */
  osThreadDef(uartSend, uartSend_App, osPriorityNormal, 0, 128);
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <main+0x17c>)
 8000332:	1d3c      	adds	r4, r7, #4
 8000334:	461d      	mov	r5, r3
 8000336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartSendHandle = osThreadCreate(osThread(uartSend), NULL);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f004 ff52 	bl	80051f0 <osThreadCreate>
 800034c:	4602      	mov	r2, r0
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <main+0x180>)
 8000350:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000352:	f004 ff46 	bl	80051e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000356:	e7fe      	b.n	8000356 <main+0x142>
 8000358:	200023dc 	.word	0x200023dc
 800035c:	200023d4 	.word	0x200023d4
 8000360:	08008164 	.word	0x08008164
 8000364:	2000245c 	.word	0x2000245c
 8000368:	0800823c 	.word	0x0800823c
 800036c:	20002558 	.word	0x20002558
 8000370:	0800817c 	.word	0x0800817c
 8000374:	20002458 	.word	0x20002458
 8000378:	080081a0 	.word	0x080081a0
 800037c:	200024b4 	.word	0x200024b4
 8000380:	080081c4 	.word	0x080081c4
 8000384:	20002460 	.word	0x20002460
 8000388:	080081f0 	.word	0x080081f0
 800038c:	20002454 	.word	0x20002454
 8000390:	08008218 	.word	0x08008218
 8000394:	20002554 	.word	0x20002554

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0a6      	sub	sp, #152	; 0x98
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003a2:	2228      	movs	r2, #40	; 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f007 fec7 	bl	800813a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2258      	movs	r2, #88	; 0x58
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f007 feb9 	bl	800813a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c8:	2302      	movs	r3, #2
 80003ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	2301      	movs	r3, #1
 80003ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d0:	2310      	movs	r3, #16
 80003d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 f888 	bl	800150c <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000402:	f000 fbc9 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2302      	movs	r3, #2
 800040c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000416:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f001 ff88 	bl	8002338 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800042e:	f000 fbb3 	bl	8000b98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <SystemClock_Config+0xc4>)
 8000434:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800043e:	2300      	movs	r3, #0
 8000440:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f002 f9df 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000450:	f000 fba2 	bl	8000b98 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3798      	adds	r7, #152	; 0x98
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	00201002 	.word	0x00201002

08000460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	; 0x30
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0320 	add.w	r3, r7, #32
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800048c:	4b33      	ldr	r3, [pc, #204]	; (800055c <MX_TIM1_Init+0xfc>)
 800048e:	4a34      	ldr	r2, [pc, #208]	; (8000560 <MX_TIM1_Init+0x100>)
 8000490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000492:	4b32      	ldr	r3, [pc, #200]	; (800055c <MX_TIM1_Init+0xfc>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000498:	4b30      	ldr	r3, [pc, #192]	; (800055c <MX_TIM1_Init+0xfc>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <MX_TIM1_Init+0xfc>)
 80004a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a6:	4b2d      	ldr	r3, [pc, #180]	; (800055c <MX_TIM1_Init+0xfc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004ac:	4b2b      	ldr	r3, [pc, #172]	; (800055c <MX_TIM1_Init+0xfc>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004b2:	4b2a      	ldr	r3, [pc, #168]	; (800055c <MX_TIM1_Init+0xfc>)
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004b8:	4828      	ldr	r0, [pc, #160]	; (800055c <MX_TIM1_Init+0xfc>)
 80004ba:	f002 fbc3 	bl	8002c44 <HAL_TIM_Base_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80004c4:	f000 fb68 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	4619      	mov	r1, r3
 80004d4:	4821      	ldr	r0, [pc, #132]	; (800055c <MX_TIM1_Init+0xfc>)
 80004d6:	f003 faef 	bl	8003ab8 <HAL_TIM_ConfigClockSource>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80004e0:	f000 fb5a 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80004e4:	481d      	ldr	r0, [pc, #116]	; (800055c <MX_TIM1_Init+0xfc>)
 80004e6:	f002 fe7f 	bl	80031e8 <HAL_TIM_IC_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80004f0:	f000 fb52 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	4815      	ldr	r0, [pc, #84]	; (800055c <MX_TIM1_Init+0xfc>)
 8000508:	f004 f97a 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000512:	f000 fb41 	bl	8000b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800051a:	2301      	movs	r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <MX_TIM1_Init+0xfc>)
 800052e:	f003 f91e 	bl	800376e <HAL_TIM_IC_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000538:	f000 fb2e 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2204      	movs	r2, #4
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <MX_TIM1_Init+0xfc>)
 8000544:	f003 f913 	bl	800376e <HAL_TIM_IC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800054e:	f000 fb23 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3730      	adds	r7, #48	; 0x30
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20002468 	.word	0x20002468
 8000560:	40012c00 	.word	0x40012c00

08000564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	; 0x38
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_TIM3_Init+0x104>)
 8000598:	4a34      	ldr	r2, [pc, #208]	; (800066c <MX_TIM3_Init+0x108>)
 800059a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <MX_TIM3_Init+0x104>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_TIM3_Init+0x104>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <MX_TIM3_Init+0x104>)
 80005aa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b0:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <MX_TIM3_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b6:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_TIM3_Init+0x104>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005bc:	482a      	ldr	r0, [pc, #168]	; (8000668 <MX_TIM3_Init+0x104>)
 80005be:	f002 fb41 	bl	8002c44 <HAL_TIM_Base_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005c8:	f000 fae6 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4823      	ldr	r0, [pc, #140]	; (8000668 <MX_TIM3_Init+0x104>)
 80005da:	f003 fa6d 	bl	8003ab8 <HAL_TIM_ConfigClockSource>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80005e4:	f000 fad8 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e8:	481f      	ldr	r0, [pc, #124]	; (8000668 <MX_TIM3_Init+0x104>)
 80005ea:	f002 fbf3 	bl	8002dd4 <HAL_TIM_PWM_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80005f4:	f000 fad0 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <MX_TIM3_Init+0x104>)
 8000608:	f004 f8fa 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000612:	f000 fac1 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	2360      	movs	r3, #96	; 0x60
 8000618:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1200;
 800061a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800061e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <MX_TIM3_Init+0x104>)
 8000630:	f003 f932 	bl	8003898 <HAL_TIM_PWM_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800063a:	f000 faad 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 800063e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000642:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2204      	movs	r2, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <MX_TIM3_Init+0x104>)
 800064c:	f003 f924 	bl	8003898 <HAL_TIM_PWM_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000656:	f000 fa9f 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <MX_TIM3_Init+0x104>)
 800065c:	f000 fb28 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000660:	bf00      	nop
 8000662:	3738      	adds	r7, #56	; 0x38
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200023e0 	.word	0x200023e0
 800066c:	40000400 	.word	0x40000400

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_USART2_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800067c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006b4:	f004 f94e 	bl	8004954 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 fa6b 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200024b8 	.word	0x200024b8
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <MX_GPIO_Init+0xd8>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <MX_GPIO_Init+0xd8>)
 80006ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xd8>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a29      	ldr	r2, [pc, #164]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MotorA_INA_Pin|MotorA_INB_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f000 fe92 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_GPIO_Init+0xdc>)
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_GPIO_Init+0xe0>)
 800076a:	f000 fcfb 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MotorA_INA_Pin MotorA_INB_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MotorA_INA_Pin|MotorA_INB_Pin;
 800076e:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 fceb 	bl	8001164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f000 fcbc 	bl	8001110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 fcd5 	bl	8001148 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	10210000 	.word	0x10210000
 80007b0:	48000800 	.word	0x48000800

080007b4 <set_PWM>:

/* USER CODE BEGIN 4 */
void set_PWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80007b4:	b084      	sub	sp, #16
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b088      	sub	sp, #32
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80007c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_TIM_PWM_Stop(&timer,channel);
 80007c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80007c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80007ca:	f002 fc71 	bl	80030b0 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC;
    timer.Init.Period = period;
 80007ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_TIM_PWM_Init(&timer);
 80007d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80007d8:	f002 fafc 	bl	8002dd4 <HAL_TIM_PWM_Init>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = pulse;
 80007e0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80007e4:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&timer,&sConfigOC,channel);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80007f2:	4619      	mov	r1, r3
 80007f4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80007f8:	f003 f84e 	bl	8003898 <HAL_TIM_PWM_ConfigChannel>

    HAL_TIM_PWM_Start(&timer,channel);
 80007fc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80007fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000802:	f002 fb49 	bl	8002e98 <HAL_TIM_PWM_Start>
}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7f1b      	ldrb	r3, [r3, #28]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d147      	bne.n	80008b4 <HAL_TIM_IC_CaptureCallback+0xa0>
	{
		if(MotorA_EncA.Is_First_Captured==0)
 8000824:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10a      	bne.n	8000844 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			MotorA_EncA.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f003 f9fb 	bl	8003c2c <HAL_TIM_ReadCapturedValue>
 8000836:	4602      	mov	r2, r0
 8000838:	4b46      	ldr	r3, [pc, #280]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800083a:	605a      	str	r2, [r3, #4]
			MotorA_EncA.Is_First_Captured = 1;
 800083c:	4b45      	ldr	r3, [pc, #276]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e037      	b.n	80008b4 <HAL_TIM_IC_CaptureCallback+0xa0>
		}
		else if(MotorA_EncA.Is_First_Captured)
 8000844:	4b43      	ldr	r3, [pc, #268]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d032      	beq.n	80008b4 <HAL_TIM_IC_CaptureCallback+0xa0>
		{
			MotorA_EncA.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800084e:	2100      	movs	r1, #0
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f003 f9eb 	bl	8003c2c <HAL_TIM_ReadCapturedValue>
 8000856:	4602      	mov	r2, r0
 8000858:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800085a:	609a      	str	r2, [r3, #8]
			if(MotorA_EncA.IC_Value2 > MotorA_EncA.IC_Value1)
 800085c:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	d907      	bls.n	8000878 <HAL_TIM_IC_CaptureCallback+0x64>
			{
				MotorA_EncA.Period = MotorA_EncA.IC_Value2 - MotorA_EncA.IC_Value1;
 8000868:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000874:	60d3      	str	r3, [r2, #12]
 8000876:	e009      	b.n	800088c <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else
			{
				MotorA_EncA.Period = MotorA_EncA.IC_Value2+65535 - MotorA_EncA.IC_Value1;
 8000878:	4b36      	ldr	r3, [pc, #216]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000886:	33ff      	adds	r3, #255	; 0xff
 8000888:	4a32      	ldr	r2, [pc, #200]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 800088a:	60d3      	str	r3, [r2, #12]
			}
			MotorA_EncA.Frequency = HAL_RCC_GetPCLK1Freq()/MotorA_EncA.Period;
 800088c:	f001 ff46 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000890:	4602      	mov	r2, r0
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 80008a4:	edc3 7a04 	vstr	s15, [r3, #16]
			MotorA_EncA.CalculationOK = 1;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	751a      	strb	r2, [r3, #20]
			MotorA_EncA.Is_First_Captured = 0;
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x140>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]

		}
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7f1b      	ldrb	r3, [r3, #28]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d147      	bne.n	800094c <HAL_TIM_IC_CaptureCallback+0x138>
	{
		if(MotorA_EncB.Is_First_Captured==0)
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10a      	bne.n	80008dc <HAL_TIM_IC_CaptureCallback+0xc8>
		{
			MotorA_EncB.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008c6:	2104      	movs	r1, #4
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f003 f9af 	bl	8003c2c <HAL_TIM_ReadCapturedValue>
 80008ce:	4602      	mov	r2, r0
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008d2:	605a      	str	r2, [r3, #4]
			MotorA_EncB.Is_First_Captured = 1;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
			MotorA_EncB.CalculationOK = 1;
			MotorA_EncB.Is_First_Captured = 0;

		}
	}
}
 80008da:	e037      	b.n	800094c <HAL_TIM_IC_CaptureCallback+0x138>
		else if(MotorA_EncB.Is_First_Captured)
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d032      	beq.n	800094c <HAL_TIM_IC_CaptureCallback+0x138>
			MotorA_EncB.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008e6:	2104      	movs	r1, #4
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f003 f99f 	bl	8003c2c <HAL_TIM_ReadCapturedValue>
 80008ee:	4602      	mov	r2, r0
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008f2:	609a      	str	r2, [r3, #8]
			if(MotorA_EncB.IC_Value2 > MotorA_EncB.IC_Value1)
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d907      	bls.n	8000910 <HAL_TIM_IC_CaptureCallback+0xfc>
				MotorA_EncB.Period = MotorA_EncB.IC_Value2 - MotorA_EncB.IC_Value1;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 800090c:	60d3      	str	r3, [r2, #12]
 800090e:	e009      	b.n	8000924 <HAL_TIM_IC_CaptureCallback+0x110>
				MotorA_EncB.Period = MotorA_EncB.IC_Value2+65535 - MotorA_EncB.IC_Value1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800091e:	33ff      	adds	r3, #255	; 0xff
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000922:	60d3      	str	r3, [r2, #12]
			MotorA_EncB.Frequency = HAL_RCC_GetPCLK1Freq()/MotorA_EncB.Period;
 8000924:	f001 fefa 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000928:	4602      	mov	r2, r0
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 800093c:	edc3 7a04 	vstr	s15, [r3, #16]
			MotorA_EncB.CalculationOK = 1;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000942:	2201      	movs	r2, #1
 8000944:	751a      	strb	r2, [r3, #20]
			MotorA_EncB.Is_First_Captured = 0;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000253c 	.word	0x2000253c
 8000958:	2000243c 	.word	0x2000243c

0800095c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	if(B1_Pin == GPIO_Pin)
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096c:	d104      	bne.n	8000978 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(binSem1Handle);
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <HAL_GPIO_EXTI_Callback+0x24>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fd36 	bl	80053e4 <osSemaphoreRelease>

	}
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200023d4 	.word	0x200023d4

08000984 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2120      	movs	r1, #32
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 fd70 	bl	8001478 <HAL_GPIO_WritePin>
	osSemaphoreWait(binSem1Handle, osWaitForever);
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <Task1_App+0x24>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 fcd1 	bl	8005348 <osSemaphoreWait>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009a6:	e7f1      	b.n	800098c <Task1_App+0x8>
 80009a8:	200023d4 	.word	0x200023d4

080009ac <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2120      	movs	r1, #32
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 fd5c 	bl	8001478 <HAL_GPIO_WritePin>
	  osDelay(1300);
 80009c0:	f240 5014 	movw	r0, #1300	; 0x514
 80009c4:	f004 fc60 	bl	8005288 <osDelay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c8:	e7f4      	b.n	80009b4 <Task2_App+0x8>
	...

080009cc <TaskPWM_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskPWM_App */
void TaskPWM_App(void const * argument)
{
 80009cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ce:	b097      	sub	sp, #92	; 0x5c
 80009d0:	af12      	add	r7, sp, #72	; 0x48
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskPWM_App */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009d4:	2100      	movs	r1, #0
 80009d6:	4828      	ldr	r0, [pc, #160]	; (8000a78 <TaskPWM_App+0xac>)
 80009d8:	f002 fa5e 	bl	8002e98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009dc:	2104      	movs	r1, #4
 80009de:	4826      	ldr	r0, [pc, #152]	; (8000a78 <TaskPWM_App+0xac>)
 80009e0:	f002 fa5a 	bl	8002e98 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f000 fd43 	bl	8001478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 fd3c 	bl	8001478 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	for(uint8_t cont = 1; cont <=4 ; cont++ ){
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	e028      	b.n	8000a58 <TaskPWM_App+0x8c>

		set_PWM(htim3, TIM_CHANNEL_1, 3600, 900*cont);
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4e17      	ldr	r6, [pc, #92]	; (8000a78 <TaskPWM_App+0xac>)
 8000a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8000a1e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000a22:	9310      	str	r3, [sp, #64]	; 0x40
 8000a24:	2300      	movs	r3, #0
 8000a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a28:	466d      	mov	r5, sp
 8000a2a:	f106 0410 	add.w	r4, r6, #16
 8000a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a46:	f7ff feb5 	bl	80007b4 <set_PWM>
		osDelay(2500);
 8000a4a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000a4e:	f004 fc1b 	bl	8005288 <osDelay>
	for(uint8_t cont = 1; cont <=4 ; cont++ ){
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	3301      	adds	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d9d3      	bls.n	8000a06 <TaskPWM_App+0x3a>
	}
	HAL_GPIO_TogglePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin);
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 fd1f 	bl	80014a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin);
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f000 fd19 	bl	80014a8 <HAL_GPIO_TogglePin>
	for(uint8_t cont = 1; cont <=4 ; cont++ ){
 8000a76:	e7c3      	b.n	8000a00 <TaskPWM_App+0x34>
 8000a78:	200023e0 	.word	0x200023e0

08000a7c <readMotorSpeed_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readMotorSpeed_App */
void readMotorSpeed_App(void const * argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readMotorSpeed_App */

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <readMotorSpeed_App+0x8c>)
 8000a88:	f002 fc10 	bl	80032ac <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <readMotorSpeed_App+0x8c>)
 8000a90:	f002 fc0c 	bl	80032ac <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	//osMutexWait(MutexEncoderHandle, osWaitForever );
	DataSendUart.MotorA_speed = (uint32_t) MotorA_EncA.Frequency/ENCODER_SHAFT_CPR;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <readMotorSpeed_App+0x90>)
 8000a96:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9e:	ee17 2a90 	vmov	r2, s15
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <readMotorSpeed_App+0x94>)
 8000aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <readMotorSpeed_App+0x98>)
 8000aac:	6013      	str	r3, [r2, #0]
	DataSendUart.time_stamp = (uint32_t) tickCounter;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <readMotorSpeed_App+0x9c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <readMotorSpeed_App+0x98>)
 8000ab4:	60d3      	str	r3, [r2, #12]
	DataSendUart.Period = (uint32_t) MotorA_EncA.Period;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <readMotorSpeed_App+0x90>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <readMotorSpeed_App+0x98>)
 8000abc:	6053      	str	r3, [r2, #4]
	DataSendUart.Frequency = (float) MotorA_EncA.Frequency;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <readMotorSpeed_App+0x90>)
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <readMotorSpeed_App+0x98>)
 8000ac4:	6093      	str	r3, [r2, #8]
	//osMutexRelease(MutexEncoderHandle);
	//dataPtr = osMailAlloc(QueueUARTSndHandle, millis5);
	dataPtr = osMailAlloc(QueueUARTSndHandle, osWaitForever );
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <readMotorSpeed_App+0xa0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 31ff 	mov.w	r1, #4294967295
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fe3f 	bl	8005752 <osMailAlloc>
 8000ad4:	60f8      	str	r0, [r7, #12]
	if(dataPtr != NULL)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d011      	beq.n	8000b00 <readMotorSpeed_App+0x84>
	{
		dataPtr->MotorA_speed = DataSendUart.MotorA_speed;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <readMotorSpeed_App+0x98>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	601a      	str	r2, [r3, #0]
		dataPtr->time_stamp = DataSendUart.time_stamp;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <readMotorSpeed_App+0x98>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	60da      	str	r2, [r3, #12]
		if(osMailPut(QueueUARTSndHandle, dataPtr) != osOK)
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <readMotorSpeed_App+0xa0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68f9      	ldr	r1, [r7, #12]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fe42 	bl	800577c <osMailPut>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d000      	beq.n	8000b00 <readMotorSpeed_App+0x84>
		{
			while(1);
 8000afe:	e7fe      	b.n	8000afe <readMotorSpeed_App+0x82>
		}
	}
	osDelay(10);
 8000b00:	200a      	movs	r0, #10
 8000b02:	f004 fbc1 	bl	8005288 <osDelay>
	DataSendUart.MotorA_speed = (uint32_t) MotorA_EncA.Frequency/ENCODER_SHAFT_CPR;
 8000b06:	e7c5      	b.n	8000a94 <readMotorSpeed_App+0x18>
 8000b08:	20002468 	.word	0x20002468
 8000b0c:	2000253c 	.word	0x2000253c
 8000b10:	1b4e81b5 	.word	0x1b4e81b5
 8000b14:	2000242c 	.word	0x2000242c
 8000b18:	200023d8 	.word	0x200023d8
 8000b1c:	20002558 	.word	0x20002558

08000b20 <uartSend_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartSend_App */
void uartSend_App(void const * argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  osEvent dataSEND;
  UART_DATA_SEND_t *dataPtr;
  /* Infinite loop */
  for(;;)
  {
	  dataSEND = osMailGet(QueueUARTSndHandle, osWaitForever);
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <uartSend_App+0x40>)
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fe5f 	bl	80057f8 <osMailGet>
	  if(dataSEND.status == osEventMail){
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b20      	cmp	r3, #32
 8000b3e:	d1f3      	bne.n	8000b28 <uartSend_App+0x8>
		  dataPtr = dataSEND.value.p;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	617b      	str	r3, [r7, #20]
		  HAL_UART_Transmit(&huart2, (uint8_t *)dataPtr, sizeof(UART_DATA_SEND_t), osWaitForever);
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	2210      	movs	r2, #16
 8000b4a:	6979      	ldr	r1, [r7, #20]
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <uartSend_App+0x44>)
 8000b4e:	f003 ff4f 	bl	80049f0 <HAL_UART_Transmit>
		  osMailFree(QueueUARTSndHandle, dataPtr); // Free a memory block from a mail.
 8000b52:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <uartSend_App+0x40>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6979      	ldr	r1, [r7, #20]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fec1 	bl	80058e0 <osMailFree>
	  dataSEND = osMailGet(QueueUARTSndHandle, osWaitForever);
 8000b5e:	e7e3      	b.n	8000b28 <uartSend_App+0x8>
 8000b60:	20002558 	.word	0x20002558
 8000b64:	200024b8 	.word	0x200024b8

08000b68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7a:	f000 f9f1 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //osMutexWait(MutexEncoderHandle, osWaitForever );
  tickCounter++;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b86:	6013      	str	r3, [r2, #0]
  //osMutexRelease(MutexEncoderHandle);
  /* USER CODE END Callback 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40001000 	.word	0x40001000
 8000b94:	200023d8 	.word	0x200023d8

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a24      	ldr	r2, [pc, #144]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d130      	bne.n	8000c74 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c42:	2303      	movs	r3, #3
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c52:	2302      	movs	r3, #2
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c5e:	f000 fa81 	bl	8001164 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2102      	movs	r1, #2
 8000c66:	201b      	movs	r0, #27
 8000c68:	f000 fa52 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c6c:	201b      	movs	r0, #27
 8000c6e:	f000 fa6b 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c72:	e010      	b.n	8000c96 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_TIM_Base_MspInit+0xbc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	40000400 	.word	0x40000400

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_TIM_MspPostInit+0x64>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d11c      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000cea:	2350      	movs	r3, #80	; 0x50
 8000cec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fa2c 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f000 f9ea 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	2036      	movs	r0, #54	; 0x36
 8000db6:	f000 f9ab 	bl	8001110 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f000 f9c4 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	61d3      	str	r3, [r2, #28]
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd8:	f107 0210 	add.w	r2, r7, #16
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fcde 	bl	80027a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000de8:	f001 fc98 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000dec:	4603      	mov	r3, r0
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_InitTick+0xa4>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_InitTick+0xac>)
 8000e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e22:	f001 ff0f 	bl	8002c44 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d104      	bne.n	8000e36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e2e:	f001 ff61 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3730      	adds	r7, #48	; 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	431bde83 	.word	0x431bde83
 8000e48:	2000255c 	.word	0x2000255c
 8000e4c:	40001000 	.word	0x40001000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM1_CC_IRQHandler+0x10>)
 8000e8a:	f002 fb51 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20002468 	.word	0x20002468

08000e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ea0:	f000 fb1c 	bl	80014dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM6_DAC_IRQHandler+0x10>)
 8000eae:	f002 fb3f 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000255c 	.word	0x2000255c

08000ebc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f0a:	f7ff ffd7 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f007 f8e5 	bl	80080dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f12:	f7ff f97f 	bl	8000214 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f24:	08008288 	.word	0x08008288
  ldr r2, =_sbss
 8000f28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f2c:	200025ac 	.word	0x200025ac

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x28>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f8d8 	bl	80010fa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ff28 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe2a 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200025a8 	.word	0x200025a8

08000f88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200025a8 	.word	0x200025a8

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff4c 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff61 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb1 	bl	8001094 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff80 	bl	8001040 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff54 	bl	8001004 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e160      	b.n	8001436 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8152 	beq.w	8001430 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d00b      	beq.n	80011ac <HAL_GPIO_Init+0x48>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	2b11      	cmp	r3, #17
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0xea>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b12      	cmp	r3, #18
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80ac 	beq.w	8001430 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b5e      	ldr	r3, [pc, #376]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a5d      	ldr	r2, [pc, #372]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a59      	ldr	r2, [pc, #356]	; (8001458 <HAL_GPIO_Init+0x2f4>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d025      	beq.n	8001368 <HAL_GPIO_Init+0x204>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x2f8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d01f      	beq.n	8001364 <HAL_GPIO_Init+0x200>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d019      	beq.n	8001360 <HAL_GPIO_Init+0x1fc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x300>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1f8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x304>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1f4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x308>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1f0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_GPIO_Init+0x30c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1ec>
 800134c:	2306      	movs	r3, #6
 800134e:	e00c      	b.n	800136a <HAL_GPIO_Init+0x206>
 8001350:	2307      	movs	r3, #7
 8001352:	e00a      	b.n	800136a <HAL_GPIO_Init+0x206>
 8001354:	2305      	movs	r3, #5
 8001356:	e008      	b.n	800136a <HAL_GPIO_Init+0x206>
 8001358:	2304      	movs	r3, #4
 800135a:	e006      	b.n	800136a <HAL_GPIO_Init+0x206>
 800135c:	2303      	movs	r3, #3
 800135e:	e004      	b.n	800136a <HAL_GPIO_Init+0x206>
 8001360:	2302      	movs	r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x206>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_GPIO_Init+0x206>
 8001368:	2300      	movs	r3, #0
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137a:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x2f4>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <HAL_GPIO_Init+0x310>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ac:	4a31      	ldr	r2, [pc, #196]	; (8001474 <HAL_GPIO_Init+0x310>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_GPIO_Init+0x310>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_GPIO_Init+0x310>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_GPIO_Init+0x310>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_GPIO_Init+0x310>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x310>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_GPIO_Init+0x310>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f ae97 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	48001400 	.word	0x48001400
 8001470:	48001800 	.word	0x48001800
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43d9      	mvns	r1, r3
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	400b      	ands	r3, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fa2e 	bl	800095c <HAL_GPIO_EXTI_Callback>
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001512:	af00      	add	r7, sp, #0
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	f000 bf01 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8160 	beq.w	80017f6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001536:	4bae      	ldr	r3, [pc, #696]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001542:	4bab      	ldr	r3, [pc, #684]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d159      	bne.n	8001602 <HAL_RCC_OscConfig+0xf6>
 800154e:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d152      	bne.n	8001602 <HAL_RCC_OscConfig+0xf6>
 800155c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001560:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001570:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d102      	bne.n	800158e <HAL_RCC_OscConfig+0x82>
 8001588:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0xae>
 800158e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001592:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800159a:	fa93 f3a3 	rbit	r3, r3
 800159e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80015a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015b6:	4b8e      	ldr	r3, [pc, #568]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015be:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80015c2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80015c6:	fa92 f2a2 	rbit	r2, r2
 80015ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80015ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015d2:	fab2 f282 	clz	r2, r2
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f042 0220 	orr.w	r2, r2, #32
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	f002 021f 	and.w	r2, r2, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8102 	beq.w	80017f4 <HAL_RCC_OscConfig+0x2e8>
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 80fc 	bne.w	80017f4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f000 be93 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x110>
 800160e:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a77      	ldr	r2, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e030      	b.n	800167e <HAL_RCC_OscConfig+0x172>
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x134>
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a71      	ldr	r2, [pc, #452]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01e      	b.n	800167e <HAL_RCC_OscConfig+0x172>
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x15a>
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a67      	ldr	r2, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a64      	ldr	r2, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x172>
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a61      	ldr	r2, [pc, #388]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800166c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d059      	beq.n	800173c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fc7e 	bl	8000f88 <HAL_GetTick>
 800168c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001692:	f7ff fc79 	bl	8000f88 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d902      	bls.n	80016a8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	f000 be40 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>
 80016a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80016bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <HAL_RCC_OscConfig+0x1ce>
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x1fa>
 80016da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80016ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800170e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001712:	fa92 f2a2 	rbit	r2, r2
 8001716:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800171a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f042 0220 	orr.w	r2, r2, #32
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f002 021f 	and.w	r2, r2, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0ab      	beq.n	8001692 <HAL_RCC_OscConfig+0x186>
 800173a:	e05c      	b.n	80017f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fc24 	bl	8000f88 <HAL_GetTick>
 8001740:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001746:	f7ff fc1f 	bl	8000f88 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d902      	bls.n	800175c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	f000 bde6 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>
 800175c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001760:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001770:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x282>
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x2ae>
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80017a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_RCC_OscConfig+0x2e4>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017be:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017c6:	fa92 f2a2 	rbit	r2, r2
 80017ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80017ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017d2:	fab2 f282 	clz	r2, r2
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f042 0220 	orr.w	r2, r2, #32
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	f002 021f 	and.w	r2, r2, #31
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ab      	bne.n	8001746 <HAL_RCC_OscConfig+0x23a>
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_OscConfig+0x2ea>
 80017f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8170 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001806:	4bd0      	ldr	r3, [pc, #832]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001812:	4bcd      	ldr	r3, [pc, #820]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d16d      	bne.n	80018fa <HAL_RCC_OscConfig+0x3ee>
 800181e:	4bca      	ldr	r3, [pc, #808]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800182a:	d166      	bne.n	80018fa <HAL_RCC_OscConfig+0x3ee>
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800183e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	095b      	lsrs	r3, r3, #5
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d102      	bne.n	800185c <HAL_RCC_OscConfig+0x350>
 8001856:	4bbc      	ldr	r3, [pc, #752]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	e013      	b.n	8001884 <HAL_RCC_OscConfig+0x378>
 800185c:	2302      	movs	r3, #2
 800185e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001874:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001880:	4bb1      	ldr	r3, [pc, #708]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2202      	movs	r2, #2
 8001886:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800188a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800188e:	fa92 f2a2 	rbit	r2, r2
 8001892:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001896:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800189a:	fab2 f282 	clz	r2, r2
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f042 0220 	orr.w	r2, r2, #32
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	f002 021f 	and.w	r2, r2, #31
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3ba>
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d002      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f000 bd31 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4ba0      	ldr	r3, [pc, #640]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	21f8      	movs	r1, #248	; 0xf8
 80018d6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80018de:	fa91 f1a1 	rbit	r1, r1
 80018e2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80018e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018ea:	fab1 f181 	clz	r1, r1
 80018ee:	b2c9      	uxtb	r1, r1
 80018f0:	408b      	lsls	r3, r1
 80018f2:	4995      	ldr	r1, [pc, #596]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f8:	e0f5      	b.n	8001ae6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8085 	beq.w	8001a10 <HAL_RCC_OscConfig+0x504>
 8001906:	2301      	movs	r3, #1
 8001908:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001918:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001926:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	461a      	mov	r2, r3
 800192e:	2301      	movs	r3, #1
 8001930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fb29 	bl	8000f88 <HAL_GetTick>
 8001936:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff fb24 	bl	8000f88 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d902      	bls.n	8001952 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	f000 bceb 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001952:	2302      	movs	r3, #2
 8001954:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001964:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0x476>
 800197c:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e013      	b.n	80019aa <HAL_RCC_OscConfig+0x49e>
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800199a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019a6:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2202      	movs	r2, #2
 80019ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019b4:	fa92 f2a2 	rbit	r2, r2
 80019b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80019bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019c0:	fab2 f282 	clz	r2, r2
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f042 0220 	orr.w	r2, r2, #32
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f002 021f 	and.w	r2, r2, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0af      	beq.n	800193c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	21f8      	movs	r1, #248	; 0xf8
 80019ec:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80019f4:	fa91 f1a1 	rbit	r1, r1
 80019f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80019fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a00:	fab1 f181 	clz	r1, r1
 8001a04:	b2c9      	uxtb	r1, r1
 8001a06:	408b      	lsls	r3, r1
 8001a08:	494f      	ldr	r1, [pc, #316]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
 8001a0e:	e06a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x5da>
 8001a10:	2301      	movs	r3, #1
 8001a12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	461a      	mov	r2, r3
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff faa4 	bl	8000f88 <HAL_GetTick>
 8001a40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff fa9f 	bl	8000f88 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d902      	bls.n	8001a5c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f000 bc66 	b.w	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001a6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_OscConfig+0x580>
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e013      	b.n	8001ab4 <HAL_RCC_OscConfig+0x5a8>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001aa4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_OscConfig+0x63c>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001aba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ac6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001aca:	fab2 f282 	clz	r2, r2
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1af      	bne.n	8001a46 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80da 	beq.w	8001caa <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d069      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x6c8>
 8001b00:	2301      	movs	r3, #1
 8001b02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_OscConfig+0x640>)
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	461a      	mov	r2, r3
 8001b26:	2301      	movs	r3, #1
 8001b28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fa2d 	bl	8000f88 <HAL_GetTick>
 8001b2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e00d      	b.n	8001b50 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fa28 	bl	8000f88 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d905      	bls.n	8001b50 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e3ef      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	10908120 	.word	0x10908120
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b68:	2202      	movs	r2, #2
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b80:	2202      	movs	r2, #2
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b94:	4ba4      	ldr	r3, [pc, #656]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	6019      	str	r1, [r3, #0]
 8001ba0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f1a3 	rbit	r1, r3
 8001baa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bae:	6019      	str	r1, [r3, #0]
  return result;
 8001bb0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0b0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x628>
 8001bd2:	e06a      	b.n	8001caa <HAL_RCC_OscConfig+0x79e>
 8001bd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bf0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x920>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	2300      	movs	r3, #0
 8001c04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff f9bf 	bl	8000f88 <HAL_GetTick>
 8001c0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0e:	e009      	b.n	8001c24 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff f9ba 	bl	8000f88 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e381      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001c24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c40:	2202      	movs	r2, #2
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c58:	2202      	movs	r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c6a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c74:	2102      	movs	r1, #2
 8001c76:	6019      	str	r1, [r3, #0]
 8001c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f1a3 	rbit	r1, r3
 8001c82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c86:	6019      	str	r1, [r3, #0]
  return result;
 8001c88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1b2      	bne.n	8001c10 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8157 	beq.w	8001f68 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d112      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a55      	ldr	r2, [pc, #340]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_RCC_OscConfig+0x924>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11a      	bne.n	8001d34 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_OscConfig+0x924>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_RCC_OscConfig+0x924>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f93d 	bl	8000f88 <HAL_GetTick>
 8001d0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	e009      	b.n	8001d28 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7ff f938 	bl	8000f88 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e2ff      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_OscConfig+0x924>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ef      	beq.n	8001d14 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x840>
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	e02f      	b.n	8001dac <HAL_RCC_OscConfig+0x8a0>
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x864>
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0x8a0>
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x888>
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0x8a0>
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d06a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f8e7 	bl	8000f88 <HAL_GetTick>
 8001dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f8e2 	bl	8000f88 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e2a7      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001dd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ddc:	2202      	movs	r2, #2
 8001dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f2a3 	rbit	r2, r3
 8001dea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001df4:	2202      	movs	r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x928>
 8001e22:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <HAL_RCC_OscConfig+0x91c>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x944>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	10908120 	.word	0x10908120
 8001e30:	40007000 	.word	0x40007000
 8001e34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e38:	2202      	movs	r2, #2
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4bc0      	ldr	r3, [pc, #768]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e54:	2102      	movs	r1, #2
 8001e56:	6011      	str	r1, [r2, #0]
 8001e58:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	fa92 f1a2 	rbit	r1, r2
 8001e62:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e66:	6011      	str	r1, [r2, #0]
  return result;
 8001e68:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	fab2 f282 	clz	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d09a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x8b4>
 8001e8a:	e063      	b.n	8001f54 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f87c 	bl	8000f88 <HAL_GetTick>
 8001e90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff f877 	bl	8000f88 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e23c      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eca:	2202      	movs	r2, #2
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ee2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_OscConfig+0x9f2>
 8001ef8:	4b95      	ldr	r3, [pc, #596]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	e00d      	b.n	8001f1a <HAL_RCC_OscConfig+0xa0e>
 8001efe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f02:	2202      	movs	r2, #2
 8001f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f1e:	2102      	movs	r1, #2
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fa92 f1a2 	rbit	r1, r2
 8001f2c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1a0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f54:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	4b7c      	ldr	r3, [pc, #496]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	4a7b      	ldr	r2, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8001f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 81d9 	beq.w	8002326 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f74:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	f000 81a6 	beq.w	80022ce <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	f040 811e 	bne.w	80021ca <HAL_RCC_OscConfig+0xcbe>
 8001f8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fa6:	601a      	str	r2, [r3, #0]
  return result;
 8001fa8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ffe0 	bl	8000f88 <HAL_GetTick>
 8001fc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe ffdb 	bl	8000f88 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1a2      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 8001fe2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	fa93 f2a3 	rbit	r2, r3
 8001ff6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ffa:	601a      	str	r2, [r3, #0]
  return result;
 8001ffc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002000:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0xb10>
 8002016:	4b4e      	ldr	r3, [pc, #312]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0xb48>
 800201c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800203a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002058:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800205c:	6011      	str	r1, [r2, #0]
 800205e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	fa92 f1a2 	rbit	r1, r2
 8002068:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800206c:	6011      	str	r1, [r2, #0]
  return result;
 800206e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	fab2 f282 	clz	r2, r2
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f042 0220 	orr.w	r2, r2, #32
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	f002 021f 	and.w	r2, r2, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f202 	lsl.w	r2, r1, r2
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d19e      	bne.n	8001fce <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f023 020f 	bic.w	r2, r3, #15
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	492c      	ldr	r1, [pc, #176]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a19      	ldr	r1, [r3, #32]
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	4925      	ldr	r1, [pc, #148]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d8:	601a      	str	r2, [r3, #0]
  return result;
 80020da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020de:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	461a      	mov	r2, r3
 80020f2:	2301      	movs	r3, #1
 80020f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe ff47 	bl	8000f88 <HAL_GetTick>
 80020fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fe:	e009      	b.n	8002114 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe ff42 	bl	8000f88 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e109      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 8002114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800212c:	601a      	str	r2, [r3, #0]
  return result;
 800212e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002132:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_RCC_OscConfig+0xc48>
 8002148:	4b01      	ldr	r3, [pc, #4]	; (8002150 <HAL_RCC_OscConfig+0xc44>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e01e      	b.n	800218c <HAL_RCC_OscConfig+0xc80>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002172:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0xe28>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002190:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002194:	6011      	str	r1, [r2, #0]
 8002196:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	fa92 f1a2 	rbit	r1, r2
 80021a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a4:	6011      	str	r1, [r2, #0]
  return result;
 80021a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d09b      	beq.n	8002100 <HAL_RCC_OscConfig+0xbf4>
 80021c8:	e0ad      	b.n	8002326 <HAL_RCC_OscConfig+0xe1a>
 80021ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	fa93 f2a3 	rbit	r2, r3
 80021de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e2:	601a      	str	r2, [r3, #0]
  return result;
 80021e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	461a      	mov	r2, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fec2 	bl	8000f88 <HAL_GetTick>
 8002204:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	e009      	b.n	800221e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe febd 	bl	8000f88 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e084      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
 800221e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_RCC_OscConfig+0xd4c>
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCC_OscConfig+0xe28>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e01b      	b.n	8002290 <HAL_RCC_OscConfig+0xd84>
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_OscConfig+0xe28>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	f107 0214 	add.w	r2, r7, #20
 8002294:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	f107 0214 	add.w	r2, r7, #20
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	fa92 f1a2 	rbit	r1, r2
 80022a4:	f107 0210 	add.w	r2, r7, #16
 80022a8:	6011      	str	r1, [r2, #0]
  return result;
 80022aa:	f107 0210 	add.w	r2, r7, #16
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f042 0220 	orr.w	r2, r2, #32
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d19e      	bne.n	800220a <HAL_RCC_OscConfig+0xcfe>
 80022cc:	e02b      	b.n	8002326 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e025      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_RCC_OscConfig+0xe28>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_OscConfig+0xe28>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d111      	bne.n	8002322 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800230c:	429a      	cmp	r2, r3
 800230e:	d108      	bne.n	8002322 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002314:	f003 020f 	and.w	r2, r3, #15
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b09e      	sub	sp, #120	; 0x78
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e162      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b90      	ldr	r3, [pc, #576]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b8d      	ldr	r3, [pc, #564]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	498b      	ldr	r1, [pc, #556]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e14a      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b82      	ldr	r3, [pc, #520]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	497f      	ldr	r1, [pc, #508]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80dc 	beq.w	8002564 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d13c      	bne.n	800242e <HAL_RCC_ClockConfig+0xf6>
 80023b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <HAL_RCC_ClockConfig+0xa6>
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e00f      	b.n	80023fe <HAL_RCC_ClockConfig+0xc6>
 80023de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	667b      	str	r3, [r7, #100]	; 0x64
 80023ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f0:	663b      	str	r3, [r7, #96]	; 0x60
 80023f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002402:	65ba      	str	r2, [r7, #88]	; 0x58
 8002404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002406:	fa92 f2a2 	rbit	r2, r2
 800240a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800240c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f042 0220 	orr.w	r2, r2, #32
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f002 021f 	and.w	r2, r2, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d17b      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0f3      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d13c      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x178>
 8002436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d102      	bne.n	8002460 <HAL_RCC_ClockConfig+0x128>
 800245a:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e00f      	b.n	8002480 <HAL_RCC_ClockConfig+0x148>
 8002460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
 800246e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
 8002474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002484:	63ba      	str	r2, [r7, #56]	; 0x38
 8002486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002488:	fa92 f2a2 	rbit	r2, r2
 800248c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800248e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0220 	orr.w	r2, r2, #32
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d13a      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b2      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
 80024b0:	2302      	movs	r3, #2
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x1a0>
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e00d      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1bc>
 80024d8:	2302      	movs	r3, #2
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	2302      	movs	r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2202      	movs	r2, #2
 80024f6:	61ba      	str	r2, [r7, #24]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	fa92 f2a2 	rbit	r2, r2
 80024fe:	617a      	str	r2, [r7, #20]
  return result;
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	fab2 f282 	clz	r2, r2
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f042 0220 	orr.w	r2, r2, #32
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f002 021f 	and.w	r2, r2, #31
 8002512:	2101      	movs	r1, #1
 8002514:	fa01 f202 	lsl.w	r2, r1, r2
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e079      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	491a      	ldr	r1, [pc, #104]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7fe fd28 	bl	8000f88 <HAL_GetTick>
 8002538:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fd24 	bl	8000f88 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e061      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 020c 	and.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	429a      	cmp	r2, r3
 8002562:	d1eb      	bne.n	800253c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d214      	bcs.n	800259c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4906      	ldr	r1, [pc, #24]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e040      	b.n	8002616 <HAL_RCC_ClockConfig+0x2de>
 8002594:	40022000 	.word	0x40022000
 8002598:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_ClockConfig+0x2e8>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	491a      	ldr	r1, [pc, #104]	; (8002620 <HAL_RCC_ClockConfig+0x2e8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_ClockConfig+0x2e8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4912      	ldr	r1, [pc, #72]	; (8002620 <HAL_RCC_ClockConfig+0x2e8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025da:	f000 f829 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025de:	4601      	mov	r1, r0
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCC_ClockConfig+0x2e8>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e8:	22f0      	movs	r2, #240	; 0xf0
 80025ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	fa92 f2a2 	rbit	r2, r2
 80025f2:	60fa      	str	r2, [r7, #12]
  return result;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	40d3      	lsrs	r3, r2
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x2ec>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	fa21 f303 	lsr.w	r3, r1, r3
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_RCC_ClockConfig+0x2f0>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_ClockConfig+0x2f4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fbc6 	bl	8000da0 <HAL_InitTick>
  
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3778      	adds	r7, #120	; 0x78
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	08008248 	.word	0x08008248
 8002628:	20000000 	.word	0x20000000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	b08b      	sub	sp, #44	; 0x2c
 8002634:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x30>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x36>
 800265e:	e03f      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002662:	623b      	str	r3, [r7, #32]
      break;
 8002664:	e03f      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800266c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002670:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	fa92 f2a2 	rbit	r2, r2
 8002678:	607a      	str	r2, [r7, #4]
  return result;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	fab2 f282 	clz	r2, r2
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	40d3      	lsrs	r3, r2
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	220f      	movs	r2, #15
 8002694:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	fa92 f2a2 	rbit	r2, r2
 800269c:	60fa      	str	r2, [r7, #12]
  return result;
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	fab2 f282 	clz	r2, r2
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	40d3      	lsrs	r3, r2
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	e007      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	623b      	str	r3, [r7, #32]
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026e2:	623b      	str	r3, [r7, #32]
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	372c      	adds	r7, #44	; 0x2c
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	08008260 	.word	0x08008260
 8002700:	08008270 	.word	0x08008270

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002722:	f7ff ffef 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002726:	4601      	mov	r1, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002730:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	fa92 f2a2 	rbit	r2, r2
 800273c:	603a      	str	r2, [r7, #0]
  return result;
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	40d3      	lsrs	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_RCC_GetPCLK1Freq+0x40>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	08008258 	.word	0x08008258

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002766:	f7ff ffcd 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800276a:	4601      	mov	r1, r0
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002774:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002778:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	fa92 f2a2 	rbit	r2, r2
 8002780:	603a      	str	r2, [r7, #0]
  return result;
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	fab2 f282 	clz	r2, r2
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	40d3      	lsrs	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	08008258 	.word	0x08008258

080027a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	220f      	movs	r2, #15
 80027b2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0203 	and.w	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCC_GetClockConfig+0x60>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0207 	and.w	r2, r3, #7
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	40022000 	.word	0x40022000

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b092      	sub	sp, #72	; 0x48
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80d4 	beq.w	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282c:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10e      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	61d3      	str	r3, [r2, #28]
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002856:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d118      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a41      	ldr	r2, [pc, #260]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286e:	f7fe fb8b 	bl	8000f88 <HAL_GetTick>
 8002872:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002876:	f7fe fb87 	bl	8000f88 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	; 0x64
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1d6      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8084 	beq.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d07c      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b4:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	2301      	movs	r3, #1
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800290c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d04b      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fb37 	bl	8000f88 <HAL_GetTick>
 800291a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fb33 	bl	8000f88 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e180      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	61fb      	str	r3, [r7, #28]
  return result;
 800294c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d108      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002962:	4b01      	ldr	r3, [pc, #4]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	e00d      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	10908100 	.word	0x10908100
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	4ba0      	ldr	r3, [pc, #640]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	2202      	movs	r2, #2
 8002986:	613a      	str	r2, [r7, #16]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	fa92 f2a2 	rbit	r2, r2
 800298e:	60fa      	str	r2, [r7, #12]
  return result;
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	fab2 f282 	clz	r2, r2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f002 021f 	and.w	r2, r2, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0b7      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ae:	4b95      	ldr	r3, [pc, #596]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4992      	ldr	r1, [pc, #584]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b8e      	ldr	r3, [pc, #568]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4a8d      	ldr	r2, [pc, #564]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e0:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f023 0203 	bic.w	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4985      	ldr	r1, [pc, #532]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	497e      	ldr	r1, [pc, #504]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	4976      	ldr	r1, [pc, #472]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f023 0210 	bic.w	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	496f      	ldr	r1, [pc, #444]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a58:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	4967      	ldr	r1, [pc, #412]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a76:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f023 0220 	bic.w	r2, r3, #32
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4960      	ldr	r1, [pc, #384]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a94:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	4958      	ldr	r1, [pc, #352]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab2:	4b54      	ldr	r3, [pc, #336]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4951      	ldr	r1, [pc, #324]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4949      	ldr	r1, [pc, #292]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aee:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4942      	ldr	r1, [pc, #264]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	493a      	ldr	r1, [pc, #232]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	4933      	ldr	r1, [pc, #204]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	492b      	ldr	r1, [pc, #172]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4924      	ldr	r1, [pc, #144]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	491c      	ldr	r1, [pc, #112]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	4915      	ldr	r1, [pc, #84]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	490d      	ldr	r1, [pc, #52]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	4906      	ldr	r1, [pc, #24]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	e002      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3748      	adds	r7, #72	; 0x48
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e049      	b.n	8002cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd ffc0 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f001 f834 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04f      	b.n	8002dac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01d      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d018      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x76>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d115      	bne.n	8002d96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d015      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d011      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	e008      	b.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e000      	b.n	8002daa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40013400 	.word	0x40013400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40015000 	.word	0x40015000
 8002dd0:	00010007 	.word	0x00010007

08002dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e049      	b.n	8002e7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f841 	bl	8002e82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 ff6c 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_TIM_PWM_Start+0x24>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e03c      	b.n	8002f36 <HAL_TIM_PWM_Start+0x9e>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d109      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x3e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e02f      	b.n	8002f36 <HAL_TIM_PWM_Start+0x9e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d109      	bne.n	8002ef0 <HAL_TIM_PWM_Start+0x58>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e022      	b.n	8002f36 <HAL_TIM_PWM_Start+0x9e>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d109      	bne.n	8002f0a <HAL_TIM_PWM_Start+0x72>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e015      	b.n	8002f36 <HAL_TIM_PWM_Start+0x9e>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIM_PWM_Start+0x8c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e008      	b.n	8002f36 <HAL_TIM_PWM_Start+0x9e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0a1      	b.n	8003082 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_PWM_Start+0xb6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f4c:	e023      	b.n	8002f96 <HAL_TIM_PWM_Start+0xfe>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_PWM_Start+0xc6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	e01b      	b.n	8002f96 <HAL_TIM_PWM_Start+0xfe>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_PWM_Start+0xd6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6c:	e013      	b.n	8002f96 <HAL_TIM_PWM_Start+0xfe>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Start+0xe6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f7c:	e00b      	b.n	8002f96 <HAL_TIM_PWM_Start+0xfe>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_PWM_Start+0xf6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f8c:	e003      	b.n	8002f96 <HAL_TIM_PWM_Start+0xfe>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 fc08 	bl	80047b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a38      	ldr	r2, [pc, #224]	; (800308c <HAL_TIM_PWM_Start+0x1f4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x148>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a37      	ldr	r2, [pc, #220]	; (8003090 <HAL_TIM_PWM_Start+0x1f8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x148>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_TIM_PWM_Start+0x1fc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x148>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_TIM_PWM_Start+0x200>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x148>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_TIM_PWM_Start+0x204>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x148>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <HAL_TIM_PWM_Start+0x208>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIM_PWM_Start+0x14c>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x14e>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_TIM_PWM_Start+0x1f4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d01d      	beq.n	8003040 <HAL_TIM_PWM_Start+0x1a8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d018      	beq.n	8003040 <HAL_TIM_PWM_Start+0x1a8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <HAL_TIM_PWM_Start+0x20c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d013      	beq.n	8003040 <HAL_TIM_PWM_Start+0x1a8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <HAL_TIM_PWM_Start+0x210>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00e      	beq.n	8003040 <HAL_TIM_PWM_Start+0x1a8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_TIM_PWM_Start+0x1f8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIM_PWM_Start+0x1a8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_TIM_PWM_Start+0x1fc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIM_PWM_Start+0x1a8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_TIM_PWM_Start+0x208>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d115      	bne.n	800306c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_TIM_PWM_Start+0x214>)
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b06      	cmp	r3, #6
 8003050:	d015      	beq.n	800307e <HAL_TIM_PWM_Start+0x1e6>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d011      	beq.n	800307e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306a:	e008      	b.n	800307e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e000      	b.n	8003080 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40013400 	.word	0x40013400
 8003094:	40014000 	.word	0x40014000
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800
 80030a0:	40015000 	.word	0x40015000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	00010007 	.word	0x00010007

080030b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	6839      	ldr	r1, [r7, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fb76 	bl	80047b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <HAL_TIM_PWM_Stop+0x120>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <HAL_TIM_PWM_Stop+0x54>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3f      	ldr	r2, [pc, #252]	; (80031d4 <HAL_TIM_PWM_Stop+0x124>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_TIM_PWM_Stop+0x54>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3d      	ldr	r2, [pc, #244]	; (80031d8 <HAL_TIM_PWM_Stop+0x128>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <HAL_TIM_PWM_Stop+0x54>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <HAL_TIM_PWM_Stop+0x12c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIM_PWM_Stop+0x54>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_TIM_PWM_Stop+0x130>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_TIM_PWM_Stop+0x54>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a39      	ldr	r2, [pc, #228]	; (80031e4 <HAL_TIM_PWM_Stop+0x134>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_TIM_PWM_Stop+0x58>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_TIM_PWM_Stop+0x5a>
 8003108:	2300      	movs	r3, #0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d017      	beq.n	800313e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	f241 1311 	movw	r3, #4369	; 0x1111
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_TIM_PWM_Stop+0x8e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	f240 4344 	movw	r3, #1092	; 0x444
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_TIM_PWM_Stop+0x8e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	f241 1311 	movw	r3, #4369	; 0x1111
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_TIM_PWM_Stop+0xbe>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	f240 4344 	movw	r3, #1092	; 0x444
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d107      	bne.n	800316e <HAL_TIM_PWM_Stop+0xbe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Stop+0xce>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800317c:	e023      	b.n	80031c6 <HAL_TIM_PWM_Stop+0x116>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Stop+0xde>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318c:	e01b      	b.n	80031c6 <HAL_TIM_PWM_Stop+0x116>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Stop+0xee>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319c:	e013      	b.n	80031c6 <HAL_TIM_PWM_Stop+0x116>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Stop+0xfe>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ac:	e00b      	b.n	80031c6 <HAL_TIM_PWM_Stop+0x116>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Stop+0x10e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031bc:	e003      	b.n	80031c6 <HAL_TIM_PWM_Stop+0x116>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40013400 	.word	0x40013400
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40014400 	.word	0x40014400
 80031e0:	40014800 	.word	0x40014800
 80031e4:	40015000 	.word	0x40015000

080031e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e049      	b.n	800328e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f841 	bl	8003296 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fd62 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_IC_Start_IT+0x1a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e023      	b.n	800330e <HAL_TIM_IC_Start_IT+0x62>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0x2a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e01b      	b.n	800330e <HAL_TIM_IC_Start_IT+0x62>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_IC_Start_IT+0x3a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e013      	b.n	800330e <HAL_TIM_IC_Start_IT+0x62>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_IC_Start_IT+0x4a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e00b      	b.n	800330e <HAL_TIM_IC_Start_IT+0x62>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0x5a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e003      	b.n	800330e <HAL_TIM_IC_Start_IT+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800330c:	b2db      	uxtb	r3, r3
 800330e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <HAL_TIM_IC_Start_IT+0x74>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e013      	b.n	8003348 <HAL_TIM_IC_Start_IT+0x9c>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d104      	bne.n	8003330 <HAL_TIM_IC_Start_IT+0x84>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e00b      	b.n	8003348 <HAL_TIM_IC_Start_IT+0x9c>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b08      	cmp	r3, #8
 8003334:	d104      	bne.n	8003340 <HAL_TIM_IC_Start_IT+0x94>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e003      	b.n	8003348 <HAL_TIM_IC_Start_IT+0x9c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003346:	b2db      	uxtb	r3, r3
 8003348:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0d8      	b.n	800350c <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_TIM_IC_Start_IT+0xbe>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003368:	e023      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x106>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d104      	bne.n	800337a <HAL_TIM_IC_Start_IT+0xce>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	e01b      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x106>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d104      	bne.n	800338a <HAL_TIM_IC_Start_IT+0xde>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003388:	e013      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x106>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d104      	bne.n	800339a <HAL_TIM_IC_Start_IT+0xee>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003398:	e00b      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x106>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b10      	cmp	r3, #16
 800339e:	d104      	bne.n	80033aa <HAL_TIM_IC_Start_IT+0xfe>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a8:	e003      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x106>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_IC_Start_IT+0x116>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c0:	e013      	b.n	80033ea <HAL_TIM_IC_Start_IT+0x13e>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_IC_Start_IT+0x126>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d0:	e00b      	b.n	80033ea <HAL_TIM_IC_Start_IT+0x13e>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_IC_Start_IT+0x136>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e0:	e003      	b.n	80033ea <HAL_TIM_IC_Start_IT+0x13e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d841      	bhi.n	8003474 <HAL_TIM_IC_Start_IT+0x1c8>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_TIM_IC_Start_IT+0x14c>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800342d 	.word	0x0800342d
 80033fc:	08003475 	.word	0x08003475
 8003400:	08003475 	.word	0x08003475
 8003404:	08003475 	.word	0x08003475
 8003408:	0800343f 	.word	0x0800343f
 800340c:	08003475 	.word	0x08003475
 8003410:	08003475 	.word	0x08003475
 8003414:	08003475 	.word	0x08003475
 8003418:	08003451 	.word	0x08003451
 800341c:	08003475 	.word	0x08003475
 8003420:	08003475 	.word	0x08003475
 8003424:	08003475 	.word	0x08003475
 8003428:	08003463 	.word	0x08003463
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0202 	orr.w	r2, r2, #2
 800343a:	60da      	str	r2, [r3, #12]
      break;
 800343c:	e01b      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0204 	orr.w	r2, r2, #4
 800344c:	60da      	str	r2, [r3, #12]
      break;
 800344e:	e012      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0208 	orr.w	r2, r2, #8
 800345e:	60da      	str	r2, [r3, #12]
      break;
 8003460:	e009      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0210 	orr.w	r2, r2, #16
 8003470:	60da      	str	r2, [r3, #12]
      break;
 8003472:	e000      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8003474:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f998 	bl	80047b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_TIM_IC_Start_IT+0x268>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01d      	beq.n	80034ca <HAL_TIM_IC_Start_IT+0x21e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d018      	beq.n	80034ca <HAL_TIM_IC_Start_IT+0x21e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_TIM_IC_Start_IT+0x26c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_TIM_IC_Start_IT+0x21e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1d      	ldr	r2, [pc, #116]	; (800351c <HAL_TIM_IC_Start_IT+0x270>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_TIM_IC_Start_IT+0x21e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_TIM_IC_Start_IT+0x274>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_TIM_IC_Start_IT+0x21e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <HAL_TIM_IC_Start_IT+0x278>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_TIM_IC_Start_IT+0x21e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_TIM_IC_Start_IT+0x27c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d115      	bne.n	80034f6 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_TIM_IC_Start_IT+0x280>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b06      	cmp	r3, #6
 80034da:	d015      	beq.n	8003508 <HAL_TIM_IC_Start_IT+0x25c>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e2:	d011      	beq.n	8003508 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	e008      	b.n	8003508 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e000      	b.n	800350a <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40013400 	.word	0x40013400
 8003524:	40014000 	.word	0x40014000
 8003528:	40015000 	.word	0x40015000
 800352c:	00010007 	.word	0x00010007

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0202 	mvn.w	r2, #2
 800355c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd f94e 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fb9a 	bl	8003cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fba1 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd f924 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fb70 	bl	8003cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fb77 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0208 	mvn.w	r2, #8
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2204      	movs	r2, #4
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd f8fa 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fb46 	bl	8003cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fb4d 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2208      	movs	r2, #8
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd f8d0 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fb1c 	bl	8003cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fb23 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0201 	mvn.w	r2, #1
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fa5a 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 f926 	bl	800492c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ee:	d10e      	bne.n	800370e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d107      	bne.n	800370e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f001 f919 	bl	8004940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d10e      	bne.n	800373a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d107      	bne.n	800373a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fad1 	bl	8003cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b20      	cmp	r3, #32
 8003746:	d10e      	bne.n	8003766 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b20      	cmp	r3, #32
 8003754:	d107      	bne.n	8003766 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0220 	mvn.w	r2, #32
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f8d9 	bl	8004918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003784:	2302      	movs	r3, #2
 8003786:	e082      	b.n	800388e <HAL_TIM_IC_ConfigChannel+0x120>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11b      	bne.n	80037ce <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f000 fe47 	bl	8004438 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 020c 	bic.w	r2, r2, #12
 80037b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6999      	ldr	r1, [r3, #24]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	619a      	str	r2, [r3, #24]
 80037cc:	e05a      	b.n	8003884 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d11c      	bne.n	800380e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f000 fec5 	bl	8004572 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6999      	ldr	r1, [r3, #24]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	021a      	lsls	r2, r3, #8
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	619a      	str	r2, [r3, #24]
 800380c:	e03a      	b.n	8003884 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d11b      	bne.n	800384c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f000 ff12 	bl	800464c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020c 	bic.w	r2, r2, #12
 8003836:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69d9      	ldr	r1, [r3, #28]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	61da      	str	r2, [r3, #28]
 800384a:	e01b      	b.n	8003884 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f000 ff32 	bl	80046c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800386e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69d9      	ldr	r1, [r3, #28]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0fd      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x216>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b14      	cmp	r3, #20
 80038be:	f200 80f0 	bhi.w	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	08003aa3 	.word	0x08003aa3
 80038d0:	08003aa3 	.word	0x08003aa3
 80038d4:	08003aa3 	.word	0x08003aa3
 80038d8:	0800395d 	.word	0x0800395d
 80038dc:	08003aa3 	.word	0x08003aa3
 80038e0:	08003aa3 	.word	0x08003aa3
 80038e4:	08003aa3 	.word	0x08003aa3
 80038e8:	0800399f 	.word	0x0800399f
 80038ec:	08003aa3 	.word	0x08003aa3
 80038f0:	08003aa3 	.word	0x08003aa3
 80038f4:	08003aa3 	.word	0x08003aa3
 80038f8:	080039df 	.word	0x080039df
 80038fc:	08003aa3 	.word	0x08003aa3
 8003900:	08003aa3 	.word	0x08003aa3
 8003904:	08003aa3 	.word	0x08003aa3
 8003908:	08003a21 	.word	0x08003a21
 800390c:	08003aa3 	.word	0x08003aa3
 8003910:	08003aa3 	.word	0x08003aa3
 8003914:	08003aa3 	.word	0x08003aa3
 8003918:	08003a61 	.word	0x08003a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa82 	bl	8003e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0208 	orr.w	r2, r2, #8
 8003936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	619a      	str	r2, [r3, #24]
      break;
 800395a:	e0a3      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fafc 	bl	8003f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]
      break;
 800399c:	e082      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fb6f 	bl	8004088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0208 	orr.w	r2, r2, #8
 80039b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0204 	bic.w	r2, r2, #4
 80039c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	61da      	str	r2, [r3, #28]
      break;
 80039dc:	e062      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fbe1 	bl	80041ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	61da      	str	r2, [r3, #28]
      break;
 8003a1e:	e041      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc30 	bl	800428c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0208 	orr.w	r2, r2, #8
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a5e:	e021      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fc7a 	bl	8004360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003aa0:	e000      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003aa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIM_ConfigClockSource+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e0a8      	b.n	8003c22 <HAL_TIM_ConfigClockSource+0x16a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d067      	beq.n	8003bdc <HAL_TIM_ConfigClockSource+0x124>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d80b      	bhi.n	8003b28 <HAL_TIM_ConfigClockSource+0x70>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d073      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x144>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d802      	bhi.n	8003b1e <HAL_TIM_ConfigClockSource+0x66>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d06f      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b1c:	e078      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d06c      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x144>
 8003b22:	2b30      	cmp	r3, #48	; 0x30
 8003b24:	d06a      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b26:	e073      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b28:	2b70      	cmp	r3, #112	; 0x70
 8003b2a:	d00d      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0x90>
 8003b2c:	2b70      	cmp	r3, #112	; 0x70
 8003b2e:	d804      	bhi.n	8003b3a <HAL_TIM_ConfigClockSource+0x82>
 8003b30:	2b50      	cmp	r3, #80	; 0x50
 8003b32:	d033      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0xe4>
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d041      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003b38:	e06a      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d066      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0x156>
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b44:	d017      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003b46:	e063      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f000 fe0c 	bl	8004774 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]
      break;
 8003b74:	e04c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f000 fdf5 	bl	8004774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b98:	609a      	str	r2, [r3, #8]
      break;
 8003b9a:	e039      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f000 fcb3 	bl	8004514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2150      	movs	r1, #80	; 0x50
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fdc2 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003bba:	e029      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f000 fd0f 	bl	80045ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2160      	movs	r1, #96	; 0x60
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fdb2 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003bda:	e019      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f000 fc93 	bl	8004514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2140      	movs	r1, #64	; 0x40
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fda2 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003bfa:	e009      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 fd99 	bl	800473e <TIM_ITRx_SetConfig>
        break;
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d831      	bhi.n	8003ca4 <HAL_TIM_ReadCapturedValue+0x78>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	60fb      	str	r3, [r7, #12]

      break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	60fb      	str	r3, [r7, #12]

      break;
 8003c8e:	e00a      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	60fb      	str	r3, [r7, #12]

      break;
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	60fb      	str	r3, [r7, #12]

      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ca4:	bf00      	nop
  }

  return tmpreg;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a42      	ldr	r2, [pc, #264]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3e      	ldr	r2, [pc, #248]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a31      	ldr	r2, [pc, #196]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d01b      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d017      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2d      	ldr	r2, [pc, #180]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2c      	ldr	r2, [pc, #176]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <TIM_Base_SetConfig+0x138>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a25      	ldr	r2, [pc, #148]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <TIM_Base_SetConfig+0x100>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00f      	beq.n	8003df0 <TIM_Base_SetConfig+0x100>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_Base_SetConfig+0x100>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <TIM_Base_SetConfig+0x134>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_Base_SetConfig+0x100>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <TIM_Base_SetConfig+0x138>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_Base_SetConfig+0x100>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d103      	bne.n	8003df8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	615a      	str	r2, [r3, #20]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40013400 	.word	0x40013400
 8003e1c:	40015000 	.word	0x40015000
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0201 	bic.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <TIM_OC1_SetConfig+0x11c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <TIM_OC1_SetConfig+0x88>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a2f      	ldr	r2, [pc, #188]	; (8003f4c <TIM_OC1_SetConfig+0x120>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00f      	beq.n	8003eb4 <TIM_OC1_SetConfig+0x88>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <TIM_OC1_SetConfig+0x124>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_OC1_SetConfig+0x88>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2d      	ldr	r2, [pc, #180]	; (8003f54 <TIM_OC1_SetConfig+0x128>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_OC1_SetConfig+0x88>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <TIM_OC1_SetConfig+0x12c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC1_SetConfig+0x88>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <TIM_OC1_SetConfig+0x130>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10c      	bne.n	8003ece <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0308 	bic.w	r3, r3, #8
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <TIM_OC1_SetConfig+0x11c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <TIM_OC1_SetConfig+0xd2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <TIM_OC1_SetConfig+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00f      	beq.n	8003efe <TIM_OC1_SetConfig+0xd2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <TIM_OC1_SetConfig+0x124>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_OC1_SetConfig+0xd2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <TIM_OC1_SetConfig+0x128>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <TIM_OC1_SetConfig+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <TIM_OC1_SetConfig+0x12c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_OC1_SetConfig+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <TIM_OC1_SetConfig+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d111      	bne.n	8003f22 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	621a      	str	r2, [r3, #32]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	40015000 	.word	0x40015000

08003f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0210 	bic.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0320 	bic.w	r3, r3, #32
 8003fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <TIM_OC2_SetConfig+0x110>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x74>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a2b      	ldr	r2, [pc, #172]	; (8004074 <TIM_OC2_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x74>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <TIM_OC2_SetConfig+0x118>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10d      	bne.n	8003ff0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <TIM_OC2_SetConfig+0x110>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <TIM_OC2_SetConfig+0xc0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <TIM_OC2_SetConfig+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00f      	beq.n	8004020 <TIM_OC2_SetConfig+0xc0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1e      	ldr	r2, [pc, #120]	; (800407c <TIM_OC2_SetConfig+0x11c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00b      	beq.n	8004020 <TIM_OC2_SetConfig+0xc0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <TIM_OC2_SetConfig+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_OC2_SetConfig+0xc0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <TIM_OC2_SetConfig+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC2_SetConfig+0xc0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a17      	ldr	r2, [pc, #92]	; (8004078 <TIM_OC2_SetConfig+0x118>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d113      	bne.n	8004048 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004026:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40015000 	.word	0x40015000
 800407c:	40014000 	.word	0x40014000
 8004080:	40014400 	.word	0x40014400
 8004084:	40014800 	.word	0x40014800

08004088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2b      	ldr	r2, [pc, #172]	; (8004194 <TIM_OC3_SetConfig+0x10c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_OC3_SetConfig+0x72>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <TIM_OC3_SetConfig+0x110>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_OC3_SetConfig+0x72>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <TIM_OC3_SetConfig+0x114>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10d      	bne.n	8004116 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004114:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <TIM_OC3_SetConfig+0x10c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <TIM_OC3_SetConfig+0xbe>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <TIM_OC3_SetConfig+0x110>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_OC3_SetConfig+0xbe>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <TIM_OC3_SetConfig+0x118>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_OC3_SetConfig+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <TIM_OC3_SetConfig+0x11c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_OC3_SetConfig+0xbe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <TIM_OC3_SetConfig+0x120>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0xbe>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a16      	ldr	r2, [pc, #88]	; (800419c <TIM_OC3_SetConfig+0x114>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40015000 	.word	0x40015000
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800

080041ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <TIM_OC4_SetConfig+0xc8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <TIM_OC4_SetConfig+0x8c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <TIM_OC4_SetConfig+0xcc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00f      	beq.n	8004238 <TIM_OC4_SetConfig+0x8c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <TIM_OC4_SetConfig+0xd0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_OC4_SetConfig+0x8c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a17      	ldr	r2, [pc, #92]	; (8004280 <TIM_OC4_SetConfig+0xd4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_OC4_SetConfig+0x8c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <TIM_OC4_SetConfig+0xd8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC4_SetConfig+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a15      	ldr	r2, [pc, #84]	; (8004288 <TIM_OC4_SetConfig+0xdc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800
 8004288:	40015000 	.word	0x40015000

0800428c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <TIM_OC5_SetConfig+0xbc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <TIM_OC5_SetConfig+0x82>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <TIM_OC5_SetConfig+0xc0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <TIM_OC5_SetConfig+0x82>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a17      	ldr	r2, [pc, #92]	; (8004350 <TIM_OC5_SetConfig+0xc4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <TIM_OC5_SetConfig+0x82>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <TIM_OC5_SetConfig+0xc8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_OC5_SetConfig+0x82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <TIM_OC5_SetConfig+0xcc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_OC5_SetConfig+0x82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <TIM_OC5_SetConfig+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d109      	bne.n	8004322 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40013400 	.word	0x40013400
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800
 800435c:	40015000 	.word	0x40015000

08004360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	051b      	lsls	r3, r3, #20
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <TIM_OC6_SetConfig+0xc0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <TIM_OC6_SetConfig+0x84>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <TIM_OC6_SetConfig+0xc4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <TIM_OC6_SetConfig+0x84>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <TIM_OC6_SetConfig+0xc8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_OC6_SetConfig+0x84>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <TIM_OC6_SetConfig+0xcc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_OC6_SetConfig+0x84>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a16      	ldr	r2, [pc, #88]	; (8004430 <TIM_OC6_SetConfig+0xd0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC6_SetConfig+0x84>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <TIM_OC6_SetConfig+0xd4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40013400 	.word	0x40013400
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800
 8004434:	40015000 	.word	0x40015000

08004438 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a26      	ldr	r2, [pc, #152]	; (80044fc <TIM_TI1_SetConfig+0xc4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d017      	beq.n	8004496 <TIM_TI1_SetConfig+0x5e>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446c:	d013      	beq.n	8004496 <TIM_TI1_SetConfig+0x5e>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <TIM_TI1_SetConfig+0xc8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00f      	beq.n	8004496 <TIM_TI1_SetConfig+0x5e>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <TIM_TI1_SetConfig+0xcc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_TI1_SetConfig+0x5e>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a21      	ldr	r2, [pc, #132]	; (8004508 <TIM_TI1_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <TIM_TI1_SetConfig+0x5e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <TIM_TI1_SetConfig+0xd4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_TI1_SetConfig+0x5e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <TIM_TI1_SetConfig+0xd8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <TIM_TI1_SetConfig+0x62>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <TIM_TI1_SetConfig+0x64>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e003      	b.n	80044ba <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f023 030a 	bic.w	r3, r3, #10
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f003 030a 	and.w	r3, r3, #10
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40013400 	.word	0x40013400
 800450c:	40014000 	.word	0x40014000
 8004510:	40015000 	.word	0x40015000

08004514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 030a 	bic.w	r3, r3, #10
 8004550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0210 	bic.w	r2, r3, #16
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f023 0210 	bic.w	r2, r3, #16
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	031b      	lsls	r3, r3, #12
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	621a      	str	r2, [r3, #32]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 0303 	bic.w	r3, r3, #3
 8004678:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	b2db      	uxtb	r3, r3
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800469c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004702:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	b29b      	uxth	r3, r3
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	031b      	lsls	r3, r3, #12
 800471c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	431a      	orrs	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2201      	movs	r2, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e06d      	b.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a30      	ldr	r2, [pc, #192]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2f      	ldr	r2, [pc, #188]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2d      	ldr	r2, [pc, #180]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800485c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d01d      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004894:	d018      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d10c      	bne.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40013400 	.word	0x40013400
 8004908:	40015000 	.word	0x40015000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40014000 	.word	0x40014000

08004918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e040      	b.n	80049e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc f9d0 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8c0 	bl	8004b18 <UART_SetConfig>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e022      	b.n	80049e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa88 	bl	8004ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fb0f 	bl	8005004 <UART_CheckIdleState>
 80049e6:	4603      	mov	r3, r0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	f040 8082 	bne.w	8004b0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_Transmit+0x26>
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07a      	b.n	8004b10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_UART_Transmit+0x38>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e073      	b.n	8004b10 <HAL_UART_Transmit+0x120>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2221      	movs	r2, #33	; 0x21
 8004a3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a3e:	f7fc faa3 	bl	8000f88 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d108      	bne.n	8004a70 <HAL_UART_Transmit+0x80>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a80:	e02d      	b.n	8004ade <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fb02 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e039      	b.n	8004b10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e008      	b.n	8004acc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1cb      	bne.n	8004a82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2140      	movs	r1, #64	; 0x40
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 face 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e005      	b.n	8004b10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
  }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4baa      	ldr	r3, [pc, #680]	; (8004dec <UART_SetConfig+0x2d4>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a98      	ldr	r2, [pc, #608]	; (8004df0 <UART_SetConfig+0x2d8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d121      	bne.n	8004bd8 <UART_SetConfig+0xc0>
 8004b94:	4b97      	ldr	r3, [pc, #604]	; (8004df4 <UART_SetConfig+0x2dc>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d817      	bhi.n	8004bd0 <UART_SetConfig+0xb8>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x90>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc5 	.word	0x08004bc5
 8004bb0:	08004bcb 	.word	0x08004bcb
 8004bb4:	08004bbf 	.word	0x08004bbf
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e0b2      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	77fb      	strb	r3, [r7, #31]
 8004bc2:	e0af      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e0ac      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e0a9      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	bf00      	nop
 8004bd6:	e0a5      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a86      	ldr	r2, [pc, #536]	; (8004df8 <UART_SetConfig+0x2e0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d123      	bne.n	8004c2a <UART_SetConfig+0x112>
 8004be2:	4b84      	ldr	r3, [pc, #528]	; (8004df4 <UART_SetConfig+0x2dc>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bee:	d012      	beq.n	8004c16 <UART_SetConfig+0xfe>
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf4:	d802      	bhi.n	8004bfc <UART_SetConfig+0xe4>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <UART_SetConfig+0xf2>
 8004bfa:	e012      	b.n	8004c22 <UART_SetConfig+0x10a>
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c00:	d00c      	beq.n	8004c1c <UART_SetConfig+0x104>
 8004c02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c06:	d003      	beq.n	8004c10 <UART_SetConfig+0xf8>
 8004c08:	e00b      	b.n	8004c22 <UART_SetConfig+0x10a>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e089      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e086      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c16:	2304      	movs	r3, #4
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e083      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e080      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c22:	2310      	movs	r3, #16
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	bf00      	nop
 8004c28:	e07c      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a73      	ldr	r2, [pc, #460]	; (8004dfc <UART_SetConfig+0x2e4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d123      	bne.n	8004c7c <UART_SetConfig+0x164>
 8004c34:	4b6f      	ldr	r3, [pc, #444]	; (8004df4 <UART_SetConfig+0x2dc>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c40:	d012      	beq.n	8004c68 <UART_SetConfig+0x150>
 8004c42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c46:	d802      	bhi.n	8004c4e <UART_SetConfig+0x136>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <UART_SetConfig+0x144>
 8004c4c:	e012      	b.n	8004c74 <UART_SetConfig+0x15c>
 8004c4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c52:	d00c      	beq.n	8004c6e <UART_SetConfig+0x156>
 8004c54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c58:	d003      	beq.n	8004c62 <UART_SetConfig+0x14a>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x15c>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e060      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e05d      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e05a      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e057      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	bf00      	nop
 8004c7a:	e053      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a5f      	ldr	r2, [pc, #380]	; (8004e00 <UART_SetConfig+0x2e8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d123      	bne.n	8004cce <UART_SetConfig+0x1b6>
 8004c86:	4b5b      	ldr	r3, [pc, #364]	; (8004df4 <UART_SetConfig+0x2dc>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c92:	d012      	beq.n	8004cba <UART_SetConfig+0x1a2>
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c98:	d802      	bhi.n	8004ca0 <UART_SetConfig+0x188>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <UART_SetConfig+0x196>
 8004c9e:	e012      	b.n	8004cc6 <UART_SetConfig+0x1ae>
 8004ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca4:	d00c      	beq.n	8004cc0 <UART_SetConfig+0x1a8>
 8004ca6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004caa:	d003      	beq.n	8004cb4 <UART_SetConfig+0x19c>
 8004cac:	e00b      	b.n	8004cc6 <UART_SetConfig+0x1ae>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e037      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e034      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004cba:	2304      	movs	r3, #4
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e031      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e02e      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004cc6:	2310      	movs	r3, #16
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	bf00      	nop
 8004ccc:	e02a      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a4c      	ldr	r2, [pc, #304]	; (8004e04 <UART_SetConfig+0x2ec>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d123      	bne.n	8004d20 <UART_SetConfig+0x208>
 8004cd8:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <UART_SetConfig+0x2dc>)
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce4:	d012      	beq.n	8004d0c <UART_SetConfig+0x1f4>
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cea:	d802      	bhi.n	8004cf2 <UART_SetConfig+0x1da>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <UART_SetConfig+0x1e8>
 8004cf0:	e012      	b.n	8004d18 <UART_SetConfig+0x200>
 8004cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf6:	d00c      	beq.n	8004d12 <UART_SetConfig+0x1fa>
 8004cf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cfc:	d003      	beq.n	8004d06 <UART_SetConfig+0x1ee>
 8004cfe:	e00b      	b.n	8004d18 <UART_SetConfig+0x200>
 8004d00:	2300      	movs	r3, #0
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e00e      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004d06:	2302      	movs	r3, #2
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e008      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004d12:	2308      	movs	r3, #8
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e005      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	bf00      	nop
 8004d1e:	e001      	b.n	8004d24 <UART_SetConfig+0x20c>
 8004d20:	2310      	movs	r3, #16
 8004d22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d16e      	bne.n	8004e0c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d828      	bhi.n	8004d86 <UART_SetConfig+0x26e>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x224>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	08004d87 	.word	0x08004d87
 8004d4c:	08004d77 	.word	0x08004d77
 8004d50:	08004d87 	.word	0x08004d87
 8004d54:	08004d87 	.word	0x08004d87
 8004d58:	08004d87 	.word	0x08004d87
 8004d5c:	08004d7f 	.word	0x08004d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d60:	f7fd fcdc 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004d64:	61b8      	str	r0, [r7, #24]
        break;
 8004d66:	e013      	b.n	8004d90 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fd fcfa 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8004d6c:	61b8      	str	r0, [r7, #24]
        break;
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e00c      	b.n	8004d90 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d76:	f7fd fc5b 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 8004d7a:	61b8      	str	r0, [r7, #24]
        break;
 8004d7c:	e008      	b.n	8004d90 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	61bb      	str	r3, [r7, #24]
        break;
 8004d84:	e004      	b.n	8004d90 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8086 	beq.w	8004ea4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	005a      	lsls	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	441a      	add	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d916      	bls.n	8004de4 <UART_SetConfig+0x2cc>
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d212      	bcs.n	8004de4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f023 030f 	bic.w	r3, r3, #15
 8004dc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	89fa      	ldrh	r2, [r7, #14]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	e05f      	b.n	8004ea4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	77bb      	strb	r3, [r7, #30]
 8004de8:	e05c      	b.n	8004ea4 <UART_SetConfig+0x38c>
 8004dea:	bf00      	nop
 8004dec:	efff69f3 	.word	0xefff69f3
 8004df0:	40013800 	.word	0x40013800
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	40004800 	.word	0x40004800
 8004e00:	40004c00 	.word	0x40004c00
 8004e04:	40005000 	.word	0x40005000
 8004e08:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d827      	bhi.n	8004e62 <UART_SetConfig+0x34a>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x300>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e53 	.word	0x08004e53
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e5b 	.word	0x08004e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fd fc6e 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004e40:	61b8      	str	r0, [r7, #24]
        break;
 8004e42:	e013      	b.n	8004e6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fd fc8c 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8004e48:	61b8      	str	r0, [r7, #24]
        break;
 8004e4a:	e00f      	b.n	8004e6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <UART_SetConfig+0x3a4>)
 8004e4e:	61bb      	str	r3, [r7, #24]
        break;
 8004e50:	e00c      	b.n	8004e6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e52:	f7fd fbed 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 8004e56:	61b8      	str	r0, [r7, #24]
        break;
 8004e58:	e008      	b.n	8004e6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5e:	61bb      	str	r3, [r7, #24]
        break;
 8004e60:	e004      	b.n	8004e6c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	77bb      	strb	r3, [r7, #30]
        break;
 8004e6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085a      	lsrs	r2, r3, #1
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d908      	bls.n	8004ea0 <UART_SetConfig+0x388>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d204      	bcs.n	8004ea0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e001      	b.n	8004ea4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004eb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fbe:	d10a      	bne.n	8004fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005014:	f7fb ffb8 	bl	8000f88 <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d10e      	bne.n	8005046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f82d 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e023      	b.n	800508e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d10e      	bne.n	8005072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f817 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e00d      	b.n	800508e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	e05e      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d05a      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fb ff6a 	bl	8000f88 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11b      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e043      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02c      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511a:	d124      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005124:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005134:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00f      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d091      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	4603      	mov	r3, r0
 8005196:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800519c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a0:	2b84      	cmp	r3, #132	; 0x84
 80051a2:	d005      	beq.n	80051b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	3303      	adds	r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c4:	f3ef 8305 	mrs	r3, IPSR
 80051c8:	607b      	str	r3, [r7, #4]
  return(result);
 80051ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051e6:	f001 fd25 	bl	8006c34 <vTaskStartScheduler>
  
  return osOK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af04      	add	r7, sp, #16
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <osThreadCreate+0x54>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01c      	beq.n	8005244 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685c      	ldr	r4, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691e      	ldr	r6, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ffb6 	bl	800518e <makeFreeRtosPriority>
 8005222:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800522c:	9202      	str	r2, [sp, #8]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	9100      	str	r1, [sp, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	4632      	mov	r2, r6
 8005236:	4629      	mov	r1, r5
 8005238:	4620      	mov	r0, r4
 800523a:	f001 fb40 	bl	80068be <xTaskCreateStatic>
 800523e:	4603      	mov	r3, r0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e01c      	b.n	800527e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685c      	ldr	r4, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005250:	b29e      	uxth	r6, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff98 	bl	800518e <makeFreeRtosPriority>
 800525e:	4602      	mov	r2, r0
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	9200      	str	r2, [sp, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4632      	mov	r2, r6
 800526c:	4629      	mov	r1, r5
 800526e:	4620      	mov	r0, r4
 8005270:	f001 fb7e 	bl	8006970 <xTaskCreate>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	e000      	b.n	8005280 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005288 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <osDelay+0x16>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	e000      	b.n	80052a0 <osDelay+0x18>
 800529e:	2301      	movs	r3, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fc93 	bl	8006bcc <vTaskDelay>
  
  return osOK;
 80052a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4619      	mov	r1, r3
 80052c6:	2001      	movs	r0, #1
 80052c8:	f000 fd3c 	bl	8005d44 <xQueueCreateMutexStatic>
 80052cc:	4603      	mov	r3, r0
 80052ce:	e003      	b.n	80052d8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80052d0:	2001      	movs	r0, #1
 80052d2:	f000 fd1f 	bl	8005d14 <xQueueCreateMutex>
 80052d6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d010      	beq.n	8005314 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10b      	bne.n	8005310 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	2303      	movs	r3, #3
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	2001      	movs	r0, #1
 8005308:	f000 fc1c 	bl	8005b44 <xQueueGenericCreateStatic>
 800530c:	4603      	mov	r3, r0
 800530e:	e016      	b.n	800533e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	e014      	b.n	800533e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d110      	bne.n	800533c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800531a:	2203      	movs	r2, #3
 800531c:	2100      	movs	r1, #0
 800531e:	2001      	movs	r0, #1
 8005320:	f000 fc82 	bl	8005c28 <xQueueGenericCreate>
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <osSemaphoreCreate+0x58>
 800532c:	2300      	movs	r3, #0
 800532e:	2200      	movs	r2, #0
 8005330:	2100      	movs	r1, #0
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fd22 	bl	8005d7c <xQueueGenericSend>
      return sema;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	e000      	b.n	800533e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800533c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	e03a      	b.n	80053d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d103      	bne.n	8005374 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800536c:	f04f 33ff 	mov.w	r3, #4294967295
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e009      	b.n	8005388 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <osSemaphoreWait+0x40>
      ticks = 1;
 8005384:	2301      	movs	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005388:	f7ff ff19 	bl	80051be <inHandlerMode>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	461a      	mov	r2, r3
 8005398:	2100      	movs	r1, #0
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 f8ea 	bl	8006574 <xQueueReceiveFromISR>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d001      	beq.n	80053aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80053a6:	23ff      	movs	r3, #255	; 0xff
 80053a8:	e015      	b.n	80053d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <osSemaphoreWait+0x8c>
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <osSemaphoreWait+0x98>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	e008      	b.n	80053d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 ffcd 	bl	8006364 <xQueueSemaphoreTake>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d001      	beq.n	80053d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80053d0:	23ff      	movs	r3, #255	; 0xff
 80053d2:	e000      	b.n	80053d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80053f4:	f7ff fee3 	bl	80051be <inHandlerMode>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fe47 	bl	8006098 <xQueueGiveFromISR>
 800540a:	4603      	mov	r3, r0
 800540c:	2b01      	cmp	r3, #1
 800540e:	d001      	beq.n	8005414 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005410:	23ff      	movs	r3, #255	; 0xff
 8005412:	e017      	b.n	8005444 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <osSemaphoreRelease+0x5e>
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <osSemaphoreRelease+0x68>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	e00a      	b.n	8005442 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800542c:	2300      	movs	r3, #0
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fca2 	bl	8005d7c <xQueueGenericSend>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800543e:	23ff      	movs	r3, #255	; 0xff
 8005440:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	3303      	adds	r3, #3
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005464:	2014      	movs	r0, #20
 8005466:	f002 fc63 	bl	8007d30 <pvPortMalloc>
 800546a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d046      	beq.n	8005500 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2200      	movs	r2, #0
 8005484:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f002 fc50 	bl	8007d30 <pvPortMalloc>
 8005490:	4602      	mov	r2, r0
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02b      	beq.n	80054f6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 fc41 	bl	8007d30 <pvPortMalloc>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d011      	beq.n	80054e0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e008      	b.n	80054d4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4413      	add	r3, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3301      	adds	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d3f1      	bcc.n	80054c2 <osPoolCreate+0x72>
 80054de:	e00f      	b.n	8005500 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f002 fce5 	bl	8007eb4 <vPortFree>
        vPortFree(thePool);
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f002 fce2 	bl	8007eb4 <vPortFree>
        thePool = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e004      	b.n	8005500 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80054f6:	6978      	ldr	r0, [r7, #20]
 80054f8:	f002 fcdc 	bl	8007eb4 <vPortFree>
      thePool = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8005500:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b08a      	sub	sp, #40	; 0x28
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800551a:	f7ff fe50 	bl	80051be <inHandlerMode>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005524:	f3ef 8211 	mrs	r2, BASEPRI
 8005528:	f04f 0320 	mov.w	r3, #32
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	617a      	str	r2, [r7, #20]
 800553a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800553c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	e001      	b.n	8005546 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8005542:	f002 fadb 	bl	8007afc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e029      	b.n	80055a0 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6892      	ldr	r2, [r2, #8]
 8005558:	fbb3 f1f2 	udiv	r1, r3, r2
 800555c:	fb02 f201 	mul.w	r2, r2, r1
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d113      	bne.n	800559a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	4413      	add	r3, r2
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	440b      	add	r3, r1
 8005590:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	611a      	str	r2, [r3, #16]
      break;
 8005598:	e007      	b.n	80055aa <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3d0      	bcc.n	800554c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80055aa:	f7ff fe08 	bl	80051be <inHandlerMode>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	e001      	b.n	80055c4 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80055c0:	f002 faca 	bl	8007b58 <vPortExitCritical>
  }
  
  return p;
 80055c4:	6a3b      	ldr	r3, [r7, #32]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3728      	adds	r7, #40	; 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <osPoolFree+0x14>
    return osErrorParameter;
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	e030      	b.n	8005644 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <osPoolFree+0x1e>
    return osErrorParameter;
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	e02b      	b.n	8005644 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d201      	bcs.n	80055fa <osPoolFree+0x2c>
    return osErrorParameter;
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	e024      	b.n	8005644 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	fbb3 f1f2 	udiv	r1, r3, r2
 800560e:	fb02 f201 	mul.w	r2, r2, r1
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <osPoolFree+0x4e>
    return osErrorParameter;
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	e013      	b.n	8005644 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	429a      	cmp	r2, r3
 8005630:	d301      	bcc.n	8005636 <osPoolFree+0x68>
    return osErrorParameter;
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	e006      	b.n	8005644 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b085      	sub	sp, #20
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d012      	beq.n	8005688 <osMessageCreate+0x38>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00e      	beq.n	8005688 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68dc      	ldr	r4, [r3, #12]
 800567a:	2300      	movs	r3, #0
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4623      	mov	r3, r4
 8005680:	f000 fa60 	bl	8005b44 <xQueueGenericCreateStatic>
 8005684:	4603      	mov	r3, r0
 8005686:	e008      	b.n	800569a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	4619      	mov	r1, r3
 8005694:	f000 fac8 	bl	8005c28 <xQueueGenericCreate>
 8005698:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd90      	pop	{r4, r7, pc}

080056a2 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80056a2:	b590      	push	{r4, r7, lr}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689c      	ldr	r4, [r3, #8]
 80056c0:	200c      	movs	r0, #12
 80056c2:	f002 fb35 	bl	8007d30 <pvPortMalloc>
 80056c6:	4603      	mov	r3, r0
 80056c8:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <osMailCreate+0x36>
    return NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e038      	b.n	800574a <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	681c      	ldr	r4, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2104      	movs	r1, #4
 80056f0:	f000 fa9a 	bl	8005c28 <xQueueGenericCreate>
 80056f4:	4603      	mov	r3, r0
 80056f6:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f002 fbd2 	bl	8007eb4 <vPortFree>
    return NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	e01a      	b.n	800574a <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	681c      	ldr	r4, [r3, #0]
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fe96 	bl	8005450 <osPoolCreate>
 8005724:	4603      	mov	r3, r0
 8005726:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d107      	bne.n	8005744 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f002 fbba 	bl	8007eb4 <vPortFree>
    return NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	e002      	b.n	800574a <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800574a:	4618      	mov	r0, r3
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd90      	pop	{r4, r7, pc}

08005752 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <osMailAlloc+0x14>
    return NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	e006      	b.n	8005774 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fecd 	bl	800550a <osPoolAlloc>
 8005770:	60f8      	str	r0, [r7, #12]
  
  return p;
 8005772:	68fb      	ldr	r3, [r7, #12]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <osMailPut+0x14>
    return osErrorParameter;
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	e02c      	b.n	80057ea <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005794:	f7ff fd13 	bl	80051be <inHandlerMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6858      	ldr	r0, [r3, #4]
 80057a2:	f107 020c 	add.w	r2, r7, #12
 80057a6:	4639      	mov	r1, r7
 80057a8:	2300      	movs	r3, #0
 80057aa:	f000 fbe1 	bl	8005f70 <xQueueGenericSendFromISR>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d001      	beq.n	80057b8 <osMailPut+0x3c>
      return osErrorOS;
 80057b4:	23ff      	movs	r3, #255	; 0xff
 80057b6:	e018      	b.n	80057ea <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d014      	beq.n	80057e8 <osMailPut+0x6c>
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <osMailPut+0x78>)
 80057c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	e00b      	b.n	80057e8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6858      	ldr	r0, [r3, #4]
 80057d4:	4639      	mov	r1, r7
 80057d6:	2300      	movs	r3, #0
 80057d8:	2200      	movs	r2, #0
 80057da:	f000 facf 	bl	8005d7c <xQueueGenericSend>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <osMailPut+0x6c>
      return osErrorOS;
 80057e4:	23ff      	movs	r3, #255	; 0xff
 80057e6:	e000      	b.n	80057ea <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b08b      	sub	sp, #44	; 0x2c
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	617b      	str	r3, [r7, #20]
    return event;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	461c      	mov	r4, r3
 8005816:	f107 0314 	add.w	r3, r7, #20
 800581a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800581e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005822:	e056      	b.n	80058d2 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d103      	bne.n	800583c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005834:	f04f 33ff 	mov.w	r3, #4294967295
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	e009      	b.n	8005850 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d006      	beq.n	8005850 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <osMailGet+0x58>
      ticks = 1;
 800584c:	2301      	movs	r3, #1
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005850:	f7ff fcb5 	bl	80051be <inHandlerMode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01d      	beq.n	8005896 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6858      	ldr	r0, [r3, #4]
 800585e:	f107 0220 	add.w	r2, r7, #32
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	3304      	adds	r3, #4
 8005868:	4619      	mov	r1, r3
 800586a:	f000 fe83 	bl	8006574 <xQueueReceiveFromISR>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d102      	bne.n	800587a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005874:	2320      	movs	r3, #32
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e001      	b.n	800587e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <osMailGet+0xca>
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <osMailGet+0xe4>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	e015      	b.n	80058c2 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6858      	ldr	r0, [r3, #4]
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	3304      	adds	r3, #4
 80058a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a2:	4619      	mov	r1, r3
 80058a4:	f000 fc82 	bl	80061ac <xQueueReceive>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d102      	bne.n	80058b4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80058ae:	2320      	movs	r3, #32
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e006      	b.n	80058c2 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <osMailGet+0xc6>
 80058ba:	2300      	movs	r3, #0
 80058bc:	e000      	b.n	80058c0 <osMailGet+0xc8>
 80058be:	2340      	movs	r3, #64	; 0x40
 80058c0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	461c      	mov	r4, r3
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	372c      	adds	r7, #44	; 0x2c
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <osMailFree+0x14>
    return osErrorParameter;
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	e006      	b.n	8005902 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fe67 	bl	80055ce <osPoolFree>
 8005900:	4603      	mov	r3, r0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f103 0208 	add.w	r2, r3, #8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f103 0208 	add.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f103 0208 	add.w	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d103      	bne.n	80059cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e00c      	b.n	80059e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3308      	adds	r3, #8
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e002      	b.n	80059da <vListInsert+0x2e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d2f6      	bcs.n	80059d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6852      	ldr	r2, [r2, #4]
 8005a3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d103      	bne.n	8005a52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <xQueueGenericReset+0x28>
	__asm volatile
 8005a88:	f04f 0320 	mov.w	r3, #32
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	e7fe      	b.n	8005a9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005a9c:	f002 f82e 	bl	8007afc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	68f9      	ldr	r1, [r7, #12]
 8005aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	3b01      	subs	r3, #1
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	22ff      	movs	r2, #255	; 0xff
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d114      	bne.n	8005b1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01a      	beq.n	8005b30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3310      	adds	r3, #16
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fada 	bl	80070b8 <xTaskRemoveFromEventList>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d012      	beq.n	8005b30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <xQueueGenericReset+0xcc>)
 8005b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	e009      	b.n	8005b30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3310      	adds	r3, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fef2 	bl	800590a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3324      	adds	r3, #36	; 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff feed 	bl	800590a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b30:	f002 f812 	bl	8007b58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b34:	2301      	movs	r3, #1
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08e      	sub	sp, #56	; 0x38
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <xQueueGenericCreateStatic+0x28>
 8005b58:	f04f 0320 	mov.w	r3, #32
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6a:	e7fe      	b.n	8005b6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <xQueueGenericCreateStatic+0x42>
 8005b72:	f04f 0320 	mov.w	r3, #32
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	e7fe      	b.n	8005b84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <xQueueGenericCreateStatic+0x4e>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <xQueueGenericCreateStatic+0x52>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericCreateStatic+0x54>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <xQueueGenericCreateStatic+0x6c>
 8005b9c:	f04f 0320 	mov.w	r3, #32
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	623b      	str	r3, [r7, #32]
 8005bae:	e7fe      	b.n	8005bae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <xQueueGenericCreateStatic+0x78>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <xQueueGenericCreateStatic+0x7c>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <xQueueGenericCreateStatic+0x7e>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <xQueueGenericCreateStatic+0x96>
 8005bc6:	f04f 0320 	mov.w	r3, #32
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bda:	2348      	movs	r3, #72	; 0x48
 8005bdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b48      	cmp	r3, #72	; 0x48
 8005be2:	d009      	beq.n	8005bf8 <xQueueGenericCreateStatic+0xb4>
 8005be4:	f04f 0320 	mov.w	r3, #32
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00d      	beq.n	8005c1e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4613      	mov	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f842 	bl	8005ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3730      	adds	r7, #48	; 0x30
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <xQueueGenericCreate+0x28>
 8005c3c:	f04f 0320 	mov.w	r3, #32
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e7fe      	b.n	8005c4e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e004      	b.n	8005c66 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3348      	adds	r3, #72	; 0x48
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f002 f860 	bl	8007d30 <pvPortMalloc>
 8005c70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00f      	beq.n	8005c98 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	3348      	adds	r3, #72	; 0x48
 8005c7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c86:	79fa      	ldrb	r2, [r7, #7]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f805 	bl	8005ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c98:	69bb      	ldr	r3, [r7, #24]
	}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e002      	b.n	8005cc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	69b8      	ldr	r0, [r7, #24]
 8005cd4:	f7ff fece 	bl	8005a74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d00:	2300      	movs	r3, #0
 8005d02:	2200      	movs	r2, #0
 8005d04:	2100      	movs	r1, #0
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f838 	bl	8005d7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	6978      	ldr	r0, [r7, #20]
 8005d2e:	f7ff ff7b 	bl	8005c28 <xQueueGenericCreate>
 8005d32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ffd3 	bl	8005ce0 <prvInitialiseMutex>

		return pxNewQueue;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	6939      	ldr	r1, [r7, #16]
 8005d62:	6978      	ldr	r0, [r7, #20]
 8005d64:	f7ff feee 	bl	8005b44 <xQueueGenericCreateStatic>
 8005d68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff ffb8 	bl	8005ce0 <prvInitialiseMutex>

		return pxNewQueue;
 8005d70:	68fb      	ldr	r3, [r7, #12]
	}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	; 0x38
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <xQueueGenericSend+0x30>
 8005d98:	f04f 0320 	mov.w	r3, #32
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005daa:	e7fe      	b.n	8005daa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <xQueueGenericSend+0x3e>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <xQueueGenericSend+0x42>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueGenericSend+0x44>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <xQueueGenericSend+0x5c>
 8005dc4:	f04f 0320 	mov.w	r3, #32
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	e7fe      	b.n	8005dd6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d103      	bne.n	8005de6 <xQueueGenericSend+0x6a>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <xQueueGenericSend+0x6e>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <xQueueGenericSend+0x70>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <xQueueGenericSend+0x88>
 8005df0:	f04f 0320 	mov.w	r3, #32
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	e7fe      	b.n	8005e02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e04:	f001 fb14 	bl	8007430 <xTaskGetSchedulerState>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <xQueueGenericSend+0x98>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <xQueueGenericSend+0x9c>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <xQueueGenericSend+0x9e>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <xQueueGenericSend+0xb6>
 8005e1e:	f04f 0320 	mov.w	r3, #32
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e7fe      	b.n	8005e30 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e32:	f001 fe63 	bl	8007afc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <xQueueGenericSend+0xcc>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d129      	bne.n	8005e9c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e4e:	f000 fc26 	bl	800669e <prvCopyDataToQueue>
 8005e52:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d010      	beq.n	8005e7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	3324      	adds	r3, #36	; 0x24
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f929 	bl	80070b8 <xTaskRemoveFromEventList>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e6c:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <xQueueGenericSend+0x1f0>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	e00a      	b.n	8005e94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e84:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <xQueueGenericSend+0x1f0>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e94:	f001 fe60 	bl	8007b58 <vPortExitCritical>
				return pdPASS;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e063      	b.n	8005f64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ea2:	f001 fe59 	bl	8007b58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e05c      	b.n	8005f64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d106      	bne.n	8005ebe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 f961 	bl	800717c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ebe:	f001 fe4b 	bl	8007b58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ec2:	f000 ff15 	bl	8006cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ec6:	f001 fe19 	bl	8007afc <vPortEnterCritical>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d103      	bne.n	8005ee0 <xQueueGenericSend+0x164>
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d103      	bne.n	8005ef6 <xQueueGenericSend+0x17a>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef6:	f001 fe2f 	bl	8007b58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005efa:	1d3a      	adds	r2, r7, #4
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 f950 	bl	80071a8 <xTaskCheckForTimeOut>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d124      	bne.n	8005f58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f10:	f000 fcbd 	bl	800688e <prvIsQueueFull>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d018      	beq.n	8005f4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 f8a4 	bl	8007070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2a:	f000 fc48 	bl	80067be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f2e:	f000 feed 	bl	8006d0c <xTaskResumeAll>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f47f af7c 	bne.w	8005e32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <xQueueGenericSend+0x1f0>)
 8005f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	e772      	b.n	8005e32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4e:	f000 fc36 	bl	80067be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f52:	f000 fedb 	bl	8006d0c <xTaskResumeAll>
 8005f56:	e76c      	b.n	8005e32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5a:	f000 fc30 	bl	80067be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f5e:	f000 fed5 	bl	8006d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f62:	2300      	movs	r3, #0
		}
	}
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3738      	adds	r7, #56	; 0x38
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <xQueueGenericSendFromISR+0x2c>
 8005f88:	f04f 0320 	mov.w	r3, #32
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9a:	e7fe      	b.n	8005f9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <xQueueGenericSendFromISR+0x3a>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <xQueueGenericSendFromISR+0x3e>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <xQueueGenericSendFromISR+0x40>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <xQueueGenericSendFromISR+0x58>
 8005fb4:	f04f 0320 	mov.w	r3, #32
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d103      	bne.n	8005fd6 <xQueueGenericSendFromISR+0x66>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <xQueueGenericSendFromISR+0x6a>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueGenericSendFromISR+0x6c>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <xQueueGenericSendFromISR+0x84>
 8005fe0:	f04f 0320 	mov.w	r3, #32
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e7fe      	b.n	8005ff2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ff4:	f001 fe5e 	bl	8007cb4 <vPortValidateInterruptPriority>
	__asm volatile
 8005ff8:	f3ef 8211 	mrs	r2, BASEPRI
 8005ffc:	f04f 0320 	mov.w	r3, #32
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	61ba      	str	r2, [r7, #24]
 800600e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006010:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <xQueueGenericSendFromISR+0xb6>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d12c      	bne.n	8006080 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800602c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006036:	f000 fb32 	bl	800669e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800603a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d112      	bne.n	800606a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d016      	beq.n	800607a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	3324      	adds	r3, #36	; 0x24
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f831 	bl	80070b8 <xTaskRemoveFromEventList>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e007      	b.n	800607a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800606a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800606e:	3301      	adds	r3, #1
 8006070:	b2db      	uxtb	r3, r3
 8006072:	b25a      	sxtb	r2, r3
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800607a:	2301      	movs	r3, #1
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800607e:	e001      	b.n	8006084 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006080:	2300      	movs	r3, #0
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006090:	4618      	mov	r0, r3
 8006092:	3738      	adds	r7, #56	; 0x38
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08e      	sub	sp, #56	; 0x38
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <xQueueGiveFromISR+0x28>
	__asm volatile
 80060ac:	f04f 0320 	mov.w	r3, #32
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	623b      	str	r3, [r7, #32]
 80060be:	e7fe      	b.n	80060be <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <xQueueGiveFromISR+0x44>
 80060c8:	f04f 0320 	mov.w	r3, #32
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e7fe      	b.n	80060da <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <xQueueGiveFromISR+0x54>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <xQueueGiveFromISR+0x58>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <xQueueGiveFromISR+0x5a>
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <xQueueGiveFromISR+0x72>
 80060f6:	f04f 0320 	mov.w	r3, #32
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e7fe      	b.n	8006108 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800610a:	f001 fdd3 	bl	8007cb4 <vPortValidateInterruptPriority>
	__asm volatile
 800610e:	f3ef 8211 	mrs	r2, BASEPRI
 8006112:	f04f 0320 	mov.w	r3, #32
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	617a      	str	r2, [r7, #20]
 8006124:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006126:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006136:	429a      	cmp	r2, r3
 8006138:	d22b      	bcs.n	8006192 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800614c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d112      	bne.n	800617c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	3324      	adds	r3, #36	; 0x24
 8006162:	4618      	mov	r0, r3
 8006164:	f000 ffa8 	bl	80070b8 <xTaskRemoveFromEventList>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e007      	b.n	800618c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800617c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006180:	3301      	adds	r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	b25a      	sxtb	r2, r3
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800618c:	2301      	movs	r3, #1
 800618e:	637b      	str	r3, [r7, #52]	; 0x34
 8006190:	e001      	b.n	8006196 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006192:	2300      	movs	r3, #0
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006198:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3738      	adds	r7, #56	; 0x38
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	; 0x30
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <xQueueReceive+0x2e>
	__asm volatile
 80061c6:	f04f 0320 	mov.w	r3, #32
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	e7fe      	b.n	80061d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <xQueueReceive+0x3c>
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <xQueueReceive+0x40>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <xQueueReceive+0x42>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <xQueueReceive+0x5a>
 80061f2:	f04f 0320 	mov.w	r3, #32
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e7fe      	b.n	8006204 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006206:	f001 f913 	bl	8007430 <xTaskGetSchedulerState>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <xQueueReceive+0x6a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <xQueueReceive+0x6e>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueReceive+0x70>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <xQueueReceive+0x88>
 8006220:	f04f 0320 	mov.w	r3, #32
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	e7fe      	b.n	8006232 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006234:	f001 fc62 	bl	8007afc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01f      	beq.n	8006284 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006248:	f000 fa93 	bl	8006772 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	1e5a      	subs	r2, r3, #1
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00f      	beq.n	800627c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	3310      	adds	r3, #16
 8006260:	4618      	mov	r0, r3
 8006262:	f000 ff29 	bl	80070b8 <xTaskRemoveFromEventList>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800626c:	4b3c      	ldr	r3, [pc, #240]	; (8006360 <xQueueReceive+0x1b4>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800627c:	f001 fc6c 	bl	8007b58 <vPortExitCritical>
				return pdPASS;
 8006280:	2301      	movs	r3, #1
 8006282:	e069      	b.n	8006358 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800628a:	f001 fc65 	bl	8007b58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800628e:	2300      	movs	r3, #0
 8006290:	e062      	b.n	8006358 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006298:	f107 0310 	add.w	r3, r7, #16
 800629c:	4618      	mov	r0, r3
 800629e:	f000 ff6d 	bl	800717c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062a6:	f001 fc57 	bl	8007b58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062aa:	f000 fd21 	bl	8006cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ae:	f001 fc25 	bl	8007afc <vPortEnterCritical>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d103      	bne.n	80062c8 <xQueueReceive+0x11c>
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d103      	bne.n	80062de <xQueueReceive+0x132>
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062de:	f001 fc3b 	bl	8007b58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e2:	1d3a      	adds	r2, r7, #4
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 ff5c 	bl	80071a8 <xTaskCheckForTimeOut>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d123      	bne.n	800633e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f8:	f000 fab3 	bl	8006862 <prvIsQueueEmpty>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d017      	beq.n	8006332 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	3324      	adds	r3, #36	; 0x24
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f000 feb0 	bl	8007070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006312:	f000 fa54 	bl	80067be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006316:	f000 fcf9 	bl	8006d0c <xTaskResumeAll>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d189      	bne.n	8006234 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <xQueueReceive+0x1b4>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	e780      	b.n	8006234 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006334:	f000 fa43 	bl	80067be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006338:	f000 fce8 	bl	8006d0c <xTaskResumeAll>
 800633c:	e77a      	b.n	8006234 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800633e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006340:	f000 fa3d 	bl	80067be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006344:	f000 fce2 	bl	8006d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634a:	f000 fa8a 	bl	8006862 <prvIsQueueEmpty>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	f43f af6f 	beq.w	8006234 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006356:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006358:	4618      	mov	r0, r3
 800635a:	3730      	adds	r7, #48	; 0x30
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08e      	sub	sp, #56	; 0x38
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006376:	2300      	movs	r3, #0
 8006378:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <xQueueSemaphoreTake+0x30>
 8006380:	f04f 0320 	mov.w	r3, #32
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	e7fe      	b.n	8006392 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <xQueueSemaphoreTake+0x4c>
 800639c:	f04f 0320 	mov.w	r3, #32
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	e7fe      	b.n	80063ae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b0:	f001 f83e 	bl	8007430 <xTaskGetSchedulerState>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <xQueueSemaphoreTake+0x5c>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <xQueueSemaphoreTake+0x60>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <xQueueSemaphoreTake+0x62>
 80063c4:	2300      	movs	r3, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <xQueueSemaphoreTake+0x7a>
 80063ca:	f04f 0320 	mov.w	r3, #32
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	e7fe      	b.n	80063dc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80063de:	f001 fb8d 	bl	8007afc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d024      	beq.n	8006438 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80063fe:	f001 f9dd 	bl	80077bc <pvTaskIncrementMutexHeldCount>
 8006402:	4602      	mov	r2, r0
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00f      	beq.n	8006430 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	3310      	adds	r3, #16
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fe4f 	bl	80070b8 <xTaskRemoveFromEventList>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006420:	4b53      	ldr	r3, [pc, #332]	; (8006570 <xQueueSemaphoreTake+0x20c>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006430:	f001 fb92 	bl	8007b58 <vPortExitCritical>
				return pdPASS;
 8006434:	2301      	movs	r3, #1
 8006436:	e096      	b.n	8006566 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d110      	bne.n	8006460 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <xQueueSemaphoreTake+0xf4>
 8006444:	f04f 0320 	mov.w	r3, #32
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e7fe      	b.n	8006456 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006458:	f001 fb7e 	bl	8007b58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800645c:	2300      	movs	r3, #0
 800645e:	e082      	b.n	8006566 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fe86 	bl	800717c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006474:	f001 fb70 	bl	8007b58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006478:	f000 fc3a 	bl	8006cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800647c:	f001 fb3e 	bl	8007afc <vPortEnterCritical>
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006486:	b25b      	sxtb	r3, r3
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d103      	bne.n	8006496 <xQueueSemaphoreTake+0x132>
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800649c:	b25b      	sxtb	r3, r3
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d103      	bne.n	80064ac <xQueueSemaphoreTake+0x148>
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ac:	f001 fb54 	bl	8007b58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b0:	463a      	mov	r2, r7
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fe75 	bl	80071a8 <xTaskCheckForTimeOut>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d132      	bne.n	800652a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064c6:	f000 f9cc 	bl	8006862 <prvIsQueueEmpty>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d026      	beq.n	800651e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80064d8:	f001 fb10 	bl	8007afc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ffc3 	bl	800746c <xTaskPriorityInherit>
 80064e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064e8:	f001 fb36 	bl	8007b58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fdbb 	bl	8007070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064fc:	f000 f95f 	bl	80067be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006500:	f000 fc04 	bl	8006d0c <xTaskResumeAll>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	f47f af69 	bne.w	80063de <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800650c:	4b18      	ldr	r3, [pc, #96]	; (8006570 <xQueueSemaphoreTake+0x20c>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	e75f      	b.n	80063de <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800651e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006520:	f000 f94d 	bl	80067be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006524:	f000 fbf2 	bl	8006d0c <xTaskResumeAll>
 8006528:	e759      	b.n	80063de <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800652a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800652c:	f000 f947 	bl	80067be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006530:	f000 fbec 	bl	8006d0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006536:	f000 f994 	bl	8006862 <prvIsQueueEmpty>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f43f af4e 	beq.w	80063de <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00d      	beq.n	8006564 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006548:	f001 fad8 	bl	8007afc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800654c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800654e:	f000 f88e 	bl	800666e <prvGetDisinheritPriorityAfterTimeout>
 8006552:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f890 	bl	8007680 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006560:	f001 fafa 	bl	8007b58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006566:	4618      	mov	r0, r3
 8006568:	3738      	adds	r7, #56	; 0x38
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08e      	sub	sp, #56	; 0x38
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <xQueueReceiveFromISR+0x2a>
 800658a:	f04f 0320 	mov.w	r3, #32
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	623b      	str	r3, [r7, #32]
 800659c:	e7fe      	b.n	800659c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <xQueueReceiveFromISR+0x38>
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xQueueReceiveFromISR+0x3c>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <xQueueReceiveFromISR+0x3e>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <xQueueReceiveFromISR+0x56>
 80065b6:	f04f 0320 	mov.w	r3, #32
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	e7fe      	b.n	80065c8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ca:	f001 fb73 	bl	8007cb4 <vPortValidateInterruptPriority>
	__asm volatile
 80065ce:	f3ef 8211 	mrs	r2, BASEPRI
 80065d2:	f04f 0320 	mov.w	r3, #32
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	61ba      	str	r2, [r7, #24]
 80065e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02f      	beq.n	8006656 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006604:	f000 f8b5 	bl	8006772 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	1e5a      	subs	r2, r3, #1
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d112      	bne.n	8006640 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d016      	beq.n	8006650 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	3310      	adds	r3, #16
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fd46 	bl	80070b8 <xTaskRemoveFromEventList>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e007      	b.n	8006650 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006644:	3301      	adds	r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	b25a      	sxtb	r2, r3
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006650:	2301      	movs	r3, #1
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
 8006654:	e001      	b.n	800665a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006666:	4618      	mov	r0, r3
 8006668:	3738      	adds	r7, #56	; 0x38
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d006      	beq.n	800668c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f1c3 0307 	rsb	r3, r3, #7
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	e001      	b.n	8006690 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006690:	68fb      	ldr	r3, [r7, #12]
	}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b086      	sub	sp, #24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10d      	bne.n	80066d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d14d      	bne.n	8006760 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ff55 	bl	8007578 <xTaskPriorityDisinherit>
 80066ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e043      	b.n	8006760 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d119      	bne.n	8006712 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6898      	ldr	r0, [r3, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	461a      	mov	r2, r3
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	f001 fd1b 	bl	8008124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	429a      	cmp	r2, r3
 8006706:	d32b      	bcc.n	8006760 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	e026      	b.n	8006760 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68d8      	ldr	r0, [r3, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	f001 fd01 	bl	8008124 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	425b      	negs	r3, r3
 800672c:	441a      	add	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d207      	bcs.n	800674e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	425b      	negs	r3, r3
 8006748:	441a      	add	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d105      	bne.n	8006760 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3b01      	subs	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006768:	697b      	ldr	r3, [r7, #20]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d018      	beq.n	80067b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d303      	bcc.n	80067a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68d9      	ldr	r1, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	461a      	mov	r2, r3
 80067b0:	6838      	ldr	r0, [r7, #0]
 80067b2:	f001 fcb7 	bl	8008124 <memcpy>
	}
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067c6:	f001 f999 	bl	8007afc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d2:	e011      	b.n	80067f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d012      	beq.n	8006802 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3324      	adds	r3, #36	; 0x24
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fc69 	bl	80070b8 <xTaskRemoveFromEventList>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067ec:	f000 fd3c 	bl	8007268 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dce9      	bgt.n	80067d4 <prvUnlockQueue+0x16>
 8006800:	e000      	b.n	8006804 <prvUnlockQueue+0x46>
					break;
 8006802:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800680c:	f001 f9a4 	bl	8007b58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006810:	f001 f974 	bl	8007afc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800681a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681c:	e011      	b.n	8006842 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3310      	adds	r3, #16
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fc44 	bl	80070b8 <xTaskRemoveFromEventList>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006836:	f000 fd17 	bl	8007268 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	3b01      	subs	r3, #1
 800683e:	b2db      	uxtb	r3, r3
 8006840:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	dce9      	bgt.n	800681e <prvUnlockQueue+0x60>
 800684a:	e000      	b.n	800684e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800684c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	22ff      	movs	r2, #255	; 0xff
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006856:	f001 f97f 	bl	8007b58 <vPortExitCritical>
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800686a:	f001 f947 	bl	8007afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006876:	2301      	movs	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e001      	b.n	8006880 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006880:	f001 f96a 	bl	8007b58 <vPortExitCritical>

	return xReturn;
 8006884:	68fb      	ldr	r3, [r7, #12]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006896:	f001 f931 	bl	8007afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d102      	bne.n	80068ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e001      	b.n	80068b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068b0:	f001 f952 	bl	8007b58 <vPortExitCritical>

	return xReturn;
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b08e      	sub	sp, #56	; 0x38
 80068c2:	af04      	add	r7, sp, #16
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <xTaskCreateStatic+0x28>
	__asm volatile
 80068d2:	f04f 0320 	mov.w	r3, #32
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	623b      	str	r3, [r7, #32]
 80068e4:	e7fe      	b.n	80068e4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <xTaskCreateStatic+0x42>
 80068ec:	f04f 0320 	mov.w	r3, #32
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e7fe      	b.n	80068fe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006900:	235c      	movs	r3, #92	; 0x5c
 8006902:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b5c      	cmp	r3, #92	; 0x5c
 8006908:	d009      	beq.n	800691e <xTaskCreateStatic+0x60>
 800690a:	f04f 0320 	mov.w	r3, #32
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e7fe      	b.n	800691c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01e      	beq.n	8006962 <xTaskCreateStatic+0xa4>
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	2b00      	cmp	r3, #0
 8006928:	d01b      	beq.n	8006962 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006932:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800693c:	2300      	movs	r3, #0
 800693e:	9303      	str	r3, [sp, #12]
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	9302      	str	r3, [sp, #8]
 8006944:	f107 0314 	add.w	r3, r7, #20
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f850 	bl	80069fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800695a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800695c:	f000 f8cc 	bl	8006af8 <prvAddNewTaskToReadyList>
 8006960:	e001      	b.n	8006966 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006966:	697b      	ldr	r3, [r7, #20]
	}
 8006968:	4618      	mov	r0, r3
 800696a:	3728      	adds	r7, #40	; 0x28
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	; 0x30
 8006974:	af04      	add	r7, sp, #16
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	4613      	mov	r3, r2
 800697e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f9d3 	bl	8007d30 <pvPortMalloc>
 800698a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006992:	205c      	movs	r0, #92	; 0x5c
 8006994:	f001 f9cc 	bl	8007d30 <pvPortMalloc>
 8006998:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
 80069a6:	e005      	b.n	80069b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069a8:	6978      	ldr	r0, [r7, #20]
 80069aa:	f001 fa83 	bl	8007eb4 <vPortFree>
 80069ae:	e001      	b.n	80069b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	2300      	movs	r3, #0
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f80e 	bl	80069fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069de:	69f8      	ldr	r0, [r7, #28]
 80069e0:	f000 f88a 	bl	8006af8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069e4:	2301      	movs	r3, #1
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e002      	b.n	80069f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295
 80069ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069f0:	69bb      	ldr	r3, [r7, #24]
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b088      	sub	sp, #32
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a12:	3b01      	subs	r3, #1
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <prvInitialiseNewTask+0x46>
 8006a2c:	f04f 0320 	mov.w	r3, #32
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e7fe      	b.n	8006a3e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a40:	2300      	movs	r3, #0
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	e012      	b.n	8006a6c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	7819      	ldrb	r1, [r3, #0]
 8006a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	3334      	adds	r3, #52	; 0x34
 8006a56:	460a      	mov	r2, r1
 8006a58:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b17      	cmp	r3, #23
 8006a70:	d9e9      	bls.n	8006a46 <prvInitialiseNewTask+0x4c>
 8006a72:	e000      	b.n	8006a76 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006a74:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	d901      	bls.n	8006a88 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a84:	2306      	movs	r3, #6
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2200      	movs	r2, #0
 8006a98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe ff53 	bl	800594a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe ff4e 	bl	800594a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	f1c3 0207 	rsb	r2, r3, #7
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68f9      	ldr	r1, [r7, #12]
 8006ad6:	69b8      	ldr	r0, [r7, #24]
 8006ad8:	f000 feea 	bl	80078b0 <pxPortInitialiseStack>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aee:	bf00      	nop
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b00:	f000 fffc 	bl	8007afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <prvAddNewTaskToReadyList+0xb8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	4a29      	ldr	r2, [pc, #164]	; (8006bb0 <prvAddNewTaskToReadyList+0xb8>)
 8006b0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b0e:	4b29      	ldr	r3, [pc, #164]	; (8006bb4 <prvAddNewTaskToReadyList+0xbc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <prvAddNewTaskToReadyList+0xbc>)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <prvAddNewTaskToReadyList+0xb8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d110      	bne.n	8006b46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b24:	f000 fbc4 	bl	80072b0 <prvInitialiseTaskLists>
 8006b28:	e00d      	b.n	8006b46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b2a:	4b23      	ldr	r3, [pc, #140]	; (8006bb8 <prvAddNewTaskToReadyList+0xc0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b32:	4b20      	ldr	r3, [pc, #128]	; (8006bb4 <prvAddNewTaskToReadyList+0xbc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d802      	bhi.n	8006b46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b40:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <prvAddNewTaskToReadyList+0xbc>)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <prvAddNewTaskToReadyList+0xc4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	; (8006bbc <prvAddNewTaskToReadyList+0xc4>)
 8006b4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	2201      	movs	r2, #1
 8006b56:	409a      	lsls	r2, r3
 8006b58:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <prvAddNewTaskToReadyList+0xc8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <prvAddNewTaskToReadyList+0xc8>)
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <prvAddNewTaskToReadyList+0xcc>)
 8006b70:	441a      	add	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4619      	mov	r1, r3
 8006b78:	4610      	mov	r0, r2
 8006b7a:	f7fe fef3 	bl	8005964 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b7e:	f000 ffeb 	bl	8007b58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b82:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <prvAddNewTaskToReadyList+0xc0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <prvAddNewTaskToReadyList+0xbc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d207      	bcs.n	8006ba8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <prvAddNewTaskToReadyList+0xd0>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000388 	.word	0x20000388
 8006bb4:	20000288 	.word	0x20000288
 8006bb8:	20000394 	.word	0x20000394
 8006bbc:	200003a4 	.word	0x200003a4
 8006bc0:	20000390 	.word	0x20000390
 8006bc4:	2000028c 	.word	0x2000028c
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <vTaskDelay+0x60>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <vTaskDelay+0x2e>
 8006be6:	f04f 0320 	mov.w	r3, #32
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	e7fe      	b.n	8006bf8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bfa:	f000 f879 	bl	8006cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bfe:	2100      	movs	r1, #0
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fdef 	bl	80077e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c06:	f000 f881 	bl	8006d0c <xTaskResumeAll>
 8006c0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d107      	bne.n	8006c22 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <vTaskDelay+0x64>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200003b0 	.word	0x200003b0
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c42:	463a      	mov	r2, r7
 8006c44:	1d39      	adds	r1, r7, #4
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7f9 fac8 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	9202      	str	r2, [sp, #8]
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	460a      	mov	r2, r1
 8006c62:	491d      	ldr	r1, [pc, #116]	; (8006cd8 <vTaskStartScheduler+0xa4>)
 8006c64:	481d      	ldr	r0, [pc, #116]	; (8006cdc <vTaskStartScheduler+0xa8>)
 8006c66:	f7ff fe2a 	bl	80068be <xTaskCreateStatic>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <vTaskStartScheduler+0xac>)
 8006c6e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <vTaskStartScheduler+0xac>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e001      	b.n	8006c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d115      	bne.n	8006cb4 <vTaskStartScheduler+0x80>
 8006c88:	f04f 0320 	mov.w	r3, #32
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c9a:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <vTaskStartScheduler+0xb0>)
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <vTaskStartScheduler+0xb4>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <vTaskStartScheduler+0xb8>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cae:	f000 fe87 	bl	80079c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cb2:	e00d      	b.n	8006cd0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d109      	bne.n	8006cd0 <vTaskStartScheduler+0x9c>
 8006cbc:	f04f 0320 	mov.w	r3, #32
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e7fe      	b.n	8006cce <vTaskStartScheduler+0x9a>
}
 8006cd0:	bf00      	nop
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08008234 	.word	0x08008234
 8006cdc:	08007281 	.word	0x08007281
 8006ce0:	200003ac 	.word	0x200003ac
 8006ce4:	200003a8 	.word	0x200003a8
 8006ce8:	20000394 	.word	0x20000394
 8006cec:	2000038c 	.word	0x2000038c

08006cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <vTaskSuspendAll+0x18>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	4a03      	ldr	r2, [pc, #12]	; (8006d08 <vTaskSuspendAll+0x18>)
 8006cfc:	6013      	str	r3, [r2, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	200003b0 	.word	0x200003b0

08006d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d1a:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <xTaskResumeAll+0x2a>
 8006d22:	f04f 0320 	mov.w	r3, #32
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	e7fe      	b.n	8006d34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d36:	f000 fee1 	bl	8007afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d3a:	4b39      	ldr	r3, [pc, #228]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a37      	ldr	r2, [pc, #220]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d44:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d161      	bne.n	8006e10 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <xTaskResumeAll+0x118>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05d      	beq.n	8006e10 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d54:	e02e      	b.n	8006db4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d56:	4b34      	ldr	r3, [pc, #208]	; (8006e28 <xTaskResumeAll+0x11c>)
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3318      	adds	r3, #24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fe5b 	bl	8005a1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fe56 	bl	8005a1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	2201      	movs	r2, #1
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <xTaskResumeAll+0x120>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <xTaskResumeAll+0x120>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <xTaskResumeAll+0x124>)
 8006d92:	441a      	add	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f7fe fde2 	bl	8005964 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <xTaskResumeAll+0x128>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006dae:	4b22      	ldr	r3, [pc, #136]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <xTaskResumeAll+0x11c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1cc      	bne.n	8006d56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dc2:	f000 fb0f 	bl	80073e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <xTaskResumeAll+0x130>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dd2:	f000 f837 	bl	8006e44 <xTaskIncrementTick>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006ddc:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f1      	bne.n	8006dd2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <xTaskResumeAll+0x130>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTaskResumeAll+0x134>)
 8006e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e10:	f000 fea2 	bl	8007b58 <vPortExitCritical>

	return xAlreadyYielded;
 8006e14:	68bb      	ldr	r3, [r7, #8]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	200003b0 	.word	0x200003b0
 8006e24:	20000388 	.word	0x20000388
 8006e28:	20000348 	.word	0x20000348
 8006e2c:	20000390 	.word	0x20000390
 8006e30:	2000028c 	.word	0x2000028c
 8006e34:	20000288 	.word	0x20000288
 8006e38:	2000039c 	.word	0x2000039c
 8006e3c:	20000398 	.word	0x20000398
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e4e:	4b50      	ldr	r3, [pc, #320]	; (8006f90 <xTaskIncrementTick+0x14c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 808c 	bne.w	8006f70 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e58:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <xTaskIncrementTick+0x150>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e60:	4a4c      	ldr	r2, [pc, #304]	; (8006f94 <xTaskIncrementTick+0x150>)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11f      	bne.n	8006eac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e6c:	4b4a      	ldr	r3, [pc, #296]	; (8006f98 <xTaskIncrementTick+0x154>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <xTaskIncrementTick+0x46>
 8006e76:	f04f 0320 	mov.w	r3, #32
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	e7fe      	b.n	8006e88 <xTaskIncrementTick+0x44>
 8006e8a:	4b43      	ldr	r3, [pc, #268]	; (8006f98 <xTaskIncrementTick+0x154>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	4b42      	ldr	r3, [pc, #264]	; (8006f9c <xTaskIncrementTick+0x158>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a40      	ldr	r2, [pc, #256]	; (8006f98 <xTaskIncrementTick+0x154>)
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	4a40      	ldr	r2, [pc, #256]	; (8006f9c <xTaskIncrementTick+0x158>)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	4b40      	ldr	r3, [pc, #256]	; (8006fa0 <xTaskIncrementTick+0x15c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <xTaskIncrementTick+0x15c>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	f000 fa9c 	bl	80073e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eac:	4b3d      	ldr	r3, [pc, #244]	; (8006fa4 <xTaskIncrementTick+0x160>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d34d      	bcc.n	8006f52 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb6:	4b38      	ldr	r3, [pc, #224]	; (8006f98 <xTaskIncrementTick+0x154>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <xTaskIncrementTick+0x80>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <xTaskIncrementTick+0x82>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eca:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <xTaskIncrementTick+0x160>)
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed0:	601a      	str	r2, [r3, #0]
					break;
 8006ed2:	e03e      	b.n	8006f52 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ed4:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <xTaskIncrementTick+0x154>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d203      	bcs.n	8006ef4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eec:	4a2d      	ldr	r2, [pc, #180]	; (8006fa4 <xTaskIncrementTick+0x160>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6013      	str	r3, [r2, #0]
						break;
 8006ef2:	e02e      	b.n	8006f52 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fd90 	bl	8005a1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3318      	adds	r3, #24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fd87 	bl	8005a1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	2201      	movs	r2, #1
 8006f16:	409a      	lsls	r2, r3
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <xTaskIncrementTick+0x164>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <xTaskIncrementTick+0x164>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <xTaskIncrementTick+0x168>)
 8006f30:	441a      	add	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7fe fd13 	bl	8005964 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <xTaskIncrementTick+0x16c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d3b4      	bcc.n	8006eb6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f50:	e7b1      	b.n	8006eb6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <xTaskIncrementTick+0x16c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4914      	ldr	r1, [pc, #80]	; (8006fac <xTaskIncrementTick+0x168>)
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d907      	bls.n	8006f7a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e004      	b.n	8006f7a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <xTaskIncrementTick+0x170>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	4a0f      	ldr	r2, [pc, #60]	; (8006fb4 <xTaskIncrementTick+0x170>)
 8006f78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <xTaskIncrementTick+0x174>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200003b0 	.word	0x200003b0
 8006f94:	2000038c 	.word	0x2000038c
 8006f98:	20000340 	.word	0x20000340
 8006f9c:	20000344 	.word	0x20000344
 8006fa0:	200003a0 	.word	0x200003a0
 8006fa4:	200003a8 	.word	0x200003a8
 8006fa8:	20000390 	.word	0x20000390
 8006fac:	2000028c 	.word	0x2000028c
 8006fb0:	20000288 	.word	0x20000288
 8006fb4:	20000398 	.word	0x20000398
 8006fb8:	2000039c 	.word	0x2000039c

08006fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fc2:	4b26      	ldr	r3, [pc, #152]	; (800705c <vTaskSwitchContext+0xa0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fca:	4b25      	ldr	r3, [pc, #148]	; (8007060 <vTaskSwitchContext+0xa4>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd0:	e03e      	b.n	8007050 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006fd2:	4b23      	ldr	r3, [pc, #140]	; (8007060 <vTaskSwitchContext+0xa4>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006fd8:	4b22      	ldr	r3, [pc, #136]	; (8007064 <vTaskSwitchContext+0xa8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	f1c3 031f 	rsb	r3, r3, #31
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	491e      	ldr	r1, [pc, #120]	; (8007068 <vTaskSwitchContext+0xac>)
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007002:	f04f 0320 	mov.w	r3, #32
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	e7fe      	b.n	8007014 <vTaskSwitchContext+0x58>
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4a11      	ldr	r2, [pc, #68]	; (8007068 <vTaskSwitchContext+0xac>)
 8007022:	4413      	add	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	605a      	str	r2, [r3, #4]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3308      	adds	r3, #8
 8007038:	429a      	cmp	r2, r3
 800703a:	d104      	bne.n	8007046 <vTaskSwitchContext+0x8a>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <vTaskSwitchContext+0xb0>)
 800704e:	6013      	str	r3, [r2, #0]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	200003b0 	.word	0x200003b0
 8007060:	2000039c 	.word	0x2000039c
 8007064:	20000390 	.word	0x20000390
 8007068:	2000028c 	.word	0x2000028c
 800706c:	20000288 	.word	0x20000288

08007070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <vTaskPlaceOnEventList+0x24>
 8007080:	f04f 0320 	mov.w	r3, #32
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	e7fe      	b.n	8007092 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <vTaskPlaceOnEventList+0x44>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3318      	adds	r3, #24
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7fe fc85 	bl	80059ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070a2:	2101      	movs	r1, #1
 80070a4:	6838      	ldr	r0, [r7, #0]
 80070a6:	f000 fb9d 	bl	80077e4 <prvAddCurrentTaskToDelayedList>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000288 	.word	0x20000288

080070b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <xTaskRemoveFromEventList+0x2a>
 80070ce:	f04f 0320 	mov.w	r3, #32
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e7fe      	b.n	80070e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3318      	adds	r3, #24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fc99 	bl	8005a1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ec:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <xTaskRemoveFromEventList+0xac>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11c      	bne.n	800712e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fc90 	bl	8005a1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	2201      	movs	r2, #1
 8007104:	409a      	lsls	r2, r3
 8007106:	4b18      	ldr	r3, [pc, #96]	; (8007168 <xTaskRemoveFromEventList+0xb0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4313      	orrs	r3, r2
 800710c:	4a16      	ldr	r2, [pc, #88]	; (8007168 <xTaskRemoveFromEventList+0xb0>)
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4a13      	ldr	r2, [pc, #76]	; (800716c <xTaskRemoveFromEventList+0xb4>)
 800711e:	441a      	add	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7fe fc1c 	bl	8005964 <vListInsertEnd>
 800712c:	e005      	b.n	800713a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3318      	adds	r3, #24
 8007132:	4619      	mov	r1, r3
 8007134:	480e      	ldr	r0, [pc, #56]	; (8007170 <xTaskRemoveFromEventList+0xb8>)
 8007136:	f7fe fc15 	bl	8005964 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <xTaskRemoveFromEventList+0xbc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	429a      	cmp	r2, r3
 8007146:	d905      	bls.n	8007154 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007148:	2301      	movs	r3, #1
 800714a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <xTaskRemoveFromEventList+0xc0>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e001      	b.n	8007158 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007158:	697b      	ldr	r3, [r7, #20]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200003b0 	.word	0x200003b0
 8007168:	20000390 	.word	0x20000390
 800716c:	2000028c 	.word	0x2000028c
 8007170:	20000348 	.word	0x20000348
 8007174:	20000288 	.word	0x20000288
 8007178:	2000039c 	.word	0x2000039c

0800717c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <vTaskInternalSetTimeOutState+0x24>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <vTaskInternalSetTimeOutState+0x28>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	605a      	str	r2, [r3, #4]
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	200003a0 	.word	0x200003a0
 80071a4:	2000038c 	.word	0x2000038c

080071a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <xTaskCheckForTimeOut+0x24>
 80071b8:	f04f 0320 	mov.w	r3, #32
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	e7fe      	b.n	80071ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <xTaskCheckForTimeOut+0x3e>
 80071d2:	f04f 0320 	mov.w	r3, #32
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e7fe      	b.n	80071e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071e6:	f000 fc89 	bl	8007afc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <xTaskCheckForTimeOut+0xb8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007202:	d102      	bne.n	800720a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007204:	2300      	movs	r3, #0
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e023      	b.n	8007252 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b15      	ldr	r3, [pc, #84]	; (8007264 <xTaskCheckForTimeOut+0xbc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d007      	beq.n	8007226 <xTaskCheckForTimeOut+0x7e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	429a      	cmp	r2, r3
 800721e:	d302      	bcc.n	8007226 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007220:	2301      	movs	r3, #1
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	e015      	b.n	8007252 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	429a      	cmp	r2, r3
 800722e:	d20b      	bcs.n	8007248 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	1ad2      	subs	r2, r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ff9d 	bl	800717c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	e004      	b.n	8007252 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007252:	f000 fc81 	bl	8007b58 <vPortExitCritical>

	return xReturn;
 8007256:	69fb      	ldr	r3, [r7, #28]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	2000038c 	.word	0x2000038c
 8007264:	200003a0 	.word	0x200003a0

08007268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <vTaskMissedYield+0x14>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	bf00      	nop
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	2000039c 	.word	0x2000039c

08007280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007288:	f000 f852 	bl	8007330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <prvIdleTask+0x28>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d9f9      	bls.n	8007288 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <prvIdleTask+0x2c>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072a4:	e7f0      	b.n	8007288 <prvIdleTask+0x8>
 80072a6:	bf00      	nop
 80072a8:	2000028c 	.word	0x2000028c
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	e00c      	b.n	80072d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4a12      	ldr	r2, [pc, #72]	; (8007310 <prvInitialiseTaskLists+0x60>)
 80072c8:	4413      	add	r3, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fb1d 	bl	800590a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d9ef      	bls.n	80072bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072dc:	480d      	ldr	r0, [pc, #52]	; (8007314 <prvInitialiseTaskLists+0x64>)
 80072de:	f7fe fb14 	bl	800590a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072e2:	480d      	ldr	r0, [pc, #52]	; (8007318 <prvInitialiseTaskLists+0x68>)
 80072e4:	f7fe fb11 	bl	800590a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072e8:	480c      	ldr	r0, [pc, #48]	; (800731c <prvInitialiseTaskLists+0x6c>)
 80072ea:	f7fe fb0e 	bl	800590a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072ee:	480c      	ldr	r0, [pc, #48]	; (8007320 <prvInitialiseTaskLists+0x70>)
 80072f0:	f7fe fb0b 	bl	800590a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072f4:	480b      	ldr	r0, [pc, #44]	; (8007324 <prvInitialiseTaskLists+0x74>)
 80072f6:	f7fe fb08 	bl	800590a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072fa:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <prvInitialiseTaskLists+0x78>)
 80072fc:	4a05      	ldr	r2, [pc, #20]	; (8007314 <prvInitialiseTaskLists+0x64>)
 80072fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007300:	4b0a      	ldr	r3, [pc, #40]	; (800732c <prvInitialiseTaskLists+0x7c>)
 8007302:	4a05      	ldr	r2, [pc, #20]	; (8007318 <prvInitialiseTaskLists+0x68>)
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2000028c 	.word	0x2000028c
 8007314:	20000318 	.word	0x20000318
 8007318:	2000032c 	.word	0x2000032c
 800731c:	20000348 	.word	0x20000348
 8007320:	2000035c 	.word	0x2000035c
 8007324:	20000374 	.word	0x20000374
 8007328:	20000340 	.word	0x20000340
 800732c:	20000344 	.word	0x20000344

08007330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007336:	e019      	b.n	800736c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007338:	f000 fbe0 	bl	8007afc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <prvCheckTasksWaitingTermination+0x4c>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fb68 	bl	8005a1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <prvCheckTasksWaitingTermination+0x50>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3b01      	subs	r3, #1
 8007354:	4a0a      	ldr	r2, [pc, #40]	; (8007380 <prvCheckTasksWaitingTermination+0x50>)
 8007356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <prvCheckTasksWaitingTermination+0x54>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3b01      	subs	r3, #1
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007362:	f000 fbf9 	bl	8007b58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f80e 	bl	8007388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <prvCheckTasksWaitingTermination+0x54>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e1      	bne.n	8007338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	2000035c 	.word	0x2000035c
 8007380:	20000388 	.word	0x20000388
 8007384:	20000370 	.word	0x20000370

08007388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007396:	2b00      	cmp	r3, #0
 8007398:	d108      	bne.n	80073ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fd88 	bl	8007eb4 <vPortFree>
				vPortFree( pxTCB );
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fd85 	bl	8007eb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073aa:	e017      	b.n	80073dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d103      	bne.n	80073be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fd7c 	bl	8007eb4 <vPortFree>
	}
 80073bc:	e00e      	b.n	80073dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d009      	beq.n	80073dc <prvDeleteTCB+0x54>
 80073c8:	f04f 0320 	mov.w	r3, #32
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e7fe      	b.n	80073da <prvDeleteTCB+0x52>
	}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <prvResetNextTaskUnblockTime+0x44>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <prvResetNextTaskUnblockTime+0x14>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <prvResetNextTaskUnblockTime+0x16>
 80073f8:	2300      	movs	r3, #0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <prvResetNextTaskUnblockTime+0x48>)
 8007400:	f04f 32ff 	mov.w	r2, #4294967295
 8007404:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007406:	e008      	b.n	800741a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <prvResetNextTaskUnblockTime+0x44>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	4a05      	ldr	r2, [pc, #20]	; (800742c <prvResetNextTaskUnblockTime+0x48>)
 8007418:	6013      	str	r3, [r2, #0]
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000340 	.word	0x20000340
 800742c:	200003a8 	.word	0x200003a8

08007430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <xTaskGetSchedulerState+0x34>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800743e:	2301      	movs	r3, #1
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	e008      	b.n	8007456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007444:	4b08      	ldr	r3, [pc, #32]	; (8007468 <xTaskGetSchedulerState+0x38>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800744c:	2302      	movs	r3, #2
 800744e:	607b      	str	r3, [r7, #4]
 8007450:	e001      	b.n	8007456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007456:	687b      	ldr	r3, [r7, #4]
	}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	20000394 	.word	0x20000394
 8007468:	200003b0 	.word	0x200003b0

0800746c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d06e      	beq.n	8007560 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4b39      	ldr	r3, [pc, #228]	; (800756c <xTaskPriorityInherit+0x100>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	429a      	cmp	r2, r3
 800748e:	d25e      	bcs.n	800754e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	db06      	blt.n	80074a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007498:	4b34      	ldr	r3, [pc, #208]	; (800756c <xTaskPriorityInherit+0x100>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	f1c3 0207 	rsb	r2, r3, #7
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6959      	ldr	r1, [r3, #20]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4a2e      	ldr	r2, [pc, #184]	; (8007570 <xTaskPriorityInherit+0x104>)
 80074b8:	4413      	add	r3, r2
 80074ba:	4299      	cmp	r1, r3
 80074bc:	d101      	bne.n	80074c2 <xTaskPriorityInherit+0x56>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <xTaskPriorityInherit+0x58>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d03a      	beq.n	800753e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe faa6 	bl	8005a1e <uxListRemove>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d115      	bne.n	8007504 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4924      	ldr	r1, [pc, #144]	; (8007570 <xTaskPriorityInherit+0x104>)
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <xTaskPriorityInherit+0x98>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	2201      	movs	r2, #1
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	43da      	mvns	r2, r3
 80074fa:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <xTaskPriorityInherit+0x108>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4013      	ands	r3, r2
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <xTaskPriorityInherit+0x108>)
 8007502:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007504:	4b19      	ldr	r3, [pc, #100]	; (800756c <xTaskPriorityInherit+0x100>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	2201      	movs	r2, #1
 8007514:	409a      	lsls	r2, r3
 8007516:	4b17      	ldr	r3, [pc, #92]	; (8007574 <xTaskPriorityInherit+0x108>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4313      	orrs	r3, r2
 800751c:	4a15      	ldr	r2, [pc, #84]	; (8007574 <xTaskPriorityInherit+0x108>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4a10      	ldr	r2, [pc, #64]	; (8007570 <xTaskPriorityInherit+0x104>)
 800752e:	441a      	add	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3304      	adds	r3, #4
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7fe fa14 	bl	8005964 <vListInsertEnd>
 800753c:	e004      	b.n	8007548 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <xTaskPriorityInherit+0x100>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e008      	b.n	8007560 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <xTaskPriorityInherit+0x100>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d201      	bcs.n	8007560 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007560:	68fb      	ldr	r3, [r7, #12]
	}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000288 	.word	0x20000288
 8007570:	2000028c 	.word	0x2000028c
 8007574:	20000390 	.word	0x20000390

08007578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d06c      	beq.n	8007668 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800758e:	4b39      	ldr	r3, [pc, #228]	; (8007674 <xTaskPriorityDisinherit+0xfc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	429a      	cmp	r2, r3
 8007596:	d009      	beq.n	80075ac <xTaskPriorityDisinherit+0x34>
 8007598:	f04f 0320 	mov.w	r3, #32
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e7fe      	b.n	80075aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <xTaskPriorityDisinherit+0x50>
 80075b4:	f04f 0320 	mov.w	r3, #32
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	e7fe      	b.n	80075c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075cc:	1e5a      	subs	r2, r3, #1
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d044      	beq.n	8007668 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d140      	bne.n	8007668 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fa17 	bl	8005a1e <uxListRemove>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d115      	bne.n	8007622 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fa:	491f      	ldr	r1, [pc, #124]	; (8007678 <xTaskPriorityDisinherit+0x100>)
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <xTaskPriorityDisinherit+0xaa>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	2201      	movs	r2, #1
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	43da      	mvns	r2, r3
 8007618:	4b18      	ldr	r3, [pc, #96]	; (800767c <xTaskPriorityDisinherit+0x104>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4013      	ands	r3, r2
 800761e:	4a17      	ldr	r2, [pc, #92]	; (800767c <xTaskPriorityDisinherit+0x104>)
 8007620:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	f1c3 0207 	rsb	r2, r3, #7
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	2201      	movs	r2, #1
 800763c:	409a      	lsls	r2, r3
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <xTaskPriorityDisinherit+0x104>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4313      	orrs	r3, r2
 8007644:	4a0d      	ldr	r2, [pc, #52]	; (800767c <xTaskPriorityDisinherit+0x104>)
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4a08      	ldr	r2, [pc, #32]	; (8007678 <xTaskPriorityDisinherit+0x100>)
 8007656:	441a      	add	r2, r3
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f7fe f980 	bl	8005964 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007668:	697b      	ldr	r3, [r7, #20]
	}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000288 	.word	0x20000288
 8007678:	2000028c 	.word	0x2000028c
 800767c:	20000390 	.word	0x20000390

08007680 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800768e:	2301      	movs	r3, #1
 8007690:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8086 	beq.w	80077a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80076a2:	f04f 0320 	mov.w	r3, #32
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e7fe      	b.n	80076b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d902      	bls.n	80076c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e002      	b.n	80076cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d067      	beq.n	80077a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d162      	bne.n	80077a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076e0:	4b33      	ldr	r3, [pc, #204]	; (80077b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d109      	bne.n	80076fe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80076ea:	f04f 0320 	mov.w	r3, #32
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	e7fe      	b.n	80076fc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	db04      	blt.n	800771c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f1c3 0207 	rsb	r2, r3, #7
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	6959      	ldr	r1, [r3, #20]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4a22      	ldr	r2, [pc, #136]	; (80077b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800772c:	4413      	add	r3, r2
 800772e:	4299      	cmp	r1, r3
 8007730:	d101      	bne.n	8007736 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d034      	beq.n	80077a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe f96c 	bl	8005a1e <uxListRemove>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d115      	bne.n	8007778 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	4918      	ldr	r1, [pc, #96]	; (80077b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	2201      	movs	r2, #1
 8007768:	fa02 f303 	lsl.w	r3, r2, r3
 800776c:	43da      	mvns	r2, r3
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4013      	ands	r3, r2
 8007774:	4a10      	ldr	r2, [pc, #64]	; (80077b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007776:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	2201      	movs	r2, #1
 800777e:	409a      	lsls	r2, r3
 8007780:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4313      	orrs	r3, r2
 8007786:	4a0c      	ldr	r2, [pc, #48]	; (80077b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4a07      	ldr	r2, [pc, #28]	; (80077b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007798:	441a      	add	r2, r3
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7fe f8df 	bl	8005964 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077a6:	bf00      	nop
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000288 	.word	0x20000288
 80077b4:	2000028c 	.word	0x2000028c
 80077b8:	20000390 	.word	0x20000390

080077bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077ce:	3201      	adds	r2, #1
 80077d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80077d2:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80077d4:	681b      	ldr	r3, [r3, #0]
	}
 80077d6:	4618      	mov	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	20000288 	.word	0x20000288

080077e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ee:	4b29      	ldr	r3, [pc, #164]	; (8007894 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077f4:	4b28      	ldr	r3, [pc, #160]	; (8007898 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe f90f 	bl	8005a1e <uxListRemove>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007806:	4b24      	ldr	r3, [pc, #144]	; (8007898 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	2201      	movs	r2, #1
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	43da      	mvns	r2, r3
 8007814:	4b21      	ldr	r3, [pc, #132]	; (800789c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4013      	ands	r3, r2
 800781a:	4a20      	ldr	r2, [pc, #128]	; (800789c <prvAddCurrentTaskToDelayedList+0xb8>)
 800781c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d10a      	bne.n	800783c <prvAddCurrentTaskToDelayedList+0x58>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800782c:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3304      	adds	r3, #4
 8007832:	4619      	mov	r1, r3
 8007834:	481a      	ldr	r0, [pc, #104]	; (80078a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007836:	f7fe f895 	bl	8005964 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800783a:	e026      	b.n	800788a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007844:	4b14      	ldr	r3, [pc, #80]	; (8007898 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	429a      	cmp	r2, r3
 8007852:	d209      	bcs.n	8007868 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007854:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3304      	adds	r3, #4
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7fe f8a3 	bl	80059ac <vListInsert>
}
 8007866:	e010      	b.n	800788a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f7fe f899 	bl	80059ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	429a      	cmp	r2, r3
 8007882:	d202      	bcs.n	800788a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007884:	4a09      	ldr	r2, [pc, #36]	; (80078ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6013      	str	r3, [r2, #0]
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	2000038c 	.word	0x2000038c
 8007898:	20000288 	.word	0x20000288
 800789c:	20000390 	.word	0x20000390
 80078a0:	20000374 	.word	0x20000374
 80078a4:	20000344 	.word	0x20000344
 80078a8:	20000340 	.word	0x20000340
 80078ac:	200003a8 	.word	0x200003a8

080078b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3b04      	subs	r3, #4
 80078c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3b04      	subs	r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0201 	bic.w	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3b04      	subs	r3, #4
 80078de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e0:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <pxPortInitialiseStack+0x64>)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3b14      	subs	r3, #20
 80078ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f06f 0202 	mvn.w	r2, #2
 80078fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b20      	subs	r3, #32
 8007904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	08007919 	.word	0x08007919

08007918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007922:	4b11      	ldr	r3, [pc, #68]	; (8007968 <prvTaskExitError+0x50>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d009      	beq.n	8007940 <prvTaskExitError+0x28>
 800792c:	f04f 0320 	mov.w	r3, #32
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	e7fe      	b.n	800793e <prvTaskExitError+0x26>
 8007940:	f04f 0320 	mov.w	r3, #32
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007952:	bf00      	nop
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0fc      	beq.n	8007954 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	2000000c 	.word	0x2000000c
 800796c:	00000000 	.word	0x00000000

08007970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <pxCurrentTCBConst2>)
 8007972:	6819      	ldr	r1, [r3, #0]
 8007974:	6808      	ldr	r0, [r1, #0]
 8007976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797a:	f380 8809 	msr	PSP, r0
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f380 8811 	msr	BASEPRI, r0
 800798a:	4770      	bx	lr
 800798c:	f3af 8000 	nop.w

08007990 <pxCurrentTCBConst2>:
 8007990:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop

08007998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007998:	4808      	ldr	r0, [pc, #32]	; (80079bc <prvPortStartFirstTask+0x24>)
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	6800      	ldr	r0, [r0, #0]
 800799e:	f380 8808 	msr	MSP, r0
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8814 	msr	CONTROL, r0
 80079aa:	b662      	cpsie	i
 80079ac:	b661      	cpsie	f
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	df00      	svc	0
 80079b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ba:	bf00      	nop
 80079bc:	e000ed08 	.word	0xe000ed08

080079c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079c6:	4b44      	ldr	r3, [pc, #272]	; (8007ad8 <xPortStartScheduler+0x118>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a44      	ldr	r2, [pc, #272]	; (8007adc <xPortStartScheduler+0x11c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d109      	bne.n	80079e4 <xPortStartScheduler+0x24>
 80079d0:	f04f 0320 	mov.w	r3, #32
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	e7fe      	b.n	80079e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079e4:	4b3c      	ldr	r3, [pc, #240]	; (8007ad8 <xPortStartScheduler+0x118>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a3d      	ldr	r2, [pc, #244]	; (8007ae0 <xPortStartScheduler+0x120>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d109      	bne.n	8007a02 <xPortStartScheduler+0x42>
 80079ee:	f04f 0320 	mov.w	r3, #32
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e7fe      	b.n	8007a00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a02:	4b38      	ldr	r3, [pc, #224]	; (8007ae4 <xPortStartScheduler+0x124>)
 8007a04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	22ff      	movs	r2, #255	; 0xff
 8007a12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	4b30      	ldr	r3, [pc, #192]	; (8007ae8 <xPortStartScheduler+0x128>)
 8007a28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a2a:	4b30      	ldr	r3, [pc, #192]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a30:	e009      	b.n	8007a46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007a32:	4b2e      	ldr	r3, [pc, #184]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4a2c      	ldr	r2, [pc, #176]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b80      	cmp	r3, #128	; 0x80
 8007a50:	d0ef      	beq.n	8007a32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a52:	4b26      	ldr	r3, [pc, #152]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1c3 0307 	rsb	r3, r3, #7
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d009      	beq.n	8007a72 <xPortStartScheduler+0xb2>
 8007a5e:	f04f 0320 	mov.w	r3, #32
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	e7fe      	b.n	8007a70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a72:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a84:	4a19      	ldr	r2, [pc, #100]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a90:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <xPortStartScheduler+0x130>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <xPortStartScheduler+0x130>)
 8007a96:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <xPortStartScheduler+0x130>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <xPortStartScheduler+0x130>)
 8007aa2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8007aa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007aa8:	f000 f8d6 	bl	8007c58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007aac:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <xPortStartScheduler+0x134>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ab2:	f000 f8f5 	bl	8007ca0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <xPortStartScheduler+0x138>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a0f      	ldr	r2, [pc, #60]	; (8007af8 <xPortStartScheduler+0x138>)
 8007abc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ac0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ac2:	f7ff ff69 	bl	8007998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ac6:	f7ff fa79 	bl	8006fbc <vTaskSwitchContext>
	prvTaskExitError();
 8007aca:	f7ff ff25 	bl	8007918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed00 	.word	0xe000ed00
 8007adc:	410fc271 	.word	0x410fc271
 8007ae0:	410fc270 	.word	0x410fc270
 8007ae4:	e000e400 	.word	0xe000e400
 8007ae8:	200003b4 	.word	0x200003b4
 8007aec:	200003b8 	.word	0x200003b8
 8007af0:	e000ed20 	.word	0xe000ed20
 8007af4:	2000000c 	.word	0x2000000c
 8007af8:	e000ef34 	.word	0xe000ef34

08007afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	f04f 0320 	mov.w	r3, #32
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b14:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <vPortEnterCritical+0x54>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	4a0d      	ldr	r2, [pc, #52]	; (8007b50 <vPortEnterCritical+0x54>)
 8007b1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <vPortEnterCritical+0x54>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d10e      	bne.n	8007b44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <vPortEnterCritical+0x58>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <vPortEnterCritical+0x48>
 8007b30:	f04f 0320 	mov.w	r3, #32
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	e7fe      	b.n	8007b42 <vPortEnterCritical+0x46>
	}
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	2000000c 	.word	0x2000000c
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b5e:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <vPortExitCritical+0x4c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <vPortExitCritical+0x22>
 8007b66:	f04f 0320 	mov.w	r3, #32
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	e7fe      	b.n	8007b78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <vPortExitCritical+0x4c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4a08      	ldr	r2, [pc, #32]	; (8007ba4 <vPortExitCritical+0x4c>)
 8007b82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <vPortExitCritical+0x4c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <vPortExitCritical+0x3e>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c
	...

08007bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bb0:	f3ef 8009 	mrs	r0, PSP
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <pxCurrentTCBConst>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f01e 0f10 	tst.w	lr, #16
 8007bc0:	bf08      	it	eq
 8007bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bd0:	f04f 0020 	mov.w	r0, #32
 8007bd4:	f380 8811 	msr	BASEPRI, r0
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f7ff f9ec 	bl	8006fbc <vTaskSwitchContext>
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f380 8811 	msr	BASEPRI, r0
 8007bec:	bc09      	pop	{r0, r3}
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	6808      	ldr	r0, [r1, #0]
 8007bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf6:	f01e 0f10 	tst.w	lr, #16
 8007bfa:	bf08      	it	eq
 8007bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c00:	f380 8809 	msr	PSP, r0
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst>:
 8007c10:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0320 	mov.w	r3, #32
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c30:	f7ff f908 	bl	8006e44 <xTaskIncrementTick>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c3a:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <SysTick_Handler+0x3c>)
 8007c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <vPortSetupTimerInterrupt+0x34>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <vPortSetupTimerInterrupt+0x38>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <vPortSetupTimerInterrupt+0x3c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <vPortSetupTimerInterrupt+0x40>)
 8007c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <vPortSetupTimerInterrupt+0x44>)
 8007c76:	3b01      	subs	r3, #1
 8007c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <vPortSetupTimerInterrupt+0x34>)
 8007c7c:	2207      	movs	r2, #7
 8007c7e:	601a      	str	r2, [r3, #0]
}
 8007c80:	bf00      	nop
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	e000e010 	.word	0xe000e010
 8007c90:	e000e018 	.word	0xe000e018
 8007c94:	20000000 	.word	0x20000000
 8007c98:	10624dd3 	.word	0x10624dd3
 8007c9c:	e000e014 	.word	0xe000e014

08007ca0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ca0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cb0 <vPortEnableVFP+0x10>
 8007ca4:	6801      	ldr	r1, [r0, #0]
 8007ca6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007caa:	6001      	str	r1, [r0, #0]
 8007cac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cae:	bf00      	nop
 8007cb0:	e000ed88 	.word	0xe000ed88

08007cb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cba:	f3ef 8305 	mrs	r3, IPSR
 8007cbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b0f      	cmp	r3, #15
 8007cc4:	d913      	bls.n	8007cee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cc6:	4a16      	ldr	r2, [pc, #88]	; (8007d20 <vPortValidateInterruptPriority+0x6c>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cd0:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <vPortValidateInterruptPriority+0x70>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	7afa      	ldrb	r2, [r7, #11]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d209      	bcs.n	8007cee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007cda:	f04f 0320 	mov.w	r3, #32
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	607b      	str	r3, [r7, #4]
 8007cec:	e7fe      	b.n	8007cec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cee:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <vPortValidateInterruptPriority+0x74>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <vPortValidateInterruptPriority+0x78>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d909      	bls.n	8007d12 <vPortValidateInterruptPriority+0x5e>
 8007cfe:	f04f 0320 	mov.w	r3, #32
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	e7fe      	b.n	8007d10 <vPortValidateInterruptPriority+0x5c>
	}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	e000e3f0 	.word	0xe000e3f0
 8007d24:	200003b4 	.word	0x200003b4
 8007d28:	e000ed0c 	.word	0xe000ed0c
 8007d2c:	200003b8 	.word	0x200003b8

08007d30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08a      	sub	sp, #40	; 0x28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d3c:	f7fe ffd8 	bl	8006cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d40:	4b57      	ldr	r3, [pc, #348]	; (8007ea0 <pvPortMalloc+0x170>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d48:	f000 f90c 	bl	8007f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d4c:	4b55      	ldr	r3, [pc, #340]	; (8007ea4 <pvPortMalloc+0x174>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 808c 	bne.w	8007e72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01c      	beq.n	8007d9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007d60:	2208      	movs	r2, #8
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d013      	beq.n	8007d9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f023 0307 	bic.w	r3, r3, #7
 8007d78:	3308      	adds	r3, #8
 8007d7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <pvPortMalloc+0x6a>
 8007d86:	f04f 0320 	mov.w	r3, #32
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e7fe      	b.n	8007d98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d068      	beq.n	8007e72 <pvPortMalloc+0x142>
 8007da0:	4b41      	ldr	r3, [pc, #260]	; (8007ea8 <pvPortMalloc+0x178>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d863      	bhi.n	8007e72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007daa:	4b40      	ldr	r3, [pc, #256]	; (8007eac <pvPortMalloc+0x17c>)
 8007dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dae:	4b3f      	ldr	r3, [pc, #252]	; (8007eac <pvPortMalloc+0x17c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007db4:	e004      	b.n	8007dc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d903      	bls.n	8007dd2 <pvPortMalloc+0xa2>
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f1      	bne.n	8007db6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dd2:	4b33      	ldr	r3, [pc, #204]	; (8007ea0 <pvPortMalloc+0x170>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d04a      	beq.n	8007e72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2208      	movs	r2, #8
 8007de2:	4413      	add	r3, r2
 8007de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	1ad2      	subs	r2, r2, r3
 8007df6:	2308      	movs	r3, #8
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d91e      	bls.n	8007e3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4413      	add	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <pvPortMalloc+0xf4>
 8007e10:	f04f 0320 	mov.w	r3, #32
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e7fe      	b.n	8007e22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e36:	69b8      	ldr	r0, [r7, #24]
 8007e38:	f000 f8f6 	bl	8008028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <pvPortMalloc+0x178>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <pvPortMalloc+0x178>)
 8007e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e4a:	4b17      	ldr	r3, [pc, #92]	; (8007ea8 <pvPortMalloc+0x178>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <pvPortMalloc+0x180>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d203      	bcs.n	8007e5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <pvPortMalloc+0x178>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <pvPortMalloc+0x180>)
 8007e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <pvPortMalloc+0x174>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e72:	f7fe ff4b 	bl	8006d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <pvPortMalloc+0x164>
 8007e80:	f04f 0320 	mov.w	r3, #32
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e7fe      	b.n	8007e92 <pvPortMalloc+0x162>
	return pvReturn;
 8007e94:	69fb      	ldr	r3, [r7, #28]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3728      	adds	r7, #40	; 0x28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200023c4 	.word	0x200023c4
 8007ea4:	200023d0 	.word	0x200023d0
 8007ea8:	200023c8 	.word	0x200023c8
 8007eac:	200023bc 	.word	0x200023bc
 8007eb0:	200023cc 	.word	0x200023cc

08007eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d046      	beq.n	8007f54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	425b      	negs	r3, r3
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4413      	add	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <vPortFree+0xa8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4013      	ands	r3, r2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d109      	bne.n	8007ef6 <vPortFree+0x42>
 8007ee2:	f04f 0320 	mov.w	r3, #32
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e7fe      	b.n	8007ef4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <vPortFree+0x5e>
 8007efe:	f04f 0320 	mov.w	r3, #32
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60bb      	str	r3, [r7, #8]
 8007f10:	e7fe      	b.n	8007f10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <vPortFree+0xa8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d019      	beq.n	8007f54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d115      	bne.n	8007f54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <vPortFree+0xa8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	43db      	mvns	r3, r3
 8007f32:	401a      	ands	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f38:	f7fe feda 	bl	8006cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <vPortFree+0xac>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4413      	add	r3, r2
 8007f46:	4a06      	ldr	r2, [pc, #24]	; (8007f60 <vPortFree+0xac>)
 8007f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f4a:	6938      	ldr	r0, [r7, #16]
 8007f4c:	f000 f86c 	bl	8008028 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f50:	f7fe fedc 	bl	8006d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	200023d0 	.word	0x200023d0
 8007f60:	200023c8 	.word	0x200023c8

08007f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f70:	4b27      	ldr	r3, [pc, #156]	; (8008010 <prvHeapInit+0xac>)
 8007f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3307      	adds	r3, #7
 8007f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0307 	bic.w	r3, r3, #7
 8007f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <prvHeapInit+0xac>)
 8007f94:	4413      	add	r3, r2
 8007f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f9c:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <prvHeapInit+0xb0>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <prvHeapInit+0xb0>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4413      	add	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0307 	bic.w	r3, r3, #7
 8007fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	; (8008018 <prvHeapInit+0xb4>)
 8007fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <prvHeapInit+0xb4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <prvHeapInit+0xb4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <prvHeapInit+0xb4>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	; (800801c <prvHeapInit+0xb8>)
 8007ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	4a09      	ldr	r2, [pc, #36]	; (8008020 <prvHeapInit+0xbc>)
 8007ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ffc:	4b09      	ldr	r3, [pc, #36]	; (8008024 <prvHeapInit+0xc0>)
 8007ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008002:	601a      	str	r2, [r3, #0]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	200003bc 	.word	0x200003bc
 8008014:	200023bc 	.word	0x200023bc
 8008018:	200023c4 	.word	0x200023c4
 800801c:	200023cc 	.word	0x200023cc
 8008020:	200023c8 	.word	0x200023c8
 8008024:	200023d0 	.word	0x200023d0

08008028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008030:	4b28      	ldr	r3, [pc, #160]	; (80080d4 <prvInsertBlockIntoFreeList+0xac>)
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e002      	b.n	800803c <prvInsertBlockIntoFreeList+0x14>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d8f7      	bhi.n	8008036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d108      	bne.n	800806a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	441a      	add	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d118      	bne.n	80080b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d00d      	beq.n	80080a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	441a      	add	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e008      	b.n	80080b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvInsertBlockIntoFreeList+0xb0>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e003      	b.n	80080b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d002      	beq.n	80080c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	200023bc 	.word	0x200023bc
 80080d8:	200023c4 	.word	0x200023c4

080080dc <__libc_init_array>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4e0d      	ldr	r6, [pc, #52]	; (8008114 <__libc_init_array+0x38>)
 80080e0:	4c0d      	ldr	r4, [pc, #52]	; (8008118 <__libc_init_array+0x3c>)
 80080e2:	1ba4      	subs	r4, r4, r6
 80080e4:	10a4      	asrs	r4, r4, #2
 80080e6:	2500      	movs	r5, #0
 80080e8:	42a5      	cmp	r5, r4
 80080ea:	d109      	bne.n	8008100 <__libc_init_array+0x24>
 80080ec:	4e0b      	ldr	r6, [pc, #44]	; (800811c <__libc_init_array+0x40>)
 80080ee:	4c0c      	ldr	r4, [pc, #48]	; (8008120 <__libc_init_array+0x44>)
 80080f0:	f000 f82c 	bl	800814c <_init>
 80080f4:	1ba4      	subs	r4, r4, r6
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	2500      	movs	r5, #0
 80080fa:	42a5      	cmp	r5, r4
 80080fc:	d105      	bne.n	800810a <__libc_init_array+0x2e>
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008104:	4798      	blx	r3
 8008106:	3501      	adds	r5, #1
 8008108:	e7ee      	b.n	80080e8 <__libc_init_array+0xc>
 800810a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800810e:	4798      	blx	r3
 8008110:	3501      	adds	r5, #1
 8008112:	e7f2      	b.n	80080fa <__libc_init_array+0x1e>
 8008114:	08008280 	.word	0x08008280
 8008118:	08008280 	.word	0x08008280
 800811c:	08008280 	.word	0x08008280
 8008120:	08008284 	.word	0x08008284

08008124 <memcpy>:
 8008124:	b510      	push	{r4, lr}
 8008126:	1e43      	subs	r3, r0, #1
 8008128:	440a      	add	r2, r1
 800812a:	4291      	cmp	r1, r2
 800812c:	d100      	bne.n	8008130 <memcpy+0xc>
 800812e:	bd10      	pop	{r4, pc}
 8008130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008138:	e7f7      	b.n	800812a <memcpy+0x6>

0800813a <memset>:
 800813a:	4402      	add	r2, r0
 800813c:	4603      	mov	r3, r0
 800813e:	4293      	cmp	r3, r2
 8008140:	d100      	bne.n	8008144 <memset+0xa>
 8008142:	4770      	bx	lr
 8008144:	f803 1b01 	strb.w	r1, [r3], #1
 8008148:	e7f9      	b.n	800813e <memset+0x4>
	...

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
