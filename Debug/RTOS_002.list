
RTOS_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f3c  08008f3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008f3c  08008f3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f3c  08008f3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f40  08008f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002628  20000010  08008f54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002638  08008f54  00022638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001579f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc6  00000000  00000000  000357df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  000383a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  000395b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a01  00000000  00000000  0003a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f69a  00000000  00000000  0005c0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1e2c  00000000  00000000  0006b73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c64  00000000  00000000  0013d5e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dfc 	.word	0x08008dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08008dfc 	.word	0x08008dfc

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <vApplicationGetIdleTaskMemory+0x30>)
 8000a32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2000002c 	.word	0x2000002c
 8000a4c:	20000088 	.word	0x20000088

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b0ae      	sub	sp, #184	; 0xb8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f001 f8c5 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f8cd 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 fa67 	bl	8000f30 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a62:	f000 f9af 	bl	8000dc4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000a66:	f000 f92b 	bl	8000cc0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a6a:	f000 fa31 	bl	8000ed0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexEncoder */
  osMutexDef(MutexEncoder);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  MutexEncoderHandle = osMutexCreate(osMutex(MutexEncoder));
 8000a7a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fa6c 	bl	8005f5c <osMutexCreate>
 8000a84:	4602      	mov	r2, r0
 8000a86:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <main+0x164>)
 8000a88:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem1 */
  osSemaphoreDef(binSem1);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  binSem1Handle = osSemaphoreCreate(osSemaphore(binSem1), 1);
 8000a96:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fa75 	bl	8005f8c <osSemaphoreCreate>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <main+0x168>)
 8000aa6:	601a      	str	r2, [r3, #0]

  /* definition and creation of BinSemPWM */
  osSemaphoreDef(BinSemPWM);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  BinSemPWMHandle = osSemaphoreCreate(osSemaphore(BinSemPWM), 1);
 8000ab4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4618      	mov	r0, r3
 8000abc:	f005 fa66 	bl	8005f8c <osSemaphoreCreate>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <main+0x16c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueUARTSend */
  osMessageQDef(QueueUARTSend, 32, UART_DATA_SEND_t);
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <main+0x170>)
 8000ac8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueUARTSendHandle = osMessageCreate(osMessageQ(QueueUARTSend), NULL);
 8000ad2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f005 fc0f 	bl	80062fc <osMessageCreate>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <main+0x174>)
 8000ae2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueUARTSndHandle = osMailCreate(osMailQ(QueueUARTSnd), NULL);      // create mail queue
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <main+0x178>)
 8000ae8:	f005 fc31 	bl	800634e <osMailCreate>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <main+0x17c>)
 8000af0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskVelRef */
  osThreadDef(TaskVelRef, TaskVelRef_App, osPriorityHigh, 0, 128);
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <main+0x180>)
 8000af4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000af8:	461d      	mov	r5, r3
 8000afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskVelRefHandle = osThreadCreate(osThread(TaskVelRef), NULL);
 8000b06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f005 f9c5 	bl	8005e9c <osThreadCreate>
 8000b12:	4602      	mov	r2, r0
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <main+0x184>)
 8000b16:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskControl */
  osThreadDef(TaskControl, TaskControl_App, osPriorityAboveNormal, 0, 128);
 8000b18:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <main+0x188>)
 8000b1a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControlHandle = osThreadCreate(osThread(TaskControl), NULL);
 8000b2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 f9b2 	bl	8005e9c <osThreadCreate>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <main+0x18c>)
 8000b3c:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskPWM */
  osThreadDef(TaskPWM, TaskPWM_App, osPriorityAboveNormal, 0, 128);
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <main+0x190>)
 8000b40:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b44:	461d      	mov	r5, r3
 8000b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPWMHandle = osThreadCreate(osThread(TaskPWM), NULL);
 8000b52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 f99f 	bl	8005e9c <osThreadCreate>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <main+0x194>)
 8000b62:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskMotorSpeed */
  osThreadDef(TaskMotorSpeed, TaskMotorSpeed_App, osPriorityHigh, 0, 128);
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <main+0x198>)
 8000b66:	f107 0420 	add.w	r4, r7, #32
 8000b6a:	461d      	mov	r5, r3
 8000b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorSpeedHandle = osThreadCreate(osThread(TaskMotorSpeed), NULL);
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f005 f98c 	bl	8005e9c <osThreadCreate>
 8000b84:	4602      	mov	r2, r0
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <main+0x19c>)
 8000b88:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskUartSend */
  osThreadDef(TaskUartSend, TaskUartSend_App, osPriorityBelowNormal, 0, 128);
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <main+0x1a0>)
 8000b8c:	1d3c      	adds	r4, r7, #4
 8000b8e:	461d      	mov	r5, r3
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUartSendHandle = osThreadCreate(osThread(TaskUartSend), NULL);
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 f97b 	bl	8005e9c <osThreadCreate>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <main+0x1a4>)
 8000baa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bac:	f005 f96f 	bl	8005e8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x160>
 8000bb2:	bf00      	nop
 8000bb4:	200023e0 	.word	0x200023e0
 8000bb8:	200023d8 	.word	0x200023d8
 8000bbc:	20002468 	.word	0x20002468
 8000bc0:	08008e14 	.word	0x08008e14
 8000bc4:	2000245c 	.word	0x2000245c
 8000bc8:	08008ef8 	.word	0x08008ef8
 8000bcc:	200025e4 	.word	0x200025e4
 8000bd0:	08008e30 	.word	0x08008e30
 8000bd4:	20002464 	.word	0x20002464
 8000bd8:	08008e58 	.word	0x08008e58
 8000bdc:	20002540 	.word	0x20002540
 8000be0:	08008e7c 	.word	0x08008e7c
 8000be4:	20002460 	.word	0x20002460
 8000be8:	08008ea8 	.word	0x08008ea8
 8000bec:	200025e0 	.word	0x200025e0
 8000bf0:	08008ed4 	.word	0x08008ed4
 8000bf4:	200023d4 	.word	0x200023d4

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0a6      	sub	sp, #152	; 0x98
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 f8ef 	bl	8008dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2258      	movs	r2, #88	; 0x58
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f008 f8e1 	bl	8008dea <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c30:	2310      	movs	r3, #16
 8000c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 faae 	bl	80021b8 <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c62:	f000 fdf1 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c80:	2102      	movs	r1, #2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f9ae 	bl	8002fe4 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c8e:	f000 fddb 	bl	8001848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SystemClock_Config+0xc4>)
 8000c94:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fc05 	bl	80034b4 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000cb0:	f000 fdca 	bl	8001848 <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3798      	adds	r7, #152	; 0x98
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	00201002 	.word	0x00201002

08000cc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cec:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000cee:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <MX_TIM1_Init+0x100>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000cf4:	2248      	movs	r2, #72	; 0x48
 8000cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d1a:	f002 fde9 	bl	80038f0 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000d24:	f000 fd90 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	4619      	mov	r1, r3
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d36:	f003 fd15 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d40:	f000 fd82 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d44:	481d      	ldr	r0, [pc, #116]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d46:	f003 f8a5 	bl	8003e94 <HAL_TIM_IC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d50:	f000 fd7a 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4815      	ldr	r0, [pc, #84]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d68:	f004 fba0 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000d72:	f000 fd69 	bl	8001848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000d8e:	f003 fb44 	bl	800441a <HAL_TIM_IC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000d98:	f000 fd56 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2204      	movs	r2, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_TIM1_Init+0xfc>)
 8000da4:	f003 fb39 	bl	800441a <HAL_TIM_IC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000dae:	f000 fd4b 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20002470 	.word	0x20002470
 8000dc0:	40012c00 	.word	0x40012c00

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000df8:	4a34      	ldr	r2, [pc, #208]	; (8000ecc <MX_TIM3_Init+0x108>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e0a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e1c:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e1e:	f002 fd67 	bl	80038f0 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e28:	f000 fd0e 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e3a:	f003 fc93 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e44:	f000 fd00 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e4a:	f002 fe19 	bl	8003a80 <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e54:	f000 fcf8 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e68:	f004 fb20 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e72:	f000 fce9 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1200;
 8000e7a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000e90:	f003 fb58 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e9a:	f000 fcd5 	bl	8001848 <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 8000e9e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000ea2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000eac:	f003 fb4a 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000eb6:	f000 fcc7 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_TIM3_Init+0x104>)
 8000ebc:	f000 fd50 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000ec0:	bf00      	nop
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200023e4 	.word	0x200023e4
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_USART2_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f14:	f004 fb74 	bl	8005600 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 fc93 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200024bc 	.word	0x200024bc
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a35      	ldr	r2, [pc, #212]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MotorA_INA_Pin|MotorA_INB_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f001 f8d2 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_GPIO_Init+0xf4>)
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4817      	ldr	r0, [pc, #92]	; (8001028 <MX_GPIO_Init+0xf8>)
 8000fca:	f000 ff23 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_DIR_Pin */
  GPIO_InitStruct.Pin = PIN_DIR_Pin;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_DIR_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_GPIO_Init+0xf8>)
 8000fe2:	f000 ff17 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MotorA_INA_Pin MotorA_INB_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MotorA_INA_Pin|MotorA_INB_Pin;
 8000fe6:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f000 ff07 	bl	8001e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2102      	movs	r1, #2
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	f000 fed8 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f000 fef1 	bl	8001df8 <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	10210000 	.word	0x10210000
 8001028:	48000800 	.word	0x48000800

0800102c <set_PWM>:

/* USER CODE BEGIN 4 */
void set_PWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint32_t pulse)
{
 800102c:	b084      	sub	sp, #16
 800102e:	b580      	push	{r7, lr}
 8001030:	b088      	sub	sp, #32
 8001032:	af00      	add	r7, sp, #0
 8001034:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001038:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_TIM_PWM_Stop(&timer,channel);
 800103c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800103e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001042:	f002 fe8b 	bl	8003d5c <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC;
    timer.Init.Period = period;
 8001046:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_TIM_PWM_Init(&timer);
 800104c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001050:	f002 fd16 	bl	8003a80 <HAL_TIM_PWM_Init>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = pulse;
 8001058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800105a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&timer,&sConfigOC,channel);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001068:	4619      	mov	r1, r3
 800106a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106e:	f003 fa69 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>

    HAL_TIM_PWM_Start(&timer,channel);
 8001072:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001074:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001078:	f002 fd64 	bl	8003b44 <HAL_TIM_PWM_Start>
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001086:	b004      	add	sp, #16
 8001088:	4770      	bx	lr
	...

0800108c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7f1b      	ldrb	r3, [r3, #28]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d14b      	bne.n	8001134 <HAL_TIM_IC_CaptureCallback+0xa8>
	{
		if(HAL_GPIO_ReadPin(PIN_DIR_GPIO_Port,PIN_DIR_Pin ) == 1)
 800109c:	2104      	movs	r1, #4
 800109e:	4848      	ldr	r0, [pc, #288]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010a0:	f001 f842 	bl	8002128 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <HAL_TIM_IC_CaptureCallback+0x26>
		{
			MotorA_EncA.direction = -1;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	759a      	strb	r2, [r3, #22]
 80010b0:	e002      	b.n	80010b8 <HAL_TIM_IC_CaptureCallback+0x2c>
		}
		else
		{
			MotorA_EncA.direction = 1;
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	759a      	strb	r2, [r3, #22]
		}

		if(MotorA_EncA.Is_First_Captured==0)
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			MotorA_EncA.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010c2:	2100      	movs	r1, #0
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f003 fc07 	bl	80048d8 <HAL_TIM_ReadCapturedValue>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010ce:	605a      	str	r2, [r3, #4]
			MotorA_EncA.Is_First_Captured = 1;
 80010d0:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e026      	b.n	8001126 <HAL_TIM_IC_CaptureCallback+0x9a>
		}
		else if(MotorA_EncA.Is_First_Captured)
 80010d8:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d021      	beq.n	8001126 <HAL_TIM_IC_CaptureCallback+0x9a>
		{
			MotorA_EncA.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010e2:	2100      	movs	r1, #0
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f003 fbf7 	bl	80048d8 <HAL_TIM_ReadCapturedValue>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010ee:	609a      	str	r2, [r3, #8]
			if(MotorA_EncA.IC_Value2 > MotorA_EncA.IC_Value1)
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d907      	bls.n	800110c <HAL_TIM_IC_CaptureCallback+0x80>
			{
				MotorA_EncA.Period = MotorA_EncA.IC_Value2 - MotorA_EncA.IC_Value1;
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001108:	60d3      	str	r3, [r2, #12]
 800110a:	e009      	b.n	8001120 <HAL_TIM_IC_CaptureCallback+0x94>
			}
			else
			{
				MotorA_EncA.Period = MotorA_EncA.IC_Value2+65535 - MotorA_EncA.IC_Value1;
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800111a:	33ff      	adds	r3, #255	; 0xff
 800111c:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 800111e:	60d3      	str	r3, [r2, #12]
			}
			//MotorA_EncA.Frequency = HAL_RCC_GetPCLK2Freq()/(htim->Init.Prescaler*MotorA_EncA.Period);
			//MotorA_EncA.CalculationOK = 1;
			MotorA_EncA.Is_First_Captured = 0;
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]

		}
		MotorA_EncA.cont++;
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001128:	7d5b      	ldrb	r3, [r3, #21]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001132:	755a      	strb	r2, [r3, #21]
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7f1b      	ldrb	r3, [r3, #28]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d13d      	bne.n	80011b8 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		if(MotorA_EncB.Is_First_Captured==0)
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10a      	bne.n	800115c <HAL_TIM_IC_CaptureCallback+0xd0>
		{
			MotorA_EncB.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001146:	2104      	movs	r1, #4
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f003 fbc5 	bl	80048d8 <HAL_TIM_ReadCapturedValue>
 800114e:	4602      	mov	r2, r0
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001152:	605a      	str	r2, [r3, #4]
			MotorA_EncB.Is_First_Captured = 1;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e026      	b.n	80011aa <HAL_TIM_IC_CaptureCallback+0x11e>
		}
		else if(MotorA_EncB.Is_First_Captured)
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d021      	beq.n	80011aa <HAL_TIM_IC_CaptureCallback+0x11e>
		{
			MotorA_EncB.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001166:	2104      	movs	r1, #4
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f003 fbb5 	bl	80048d8 <HAL_TIM_ReadCapturedValue>
 800116e:	4602      	mov	r2, r0
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001172:	609a      	str	r2, [r3, #8]
			if(MotorA_EncB.IC_Value2 > MotorA_EncB.IC_Value1)
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	d907      	bls.n	8001190 <HAL_TIM_IC_CaptureCallback+0x104>
			{
				MotorA_EncB.Period = MotorA_EncB.IC_Value2 - MotorA_EncB.IC_Value1;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800118c:	60d3      	str	r3, [r2, #12]
 800118e:	e009      	b.n	80011a4 <HAL_TIM_IC_CaptureCallback+0x118>
			}
			else
			{
				MotorA_EncB.Period = MotorA_EncB.IC_Value2+65535 - MotorA_EncB.IC_Value1;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800119e:	33ff      	adds	r3, #255	; 0xff
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011a2:	60d3      	str	r3, [r2, #12]
			}
			// Freq = (FreqCKL/(PreScaler*Nticks))
			//MotorA_EncB.Frequency = HAL_RCC_GetPCLK2Freq()/(htim->Init.Prescaler*MotorA_EncB.Period);
			//MotorA_EncB.CalculationOK = 1;
			MotorA_EncB.Is_First_Captured = 0;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

		}
		MotorA_EncB.cont++;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011ac:	7d5b      	ldrb	r3, [r3, #21]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011b6:	755a      	strb	r2, [r3, #21]
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	48000800 	.word	0x48000800
 80011c4:	20002544 	.word	0x20002544
 80011c8:	20002444 	.word	0x20002444

080011cc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	80fb      	strh	r3, [r7, #6]
	if(B1_Pin == GPIO_Pin)
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011dc:	d104      	bne.n	80011e8 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(binSem1Handle);
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 ff54 	bl	8006090 <osSemaphoreRelease>

	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200023d8 	.word	0x200023d8

080011f4 <TaskVelRef_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskVelRef_App */
void TaskVelRef_App(void const * argument)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  MC.ready = 1;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <TaskVelRef_App+0xc0>)
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2120      	movs	r1, #32
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f000 ffa4 	bl	8002158 <HAL_GPIO_WritePin>
  for(;;)
  {
	  if(!MC.ready)
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <TaskVelRef_App+0xc0>)
 8001212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <TaskVelRef_App+0x36>
	  {
		  osSemaphoreWait(binSem1Handle, osWaitForever);
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <TaskVelRef_App+0xc4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	4618      	mov	r0, r3
 8001226:	f004 fee5 	bl	8005ff4 <osSemaphoreWait>
	  }
	  MC.ready=1;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <TaskVelRef_App+0xc0>)
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2120      	movs	r1, #32
 8001236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123a:	f000 ff8d 	bl	8002158 <HAL_GPIO_WritePin>
	  for(uint8_t cont = 0; cont <=3 ; cont++ )
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e013      	b.n	800126c <TaskVelRef_App+0x78>
	  {
		MC.speedRef = (300+cont*50);
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2232      	movs	r2, #50	; 0x32
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <TaskVelRef_App+0xc0>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
		osDelay(3000);
 800125e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001262:	f004 fe67 	bl	8005f34 <osDelay>
	  for(uint8_t cont = 0; cont <=3 ; cont++ )
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	3301      	adds	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d9e8      	bls.n	8001244 <TaskVelRef_App+0x50>
	  }
	  for(int8_t cont = 2; cont >=1 ; cont-- )
 8001272:	2302      	movs	r3, #2
 8001274:	73bb      	strb	r3, [r7, #14]
 8001276:	e017      	b.n	80012a8 <TaskVelRef_App+0xb4>
	  {
		MC.speedRef = (300+cont*50);
 8001278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800127c:	2232      	movs	r2, #50	; 0x32
 800127e:	fb02 f303 	mul.w	r3, r2, r3
 8001282:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <TaskVelRef_App+0xc0>)
 8001290:	edc3 7a00 	vstr	s15, [r3]
		osDelay(3000);
 8001294:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001298:	f004 fe4c 	bl	8005f34 <osDelay>
	  for(int8_t cont = 2; cont >=1 ; cont-- )
 800129c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	73bb      	strb	r3, [r7, #14]
 80012a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dce3      	bgt.n	8001278 <TaskVelRef_App+0x84>
	  if(!MC.ready)
 80012b0:	e7ae      	b.n	8001210 <TaskVelRef_App+0x1c>
 80012b2:	bf00      	nop
 80012b4:	2000255c 	.word	0x2000255c
 80012b8:	200023d8 	.word	0x200023d8
 80012bc:	00000000 	.word	0x00000000

080012c0 <TaskControl_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskControl_App */
void TaskControl_App(void const * argument)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskControl_App */
	//-- Initialize structure
	MC.MotorA_speed = 0;
 80012c8:	4b95      	ldr	r3, [pc, #596]	; (8001520 <TaskControl_App+0x260>)
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	MC.MotorB_speed = 0;
 80012d0:	4b93      	ldr	r3, [pc, #588]	; (8001520 <TaskControl_App+0x260>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
	for(int8_t cont = 0;cont<PID_COEF_LEN;cont++)
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e019      	b.n	8001312 <TaskControl_App+0x52>
	{
		MC.PID_MA.x_n[cont] = 0;
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4a8f      	ldr	r2, [pc, #572]	; (8001520 <TaskControl_App+0x260>)
 80012e4:	330c      	adds	r3, #12
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3308      	adds	r3, #8
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
		MC.PID_MA.y_n[cont] = 0;
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4a8a      	ldr	r2, [pc, #552]	; (8001520 <TaskControl_App+0x260>)
 80012f8:	330a      	adds	r3, #10
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3304      	adds	r3, #4
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
	for(int8_t cont = 0;cont<PID_COEF_LEN;cont++)
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	2b02      	cmp	r3, #2
 8001318:	dde1      	ble.n	80012de <TaskControl_App+0x1e>
	}
	MC.speedRef=0;
 800131a:	4b81      	ldr	r3, [pc, #516]	; (8001520 <TaskControl_App+0x260>)
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
	MC.errorA=0;
 8001322:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <TaskControl_App+0x260>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
	MC.errorB=0;
 800132a:	4b7d      	ldr	r3, [pc, #500]	; (8001520 <TaskControl_App+0x260>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
	//MC.PID_MA.b[1] = 0.0075;
	//MC.PID_MA.b[2] = -0.117;

	//******* PID --> Para Ts 5ms  **************

	MC.PID_MA.K = 0.7;
 8001332:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <TaskControl_App+0x260>)
 8001334:	4a7b      	ldr	r2, [pc, #492]	; (8001524 <TaskControl_App+0x264>)
 8001336:	645a      	str	r2, [r3, #68]	; 0x44
	MC.PID_MA.a[0] = 1;
 8001338:	4b79      	ldr	r3, [pc, #484]	; (8001520 <TaskControl_App+0x260>)
 800133a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800133e:	615a      	str	r2, [r3, #20]
	MC.PID_MA.a[1] = 1.296;
 8001340:	4b77      	ldr	r3, [pc, #476]	; (8001520 <TaskControl_App+0x260>)
 8001342:	4a79      	ldr	r2, [pc, #484]	; (8001528 <TaskControl_App+0x268>)
 8001344:	619a      	str	r2, [r3, #24]
	MC.PID_MA.a[2] = -0.296;
 8001346:	4b76      	ldr	r3, [pc, #472]	; (8001520 <TaskControl_App+0x260>)
 8001348:	4a78      	ldr	r2, [pc, #480]	; (800152c <TaskControl_App+0x26c>)
 800134a:	61da      	str	r2, [r3, #28]
	MC.PID_MA.b[0] = 0.599*MC.PID_MA.K;
 800134c:	4b74      	ldr	r3, [pc, #464]	; (8001520 <TaskControl_App+0x260>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8a9 	bl	80004a8 <__aeabi_f2d>
 8001356:	a36c      	add	r3, pc, #432	; (adr r3, 8001508 <TaskControl_App+0x248>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f8fc 	bl	8000558 <__aeabi_dmul>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4618      	mov	r0, r3
 8001366:	4621      	mov	r1, r4
 8001368:	f7ff fb08 	bl	800097c <__aeabi_d2f>
 800136c:	4602      	mov	r2, r0
 800136e:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <TaskControl_App+0x260>)
 8001370:	621a      	str	r2, [r3, #32]
	MC.PID_MA.b[1] = 0.1553*MC.PID_MA.K;
 8001372:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <TaskControl_App+0x260>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f896 	bl	80004a8 <__aeabi_f2d>
 800137c:	a364      	add	r3, pc, #400	; (adr r3, 8001510 <TaskControl_App+0x250>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f8e9 	bl	8000558 <__aeabi_dmul>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	4618      	mov	r0, r3
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff faf5 	bl	800097c <__aeabi_d2f>
 8001392:	4602      	mov	r2, r0
 8001394:	4b62      	ldr	r3, [pc, #392]	; (8001520 <TaskControl_App+0x260>)
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	MC.PID_MA.b[2] = -0.444*MC.PID_MA.K;
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <TaskControl_App+0x260>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f883 	bl	80004a8 <__aeabi_f2d>
 80013a2:	a35d      	add	r3, pc, #372	; (adr r3, 8001518 <TaskControl_App+0x258>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f8d6 	bl	8000558 <__aeabi_dmul>
 80013ac:	4603      	mov	r3, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	4618      	mov	r0, r3
 80013b2:	4621      	mov	r1, r4
 80013b4:	f7ff fae2 	bl	800097c <__aeabi_d2f>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b59      	ldr	r3, [pc, #356]	; (8001520 <TaskControl_App+0x260>)
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
	MC.PID_MA.b[0] = 0.6277*MC.PID_MA.K;
	MC.PID_MA.b[1] = 0.034*MC.PID_MA.K;
	MC.PID_MA.b[2] = 0;*/


	osDelay(10);
 80013be:	200a      	movs	r0, #10
 80013c0:	f004 fdb8 	bl	8005f34 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  if(MC.ready)
 80013c4:	4b56      	ldr	r3, [pc, #344]	; (8001520 <TaskControl_App+0x260>)
 80013c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8095 	beq.w	80014fc <TaskControl_App+0x23c>
	  {
		  osDelay(5);
 80013d2:	2005      	movs	r0, #5
 80013d4:	f004 fdae 	bl	8005f34 <osDelay>
		  //-- Armo la señal de error
		  MC.errorA = MC.speedRef - MC.MotorA_speed*60;
 80013d8:	4b51      	ldr	r3, [pc, #324]	; (8001520 <TaskControl_App+0x260>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4b50      	ldr	r3, [pc, #320]	; (8001520 <TaskControl_App+0x260>)
 80013e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e4:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001530 <TaskControl_App+0x270>
 80013e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <TaskControl_App+0x260>)
 80013f2:	edc3 7a03 	vstr	s15, [r3, #12]

		  //*********************        Utilizando PID       *****************************************
		  //*******************************************************************************************
		  //-- Realizo el corrimiento de los coeficientes del PID
		  for(int8_t i = PID_COEF_LEN-2 ; i>=0 ; i--)
 80013f6:	2301      	movs	r3, #1
 80013f8:	73bb      	strb	r3, [r7, #14]
 80013fa:	e027      	b.n	800144c <TaskControl_App+0x18c>
		  {
			  MC.PID_MA.x_n[i+1] = MC.PID_MA.x_n[i];
 80013fc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001404:	3301      	adds	r3, #1
 8001406:	4946      	ldr	r1, [pc, #280]	; (8001520 <TaskControl_App+0x260>)
 8001408:	320c      	adds	r2, #12
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	440a      	add	r2, r1
 800140e:	3208      	adds	r2, #8
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	4943      	ldr	r1, [pc, #268]	; (8001520 <TaskControl_App+0x260>)
 8001414:	330c      	adds	r3, #12
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3308      	adds	r3, #8
 800141c:	601a      	str	r2, [r3, #0]
			  MC.PID_MA.y_n[i+1] = MC.PID_MA.y_n[i];
 800141e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	493d      	ldr	r1, [pc, #244]	; (8001520 <TaskControl_App+0x260>)
 800142a:	320a      	adds	r2, #10
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	440a      	add	r2, r1
 8001430:	3204      	adds	r2, #4
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	493a      	ldr	r1, [pc, #232]	; (8001520 <TaskControl_App+0x260>)
 8001436:	330a      	adds	r3, #10
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3304      	adds	r3, #4
 800143e:	601a      	str	r2, [r3, #0]
		  for(int8_t i = PID_COEF_LEN-2 ; i>=0 ; i--)
 8001440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dad3      	bge.n	80013fc <TaskControl_App+0x13c>
		  }
		  MC.PID_MA.x_n[0] = MC.errorA;
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <TaskControl_App+0x260>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a31      	ldr	r2, [pc, #196]	; (8001520 <TaskControl_App+0x260>)
 800145a:	6393      	str	r3, [r2, #56]	; 0x38
		  MC.PID_MA.y_n[0] = 0;
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <TaskControl_App+0x260>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
		  MC.PID_MA.y_n[0] += MC.PID_MA.b[0]*MC.PID_MA.x_n[0] ;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <TaskControl_App+0x260>)
 8001466:	ed93 7a08 	vldr	s14, [r3, #32]
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <TaskControl_App+0x260>)
 800146c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <TaskControl_App+0x260>)
 8001476:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <TaskControl_App+0x260>)
 8001480:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  for(uint8_t i = 1 ; i<=PID_COEF_LEN-1 ; i++)
 8001484:	2301      	movs	r3, #1
 8001486:	737b      	strb	r3, [r7, #13]
 8001488:	e030      	b.n	80014ec <TaskControl_App+0x22c>
		  {
			  MC.PID_MA.y_n[0] += MC.PID_MA.b[i]*MC.PID_MA.x_n[i] + MC.PID_MA.a[i]*MC.PID_MA.y_n[i];
 800148a:	7b7b      	ldrb	r3, [r7, #13]
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <TaskControl_App+0x260>)
 800148e:	3306      	adds	r3, #6
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3308      	adds	r3, #8
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	7b7b      	ldrb	r3, [r7, #13]
 800149c:	4a20      	ldr	r2, [pc, #128]	; (8001520 <TaskControl_App+0x260>)
 800149e:	330c      	adds	r3, #12
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3308      	adds	r3, #8
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <TaskControl_App+0x260>)
 80014b2:	3304      	adds	r3, #4
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <TaskControl_App+0x260>)
 80014c2:	330a      	adds	r3, #10
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <TaskControl_App+0x260>)
 80014d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <TaskControl_App+0x260>)
 80014e2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  for(uint8_t i = 1 ; i<=PID_COEF_LEN-1 ; i++)
 80014e6:	7b7b      	ldrb	r3, [r7, #13]
 80014e8:	3301      	adds	r3, #1
 80014ea:	737b      	strb	r3, [r7, #13]
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d9cb      	bls.n	800148a <TaskControl_App+0x1ca>
		  //*******************************************************************************************
		  //MC.PID_MA.y_n[0] = MC.errorA;

		  //*******************************************************************************************
		  //-- Libero la tarea encargada de activar el PWM que acciona el motor..
		  osSemaphoreRelease(BinSemPWMHandle);
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <TaskControl_App+0x274>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fdca 	bl	8006090 <osSemaphoreRelease>

	  }
	  osDelay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f004 fd19 	bl	8005f34 <osDelay>
	  if(MC.ready)
 8001502:	e75f      	b.n	80013c4 <TaskControl_App+0x104>
 8001504:	f3af 8000 	nop.w
 8001508:	0c49ba5e 	.word	0x0c49ba5e
 800150c:	3fe32b02 	.word	0x3fe32b02
 8001510:	d288ce70 	.word	0xd288ce70
 8001514:	3fc3e0de 	.word	0x3fc3e0de
 8001518:	f9db22d1 	.word	0xf9db22d1
 800151c:	bfdc6a7e 	.word	0xbfdc6a7e
 8001520:	2000255c 	.word	0x2000255c
 8001524:	3f333333 	.word	0x3f333333
 8001528:	3fa5e354 	.word	0x3fa5e354
 800152c:	be978d50 	.word	0xbe978d50
 8001530:	42700000 	.word	0x42700000
 8001534:	20002468 	.word	0x20002468

08001538 <TaskPWM_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskPWM_App */
void TaskPWM_App(void const * argument)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b095      	sub	sp, #84	; 0x54
 800153c:	af12      	add	r7, sp, #72	; 0x48
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskPWM_App */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001540:	2100      	movs	r1, #0
 8001542:	4846      	ldr	r0, [pc, #280]	; (800165c <TaskPWM_App+0x124>)
 8001544:	f002 fafe 	bl	8003b44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001548:	2104      	movs	r1, #4
 800154a:	4844      	ldr	r0, [pc, #272]	; (800165c <TaskPWM_App+0x124>)
 800154c:	f002 fafa 	bl	8003b44 <HAL_TIM_PWM_Start>
	set_PWM(htim3, TIM_CHANNEL_1, 3600, (uint16_t) 0); // -- PWM desactivado
 8001550:	4e42      	ldr	r6, [pc, #264]	; (800165c <TaskPWM_App+0x124>)
 8001552:	2300      	movs	r3, #0
 8001554:	9311      	str	r3, [sp, #68]	; 0x44
 8001556:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800155a:	9310      	str	r3, [sp, #64]	; 0x40
 800155c:	2300      	movs	r3, #0
 800155e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001560:	466d      	mov	r5, sp
 8001562:	f106 0410 	add.w	r4, r6, #16
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001572:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001576:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800157a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800157e:	f7ff fd55 	bl	800102c <set_PWM>
	HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f000 fde4 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f000 fddd 	bl	8002158 <HAL_GPIO_WritePin>
	MC.pwmMotor = 0;
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <TaskPWM_App+0x128>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(BinSemPWMHandle, osWaitForever);
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <TaskPWM_App+0x12c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f04f 31ff 	mov.w	r1, #4294967295
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fd20 	bl	8005ff4 <osSemaphoreWait>
	MC.pwmMotor = MC.PID_MA.y_n[0];
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <TaskPWM_App+0x128>)
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <TaskPWM_App+0x128>)
 80015ba:	67d3      	str	r3, [r2, #124]	; 0x7c
	if(MC.pwmMotor<=0)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <TaskPWM_App+0x128>)
 80015be:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80015c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d80e      	bhi.n	80015ea <TaskPWM_App+0xb2>
	{
		HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f000 fdbf 	bl	8002158 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f000 fdb8 	bl	8002158 <HAL_GPIO_WritePin>
 80015e8:	e00d      	b.n	8001606 <TaskPWM_App+0xce>
	}
	else
	{
		HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f000 fdb0 	bl	8002158 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f000 fda9 	bl	8002158 <HAL_GPIO_WritePin>
	}
	set_PWM(htim3, TIM_CHANNEL_1, 3600, (uint32_t) fabs((3600*MC.pwmMotor/450)  ) ); ///7.5 --Vmax 450rpm PWM
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <TaskPWM_App+0x128>)
 8001608:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800160c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001668 <TaskPWM_App+0x130>
 8001610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001614:	eddf 6a15 	vldr	s13, [pc, #84]	; 800166c <TaskPWM_App+0x134>
 8001618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161c:	eef0 7ae7 	vabs.f32	s15, s15
 8001620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001624:	ee17 3a90 	vmov	r3, s15
 8001628:	4e0c      	ldr	r6, [pc, #48]	; (800165c <TaskPWM_App+0x124>)
 800162a:	9311      	str	r3, [sp, #68]	; 0x44
 800162c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001630:	9310      	str	r3, [sp, #64]	; 0x40
 8001632:	2300      	movs	r3, #0
 8001634:	930f      	str	r3, [sp, #60]	; 0x3c
 8001636:	466d      	mov	r5, sp
 8001638:	f106 0410 	add.w	r4, r6, #16
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001648:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800164c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001650:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001654:	f7ff fcea 	bl	800102c <set_PWM>
  {
 8001658:	e7a5      	b.n	80015a6 <TaskPWM_App+0x6e>
 800165a:	bf00      	nop
 800165c:	200023e4 	.word	0x200023e4
 8001660:	2000255c 	.word	0x2000255c
 8001664:	20002468 	.word	0x20002468
 8001668:	45610000 	.word	0x45610000
 800166c:	43e10000 	.word	0x43e10000

08001670 <TaskMotorSpeed_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskMotorSpeed_App */
void TaskMotorSpeed_App(void const * argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskMotorSpeed_App */
	uint8_t contAux = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <TaskMotorSpeed_App+0xf8>)
 8001680:	f002 fc6a 	bl	8003f58 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	4838      	ldr	r0, [pc, #224]	; (8001768 <TaskMotorSpeed_App+0xf8>)
 8001688:	f002 fc66 	bl	8003f58 <HAL_TIM_IC_Start_IT>
	UART_DATA_SEND_t *dataPtr;
	MotorA_EncA.direction = 1;
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <TaskMotorSpeed_App+0xfc>)
 800168e:	2201      	movs	r2, #1
 8001690:	759a      	strb	r2, [r3, #22]
  /* Infinite loop */
  for(;;)
  {
	  //osMutexWait(MutexEncoderHandle, osWaitForever );
		if((contAux == MotorA_EncA.cont))
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <TaskMotorSpeed_App+0xfc>)
 8001694:	7d5b      	ldrb	r3, [r3, #21]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	429a      	cmp	r2, r3
 800169c:	d113      	bne.n	80016c6 <TaskMotorSpeed_App+0x56>
		{
			DataSendUart.MotorA_speed = 0;
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <TaskMotorSpeed_App+0x100>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
			MC.MotorA_speed = 0;
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <TaskMotorSpeed_App+0x104>)
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
			DataSendUart.time_stamp = (uint32_t) tickCounter;
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <TaskMotorSpeed_App+0x108>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <TaskMotorSpeed_App+0x100>)
 80016b4:	60d3      	str	r3, [r2, #12]
			DataSendUart.Period = 0;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <TaskMotorSpeed_App+0x100>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
			DataSendUart.Frequency = 0;
 80016bc:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <TaskMotorSpeed_App+0x100>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	e02b      	b.n	800171e <TaskMotorSpeed_App+0xae>
		}
		else{
			// Freq = (FreqCLK/(PreScaler*Nticks))
			// Speed = Freq/Encoder_pulses (Speed in the shaft)
			DataSendUart.MotorA_speed = (float) HAL_RCC_GetPCLK2Freq()/(htim1.Init.Prescaler*MotorA_EncA.Period*ENCODER_SHAFT_CPR);
 80016c6:	f001 fea1 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 80016ca:	ee07 0a90 	vmov	s15, r0
 80016ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <TaskMotorSpeed_App+0xf8>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a25      	ldr	r2, [pc, #148]	; (800176c <TaskMotorSpeed_App+0xfc>)
 80016d8:	68d2      	ldr	r2, [r2, #12]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	f44f 7298 	mov.w	r2, #304	; 0x130
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <TaskMotorSpeed_App+0x100>)
 80016f4:	edc3 7a00 	vstr	s15, [r3]
			//DataSendUart.MotorA_speed = DataSendUart.MotorA_speed;//*MotorA_EncA.direction;
			MC.MotorA_speed = DataSendUart.MotorA_speed;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <TaskMotorSpeed_App+0x100>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <TaskMotorSpeed_App+0x104>)
 80016fe:	6053      	str	r3, [r2, #4]
			DataSendUart.time_stamp = (uint32_t) tickCounter;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <TaskMotorSpeed_App+0x108>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <TaskMotorSpeed_App+0x100>)
 8001706:	60d3      	str	r3, [r2, #12]
			DataSendUart.Period = (uint32_t) MotorA_EncA.Period;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <TaskMotorSpeed_App+0xfc>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <TaskMotorSpeed_App+0x100>)
 800170e:	6053      	str	r3, [r2, #4]
			DataSendUart.Frequency = (float) MotorA_EncA.Frequency;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <TaskMotorSpeed_App+0xfc>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a16      	ldr	r2, [pc, #88]	; (8001770 <TaskMotorSpeed_App+0x100>)
 8001716:	6093      	str	r3, [r2, #8]
			contAux = MotorA_EncA.cont;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <TaskMotorSpeed_App+0xfc>)
 800171a:	7d5b      	ldrb	r3, [r3, #21]
 800171c:	73fb      	strb	r3, [r7, #15]
		}

		//osMutexRelease(MutexEncoderHandle);
		//dataPtr = osMailAlloc(QueueUARTSndHandle, millis5);
		dataPtr = osMailAlloc(QueueUARTSndHandle, osWaitForever );
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <TaskMotorSpeed_App+0x10c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f04f 31ff 	mov.w	r1, #4294967295
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fe69 	bl	80063fe <osMailAlloc>
 800172c:	60b8      	str	r0, [r7, #8]
		if(dataPtr != NULL)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d015      	beq.n	8001760 <TaskMotorSpeed_App+0xf0>
		{
			dataPtr->MotorA_speed = DataSendUart.MotorA_speed;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <TaskMotorSpeed_App+0x100>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	601a      	str	r2, [r3, #0]
			dataPtr->time_stamp = DataSendUart.time_stamp;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <TaskMotorSpeed_App+0x100>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60da      	str	r2, [r3, #12]
			dataPtr->reference = (float) MC.speedRef;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <TaskMotorSpeed_App+0x104>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	611a      	str	r2, [r3, #16]
			if(osMailPut(QueueUARTSndHandle, dataPtr) != osOK)
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <TaskMotorSpeed_App+0x10c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fe68 	bl	8006428 <osMailPut>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d000      	beq.n	8001760 <TaskMotorSpeed_App+0xf0>
			{
				while(1);
 800175e:	e7fe      	b.n	800175e <TaskMotorSpeed_App+0xee>
			}
		}
		osDelay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f004 fbe7 	bl	8005f34 <osDelay>
		if((contAux == MotorA_EncA.cont))
 8001766:	e794      	b.n	8001692 <TaskMotorSpeed_App+0x22>
 8001768:	20002470 	.word	0x20002470
 800176c:	20002544 	.word	0x20002544
 8001770:	20002430 	.word	0x20002430
 8001774:	2000255c 	.word	0x2000255c
 8001778:	200023dc 	.word	0x200023dc
 800177c:	200025e4 	.word	0x200025e4

08001780 <TaskUartSend_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskUartSend_App */
void TaskUartSend_App(void const * argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskUartSend_App */
  osEvent dataSEND;
  UART_DATA_SEND_t *dataPtr;
  uint8_t a=8, b=16, c=32, d=64 ;
 8001788:	2308      	movs	r3, #8
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	2310      	movs	r3, #16
 800178e:	73bb      	strb	r3, [r7, #14]
 8001790:	2320      	movs	r3, #32
 8001792:	737b      	strb	r3, [r7, #13]
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  dataSEND = osMailGet(QueueUARTSndHandle, osWaitForever);
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <TaskUartSend_App+0x90>)
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fe7d 	bl	80064a4 <osMailGet>
	  if(dataSEND.status == osEventMail){
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d1f3      	bne.n	8001798 <TaskUartSend_App+0x18>
		  dataPtr = dataSEND.value.p;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	61fb      	str	r3, [r7, #28]
		  HAL_UART_Transmit(&huart2, (uint8_t *)&a, sizeof(uint8_t), osWaitForever);
 80017b4:	f107 010f 	add.w	r1, r7, #15
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	2201      	movs	r2, #1
 80017be:	4815      	ldr	r0, [pc, #84]	; (8001814 <TaskUartSend_App+0x94>)
 80017c0:	f003 ff6c 	bl	800569c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)&b, sizeof(uint8_t), osWaitForever);
 80017c4:	f107 010e 	add.w	r1, r7, #14
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	2201      	movs	r2, #1
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <TaskUartSend_App+0x94>)
 80017d0:	f003 ff64 	bl	800569c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)&c, sizeof(uint8_t), osWaitForever);
 80017d4:	f107 010d 	add.w	r1, r7, #13
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	2201      	movs	r2, #1
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <TaskUartSend_App+0x94>)
 80017e0:	f003 ff5c 	bl	800569c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)&d, sizeof(uint8_t), osWaitForever);
 80017e4:	f107 010c 	add.w	r1, r7, #12
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	2201      	movs	r2, #1
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <TaskUartSend_App+0x94>)
 80017f0:	f003 ff54 	bl	800569c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)dataPtr, sizeof(UART_DATA_SEND_t), osWaitForever);
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2214      	movs	r2, #20
 80017fa:	69f9      	ldr	r1, [r7, #28]
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <TaskUartSend_App+0x94>)
 80017fe:	f003 ff4d 	bl	800569c <HAL_UART_Transmit>
		  osMailFree(QueueUARTSndHandle, dataPtr); // Free a memory block from a mail.
 8001802:	4b03      	ldr	r3, [pc, #12]	; (8001810 <TaskUartSend_App+0x90>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69f9      	ldr	r1, [r7, #28]
 8001808:	4618      	mov	r0, r3
 800180a:	f004 febf 	bl	800658c <osMailFree>
	  dataSEND = osMailGet(QueueUARTSndHandle, osWaitForever);
 800180e:	e7c3      	b.n	8001798 <TaskUartSend_App+0x18>
 8001810:	200025e4 	.word	0x200025e4
 8001814:	200024bc 	.word	0x200024bc

08001818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800182a:	f000 f9f1 	bl	8001c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //osMutexWait(MutexEncoderHandle, osWaitForever );
  tickCounter++;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001836:	6013      	str	r3, [r2, #0]
  //osMutexRelease(MutexEncoderHandle);
  /* USER CODE END Callback 1 */
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40001000 	.word	0x40001000
 8001844:	200023dc 	.word	0x200023dc

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6193      	str	r3, [r2, #24]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x44>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d130      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e4:	6153      	str	r3, [r2, #20]
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f2:	2303      	movs	r3, #3
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001902:	2302      	movs	r3, #2
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4812      	ldr	r0, [pc, #72]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 800190e:	f000 fa81 	bl	8001e14 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2102      	movs	r1, #2
 8001916:	201b      	movs	r0, #27
 8001918:	f000 fa52 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800191c:	201b      	movs	r0, #27
 800191e:	f000 fa6b 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001922:	e010      	b.n	8001946 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10b      	bne.n	8001946 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40012c00 	.word	0x40012c00
 8001954:	40021000 	.word	0x40021000
 8001958:	48000800 	.word	0x48000800
 800195c:	40000400 	.word	0x40000400

08001960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_TIM_MspPostInit+0x64>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d11c      	bne.n	80019bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800199a:	2350      	movs	r3, #80	; 0x50
 800199c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f000 fa2c 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x7c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d128      	bne.n	8001a40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0x80>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <HAL_UART_MspInit+0x80>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_UART_MspInit+0x80>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_UART_MspInit+0x80>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_UART_MspInit+0x80>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6153      	str	r3, [r2, #20]
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_UART_MspInit+0x80>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f000 f9ea 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40004400 	.word	0x40004400
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	2036      	movs	r0, #54	; 0x36
 8001a66:	f000 f9ab 	bl	8001dc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a6a:	2036      	movs	r0, #54	; 0x36
 8001a6c:	f000 f9c4 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_InitTick+0xa0>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_InitTick+0xa0>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	61d3      	str	r3, [r2, #28]
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_InitTick+0xa0>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a88:	f107 0210 	add.w	r2, r7, #16
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fcdc 	bl	8003450 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a98:	f001 fc96 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_InitTick+0xa4>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	3b01      	subs	r3, #1
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_InitTick+0xa8>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_InitTick+0xac>)
 8001ab4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_InitTick+0xa8>)
 8001ab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001abc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_InitTick+0xa8>)
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_InitTick+0xa8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_InitTick+0xa8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <HAL_InitTick+0xa8>)
 8001ad2:	f001 ff0d 	bl	80038f0 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d104      	bne.n	8001ae6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <HAL_InitTick+0xa8>)
 8001ade:	f001 ff5f 	bl	80039a0 <HAL_TIM_Base_Start_IT>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	200025e8 	.word	0x200025e8
 8001afc:	40001000 	.word	0x40001000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM1_CC_IRQHandler+0x10>)
 8001b3a:	f002 fb4f 	bl	80041dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20002470 	.word	0x20002470

08001b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b50:	f000 fb1a 	bl	8002188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM6_DAC_IRQHandler+0x10>)
 8001b5e:	f002 fb3d 	bl	80041dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200025e8 	.word	0x200025e8

08001b6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <SystemInit+0x20>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <SystemInit+0x20>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b96:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bac:	4c0b      	ldr	r4, [pc, #44]	; (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bba:	f7ff ffd7 	bl	8001b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f007 f8e5 	bl	8008d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc2:	f7fe ff45 	bl	8000a50 <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bd4:	08008f44 	.word	0x08008f44
  ldr r2, =_sbss
 8001bd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bdc:	20002638 	.word	0x20002638

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x28>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x28>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f8d8 	bl	8001daa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff ff28 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fe2a 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20002634 	.word	0x20002634

08001c38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20002634 	.word	0x20002634

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff4c 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd2:	f7ff ff61 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f7ff ffb1 	bl	8001d44 <NVIC_EncodePriority>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff80 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff54 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e160      	b.n	80020e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8152 	beq.w	80020e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d00b      	beq.n	8001e5c <HAL_GPIO_Init+0x48>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d007      	beq.n	8001e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e50:	2b11      	cmp	r3, #17
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0xea>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80ac 	beq.w	80020e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa0:	4a59      	ldr	r2, [pc, #356]	; (8002108 <HAL_GPIO_Init+0x2f4>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fca:	d025      	beq.n	8002018 <HAL_GPIO_Init+0x204>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	; (800210c <HAL_GPIO_Init+0x2f8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01f      	beq.n	8002014 <HAL_GPIO_Init+0x200>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4e      	ldr	r2, [pc, #312]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d019      	beq.n	8002010 <HAL_GPIO_Init+0x1fc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <HAL_GPIO_Init+0x300>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <HAL_GPIO_Init+0x1f8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_GPIO_Init+0x304>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00d      	beq.n	8002008 <HAL_GPIO_Init+0x1f4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4b      	ldr	r2, [pc, #300]	; (800211c <HAL_GPIO_Init+0x308>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <HAL_GPIO_Init+0x1f0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <HAL_GPIO_Init+0x30c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	e00c      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002000:	2307      	movs	r3, #7
 8002002:	e00a      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002004:	2305      	movs	r3, #5
 8002006:	e008      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002008:	2304      	movs	r3, #4
 800200a:	e006      	b.n	800201a <HAL_GPIO_Init+0x206>
 800200c:	2303      	movs	r3, #3
 800200e:	e004      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002010:	2302      	movs	r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002018:	2300      	movs	r3, #0
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4093      	lsls	r3, r2
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202a:	4937      	ldr	r1, [pc, #220]	; (8002108 <HAL_GPIO_Init+0x2f4>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_GPIO_Init+0x310>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800205c:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_GPIO_Init+0x310>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_GPIO_Init+0x310>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_GPIO_Init+0x310>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_GPIO_Init+0x310>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_GPIO_Init+0x310>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_GPIO_Init+0x310>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <HAL_GPIO_Init+0x310>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f47f ae97 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	40010000 	.word	0x40010000
 800210c:	48000400 	.word	0x48000400
 8002110:	48000800 	.word	0x48000800
 8002114:	48000c00 	.word	0x48000c00
 8002118:	48001000 	.word	0x48001000
 800211c:	48001400 	.word	0x48001400
 8002120:	48001800 	.word	0x48001800
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e001      	b.n	800214a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002174:	e002      	b.n	800217c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f810 	bl	80011cc <HAL_GPIO_EXTI_Callback>
  }
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80021be:	af00      	add	r7, sp, #0
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f000 bf01 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8160 	beq.w	80024a2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021e2:	4bae      	ldr	r3, [pc, #696]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d00c      	beq.n	8002208 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ee:	4bab      	ldr	r3, [pc, #684]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d159      	bne.n	80022ae <HAL_RCC_OscConfig+0xf6>
 80021fa:	4ba8      	ldr	r3, [pc, #672]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d152      	bne.n	80022ae <HAL_RCC_OscConfig+0xf6>
 8002208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800221c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_RCC_OscConfig+0x82>
 8002234:	4b99      	ldr	r3, [pc, #612]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0xae>
 800223a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800224e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002252:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002256:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002262:	4b8e      	ldr	r3, [pc, #568]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800226a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800226e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002272:	fa92 f2a2 	rbit	r2, r2
 8002276:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800227a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0220 	orr.w	r2, r2, #32
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8102 	beq.w	80024a0 <HAL_RCC_OscConfig+0x2e8>
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 80fc 	bne.w	80024a0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f000 be93 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x110>
 80022ba:	4b78      	ldr	r3, [pc, #480]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a77      	ldr	r2, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e030      	b.n	800232a <HAL_RCC_OscConfig+0x172>
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x134>
 80022d2:	4b72      	ldr	r3, [pc, #456]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a71      	ldr	r2, [pc, #452]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b6f      	ldr	r3, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01e      	b.n	800232a <HAL_RCC_OscConfig+0x172>
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0x15a>
 80022f8:	4b68      	ldr	r3, [pc, #416]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a67      	ldr	r2, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b65      	ldr	r3, [pc, #404]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a64      	ldr	r2, [pc, #400]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e00b      	b.n	800232a <HAL_RCC_OscConfig+0x172>
 8002312:	4b62      	ldr	r3, [pc, #392]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a61      	ldr	r2, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a5e      	ldr	r2, [pc, #376]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d059      	beq.n	80023e8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fc80 	bl	8001c38 <HAL_GetTick>
 8002338:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233e:	f7ff fc7b 	bl	8001c38 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d902      	bls.n	8002354 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	f000 be40 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002358:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002368:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <HAL_RCC_OscConfig+0x1ce>
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x1fa>
 8002386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800238a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800239a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023b6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80023ba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80023be:	fa92 f2a2 	rbit	r2, r2
 80023c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80023c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f042 0220 	orr.w	r2, r2, #32
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ab      	beq.n	800233e <HAL_RCC_OscConfig+0x186>
 80023e6:	e05c      	b.n	80024a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fc26 	bl	8001c38 <HAL_GetTick>
 80023ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f2:	f7ff fc21 	bl	8001c38 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d902      	bls.n	8002408 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	f000 bde6 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800241c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_RCC_OscConfig+0x282>
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x2ae>
 800243a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800244e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002452:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002456:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <HAL_RCC_OscConfig+0x2e4>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800246e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002472:	fa92 f2a2 	rbit	r2, r2
 8002476:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800247a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800247e:	fab2 f282 	clz	r2, r2
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f042 0220 	orr.w	r2, r2, #32
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f002 021f 	and.w	r2, r2, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ab      	bne.n	80023f2 <HAL_RCC_OscConfig+0x23a>
 800249a:	e002      	b.n	80024a2 <HAL_RCC_OscConfig+0x2ea>
 800249c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8170 	beq.w	8002792 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024b2:	4bd0      	ldr	r3, [pc, #832]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024be:	4bcd      	ldr	r3, [pc, #820]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d16d      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3ee>
 80024ca:	4bca      	ldr	r3, [pc, #808]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d6:	d166      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3ee>
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80024ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_RCC_OscConfig+0x350>
 8002502:	4bbc      	ldr	r3, [pc, #752]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x378>
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002520:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800252c:	4bb1      	ldr	r3, [pc, #708]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2202      	movs	r2, #2
 8002532:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002536:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800253a:	fa92 f2a2 	rbit	r2, r2
 800253e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002542:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0220 	orr.w	r2, r2, #32
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_RCC_OscConfig+0x3ba>
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f000 bd31 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4ba0      	ldr	r3, [pc, #640]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	21f8      	movs	r1, #248	; 0xf8
 8002582:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800258a:	fa91 f1a1 	rbit	r1, r1
 800258e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002592:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002596:	fab1 f181 	clz	r1, r1
 800259a:	b2c9      	uxtb	r1, r1
 800259c:	408b      	lsls	r3, r1
 800259e:	4995      	ldr	r1, [pc, #596]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a4:	e0f5      	b.n	8002792 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8085 	beq.w	80026bc <HAL_RCC_OscConfig+0x504>
 80025b2:	2301      	movs	r3, #1
 80025b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80025c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	461a      	mov	r2, r3
 80025da:	2301      	movs	r3, #1
 80025dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fb2b 	bl	8001c38 <HAL_GetTick>
 80025e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff fb26 	bl	8001c38 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d902      	bls.n	80025fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f000 bceb 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002610:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x476>
 8002628:	4b72      	ldr	r3, [pc, #456]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e013      	b.n	8002656 <HAL_RCC_OscConfig+0x49e>
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002646:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002652:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2202      	movs	r2, #2
 8002658:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800265c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002660:	fa92 f2a2 	rbit	r2, r2
 8002664:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002668:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0220 	orr.w	r2, r2, #32
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0af      	beq.n	80025e8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	21f8      	movs	r1, #248	; 0xf8
 8002698:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80026a0:	fa91 f1a1 	rbit	r1, r1
 80026a4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80026a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026ac:	fab1 f181 	clz	r1, r1
 80026b0:	b2c9      	uxtb	r1, r1
 80026b2:	408b      	lsls	r3, r1
 80026b4:	494f      	ldr	r1, [pc, #316]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e06a      	b.n	8002792 <HAL_RCC_OscConfig+0x5da>
 80026bc:	2301      	movs	r3, #1
 80026be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80026ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	461a      	mov	r2, r3
 80026e4:	2300      	movs	r3, #0
 80026e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff faa6 	bl	8001c38 <HAL_GetTick>
 80026ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff faa1 	bl	8001c38 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	f000 bc66 	b.w	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800271a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x580>
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0x5a8>
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800274a:	2302      	movs	r3, #2
 800274c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002750:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800275c:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_RCC_OscConfig+0x63c>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2202      	movs	r2, #2
 8002762:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002766:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002772:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1af      	bne.n	80026f2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80da 	beq.w	8002956 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d069      	beq.n	8002880 <HAL_RCC_OscConfig+0x6c8>
 80027ac:	2301      	movs	r3, #1
 80027ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80027be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_OscConfig+0x640>)
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7ff fa2f 	bl	8001c38 <HAL_GetTick>
 80027da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e00d      	b.n	80027fc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff fa2a 	bl	8001c38 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d905      	bls.n	80027fc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e3ef      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	10908120 	.word	0x10908120
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	fa93 f2a3 	rbit	r2, r3
 8002822:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800282c:	2202      	movs	r2, #2
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800283e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002840:	4ba4      	ldr	r3, [pc, #656]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002844:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002848:	2102      	movs	r1, #2
 800284a:	6019      	str	r1, [r3, #0]
 800284c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f1a3 	rbit	r1, r3
 8002856:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800285a:	6019      	str	r1, [r3, #0]
  return result;
 800285c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0b0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x628>
 800287e:	e06a      	b.n	8002956 <HAL_RCC_OscConfig+0x79e>
 8002880:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800289c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b8c      	ldr	r3, [pc, #560]	; (8002ad8 <HAL_RCC_OscConfig+0x920>)
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	461a      	mov	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7ff f9c1 	bl	8001c38 <HAL_GetTick>
 80028b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ba:	e009      	b.n	80028d0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f7ff f9bc 	bl	8001c38 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e381      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 80028d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028d4:	2202      	movs	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028ec:	2202      	movs	r2, #2
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002904:	2202      	movs	r2, #2
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002916:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 800291a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002920:	2102      	movs	r1, #2
 8002922:	6019      	str	r1, [r3, #0]
 8002924:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f1a3 	rbit	r1, r3
 800292e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002932:	6019      	str	r1, [r3, #0]
  return result;
 8002934:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1b2      	bne.n	80028bc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8157 	beq.w	8002c14 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d112      	bne.n	800299e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a55      	ldr	r2, [pc, #340]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	61d3      	str	r3, [r2, #28]
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <HAL_RCC_OscConfig+0x924>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <HAL_RCC_OscConfig+0x924>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x924>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7ff f93f 	bl	8001c38 <HAL_GetTick>
 80029ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	e009      	b.n	80029d4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c0:	f7ff f93a 	bl	8001c38 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e2ff      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_RCC_OscConfig+0x924>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ef      	beq.n	80029c0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d106      	bne.n	80029f8 <HAL_RCC_OscConfig+0x840>
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4a39      	ldr	r2, [pc, #228]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6213      	str	r3, [r2, #32]
 80029f6:	e02f      	b.n	8002a58 <HAL_RCC_OscConfig+0x8a0>
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x864>
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0x8a0>
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x888>
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6213      	str	r3, [r2, #32]
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x8a0>
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a20      	ldr	r2, [pc, #128]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06a      	beq.n	8002b38 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7ff f8e9 	bl	8001c38 <HAL_GetTick>
 8002a66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7ff f8e4 	bl	8001c38 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e2a7      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002a84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a88:	2202      	movs	r2, #2
 8002a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fa93 f2a3 	rbit	r2, r3
 8002a96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ab2:	601a      	str	r2, [r3, #0]
  return result;
 8002ab4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ab8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d108      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x928>
 8002ace:	4b01      	ldr	r3, [pc, #4]	; (8002ad4 <HAL_RCC_OscConfig+0x91c>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	e013      	b.n	8002afc <HAL_RCC_OscConfig+0x944>
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	10908120 	.word	0x10908120
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4bc0      	ldr	r3, [pc, #768]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b00:	2102      	movs	r1, #2
 8002b02:	6011      	str	r1, [r2, #0]
 8002b04:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	fa92 f1a2 	rbit	r1, r2
 8002b0e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b12:	6011      	str	r1, [r2, #0]
  return result;
 8002b14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	fab2 f282 	clz	r2, r2
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f002 021f 	and.w	r2, r2, #31
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d09a      	beq.n	8002a6c <HAL_RCC_OscConfig+0x8b4>
 8002b36:	e063      	b.n	8002c00 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7ff f87e 	bl	8001c38 <HAL_GetTick>
 8002b3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00b      	b.n	8002b5a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7ff f879 	bl	8001c38 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e23c      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002b5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b5e:	2202      	movs	r2, #2
 8002b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b88:	601a      	str	r2, [r3, #0]
  return result;
 8002b8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d102      	bne.n	8002baa <HAL_RCC_OscConfig+0x9f2>
 8002ba4:	4b95      	ldr	r3, [pc, #596]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	e00d      	b.n	8002bc6 <HAL_RCC_OscConfig+0xa0e>
 8002baa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	4b8e      	ldr	r3, [pc, #568]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002bca:	2102      	movs	r1, #2
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	fa92 f1a2 	rbit	r1, r2
 8002bd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bdc:	6011      	str	r1, [r2, #0]
  return result;
 8002bde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f002 021f 	and.w	r2, r2, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1a0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c00:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4a7b      	ldr	r2, [pc, #492]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81d9 	beq.w	8002fd2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	f000 81a6 	beq.w	8002f7a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	f040 811e 	bne.w	8002e76 <HAL_RCC_OscConfig+0xcbe>
 8002c3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c52:	601a      	str	r2, [r3, #0]
  return result;
 8002c54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c58:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe ffe2 	bl	8001c38 <HAL_GetTick>
 8002c74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c78:	e009      	b.n	8002c8e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe ffdd 	bl	8001c38 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1a2      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002c8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ca6:	601a      	str	r2, [r3, #0]
  return result;
 8002ca8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xb10>
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e01b      	b.n	8002d00 <HAL_RCC_OscConfig+0xb48>
 8002cc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	fa93 f2a3 	rbit	r2, r3
 8002cf6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d08:	6011      	str	r1, [r2, #0]
 8002d0a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	fa92 f1a2 	rbit	r1, r2
 8002d14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d18:	6011      	str	r1, [r2, #0]
  return result;
 8002d1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f042 0220 	orr.w	r2, r2, #32
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	f002 021f 	and.w	r2, r2, #31
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f202 	lsl.w	r2, r1, r2
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d19e      	bne.n	8002c7a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	f023 020f 	bic.w	r2, r3, #15
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	492c      	ldr	r1, [pc, #176]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a19      	ldr	r1, [r3, #32]
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	4925      	ldr	r1, [pc, #148]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d84:	601a      	str	r2, [r3, #0]
  return result;
 8002d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d8a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2301      	movs	r3, #1
 8002da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe ff49 	bl	8001c38 <HAL_GetTick>
 8002da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002daa:	e009      	b.n	8002dc0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe ff44 	bl	8001c38 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e109      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002dc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dd8:	601a      	str	r2, [r3, #0]
  return result;
 8002dda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCC_OscConfig+0xc48>
 8002df4:	4b01      	ldr	r3, [pc, #4]	; (8002dfc <HAL_RCC_OscConfig+0xc44>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e01e      	b.n	8002e38 <HAL_RCC_OscConfig+0xc80>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_OscConfig+0xe28>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fa92 f1a2 	rbit	r1, r2
 8002e4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e50:	6011      	str	r1, [r2, #0]
  return result;
 8002e52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	fab2 f282 	clz	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f002 021f 	and.w	r2, r2, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d09b      	beq.n	8002dac <HAL_RCC_OscConfig+0xbf4>
 8002e74:	e0ad      	b.n	8002fd2 <HAL_RCC_OscConfig+0xe1a>
 8002e76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e8e:	601a      	str	r2, [r3, #0]
  return result;
 8002e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fec4 	bl	8001c38 <HAL_GetTick>
 8002eb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e009      	b.n	8002eca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe febf 	bl	8001c38 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e084      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
 8002eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee2:	601a      	str	r2, [r3, #0]
  return result;
 8002ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0xd4c>
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_RCC_OscConfig+0xe28>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e01b      	b.n	8002f3c <HAL_RCC_OscConfig+0xd84>
 8002f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 0320 	add.w	r3, r7, #32
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f107 0318 	add.w	r3, r7, #24
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_OscConfig+0xe28>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f107 0214 	add.w	r2, r7, #20
 8002f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f107 0214 	add.w	r2, r7, #20
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fa92 f1a2 	rbit	r1, r2
 8002f50:	f107 0210 	add.w	r2, r7, #16
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f107 0210 	add.w	r2, r7, #16
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d19e      	bne.n	8002eb6 <HAL_RCC_OscConfig+0xcfe>
 8002f78:	e02b      	b.n	8002fd2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e025      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_RCC_OscConfig+0xe28>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_RCC_OscConfig+0xe28>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f9c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d111      	bne.n	8002fce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002faa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d108      	bne.n	8002fce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b09e      	sub	sp, #120	; 0x78
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e162      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b90      	ldr	r3, [pc, #576]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b8d      	ldr	r3, [pc, #564]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	498b      	ldr	r1, [pc, #556]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b89      	ldr	r3, [pc, #548]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e14a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b82      	ldr	r3, [pc, #520]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	497f      	ldr	r1, [pc, #508]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80dc 	beq.w	8003210 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d13c      	bne.n	80030da <HAL_RCC_ClockConfig+0xf6>
 8003060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003064:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800306e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <HAL_RCC_ClockConfig+0xa6>
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	e00f      	b.n	80030aa <HAL_RCC_ClockConfig+0xc6>
 800308a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	667b      	str	r3, [r7, #100]	; 0x64
 8003098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309c:	663b      	str	r3, [r7, #96]	; 0x60
 800309e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80030b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f002 021f 	and.w	r2, r2, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f202 	lsl.w	r2, r1, r2
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d17b      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0f3      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d13c      	bne.n	800315c <HAL_RCC_ClockConfig+0x178>
 80030e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <HAL_RCC_ClockConfig+0x128>
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	e00f      	b.n	800312c <HAL_RCC_ClockConfig+0x148>
 800310c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003110:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
 800311a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003128:	4b46      	ldr	r3, [pc, #280]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003130:	63ba      	str	r2, [r7, #56]	; 0x38
 8003132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003134:	fa92 f2a2 	rbit	r2, r2
 8003138:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800313a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800313c:	fab2 f282 	clz	r2, r2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f042 0220 	orr.w	r2, r2, #32
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f002 021f 	and.w	r2, r2, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d13a      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0b2      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
 800315c:	2302      	movs	r3, #2
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_ClockConfig+0x1a0>
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e00d      	b.n	80031a0 <HAL_RCC_ClockConfig+0x1bc>
 8003184:	2302      	movs	r3, #2
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
 8003190:	2302      	movs	r3, #2
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2202      	movs	r2, #2
 80031a2:	61ba      	str	r2, [r7, #24]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	fa92 f2a2 	rbit	r2, r2
 80031aa:	617a      	str	r2, [r7, #20]
  return result;
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	fab2 f282 	clz	r2, r2
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f042 0220 	orr.w	r2, r2, #32
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f002 021f 	and.w	r2, r2, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e079      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	491a      	ldr	r1, [pc, #104]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fd2a 	bl	8001c38 <HAL_GetTick>
 80031e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fd26 	bl	8001c38 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e061      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d214      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4906      	ldr	r1, [pc, #24]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e040      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	491a      	ldr	r1, [pc, #104]	; (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4912      	ldr	r1, [pc, #72]	; (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003286:	f000 f829 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800328a:	4601      	mov	r1, r0
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003294:	22f0      	movs	r2, #240	; 0xf0
 8003296:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	60fa      	str	r2, [r7, #12]
  return result;
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	40d3      	lsrs	r3, r2
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x2ec>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	fa21 f303 	lsr.w	r3, r1, r3
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_RCC_ClockConfig+0x2f0>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_ClockConfig+0x2f4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fbc8 	bl	8001a50 <HAL_InitTick>
  
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3778      	adds	r7, #120	; 0x78
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08008f04 	.word	0x08008f04
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000004 	.word	0x20000004

080032dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	b08b      	sub	sp, #44	; 0x2c
 80032e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d002      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x30>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d003      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x36>
 800330a:	e03f      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800330e:	623b      	str	r3, [r7, #32]
      break;
 8003310:	e03f      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003318:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800331c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fa92 f2a2 	rbit	r2, r2
 8003324:	607a      	str	r2, [r7, #4]
  return result;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	fab2 f282 	clz	r2, r2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	40d3      	lsrs	r3, r2
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	220f      	movs	r2, #15
 8003340:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	fa92 f2a2 	rbit	r2, r2
 8003348:	60fa      	str	r2, [r7, #12]
  return result;
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	40d3      	lsrs	r3, r2
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	e007      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003376:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fbb2 f2f3 	udiv	r2, r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	623b      	str	r3, [r7, #32]
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800338e:	623b      	str	r3, [r7, #32]
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	6a3b      	ldr	r3, [r7, #32]
}
 8003394:	4618      	mov	r0, r3
 8003396:	372c      	adds	r7, #44	; 0x2c
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40021000 	.word	0x40021000
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	08008f1c 	.word	0x08008f1c
 80033ac:	08008f2c 	.word	0x08008f2c

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033ce:	f7ff ffef 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d2:	4601      	mov	r1, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	fa92 f2a2 	rbit	r2, r2
 80033e8:	603a      	str	r2, [r7, #0]
  return result;
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	40d3      	lsrs	r3, r2
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08008f14 	.word	0x08008f14

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003412:	f7ff ffcd 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 8003416:	4601      	mov	r1, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003420:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003424:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	603a      	str	r2, [r7, #0]
  return result;
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	40d3      	lsrs	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_RCC_GetPCLK2Freq+0x40>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	08008f14 	.word	0x08008f14

08003450 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	220f      	movs	r2, #15
 800345e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_RCC_GetClockConfig+0x5c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_RCC_GetClockConfig+0x5c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_RCC_GetClockConfig+0x5c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_GetClockConfig+0x5c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_RCC_GetClockConfig+0x60>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0207 	and.w	r2, r3, #7
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40022000 	.word	0x40022000

080034b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b092      	sub	sp, #72	; 0x48
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80d4 	beq.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d8:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10e      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	61d3      	str	r3, [r2, #28]
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b45      	ldr	r3, [pc, #276]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b42      	ldr	r3, [pc, #264]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a41      	ldr	r2, [pc, #260]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fe fb8d 	bl	8001c38 <HAL_GetTick>
 800351e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fe fb89 	bl	8001c38 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e1d6      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b38      	ldr	r3, [pc, #224]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800354a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8084 	beq.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355c:	429a      	cmp	r2, r3
 800355e:	d07c      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	461a      	mov	r2, r3
 800358a:	2301      	movs	r3, #1
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	461a      	mov	r2, r3
 80035ae:	2300      	movs	r3, #0
 80035b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04b      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe fb39 	bl	8001c38 <HAL_GetTick>
 80035c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe fb35 	bl	8001c38 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e180      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80035e0:	2302      	movs	r3, #2
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
 80035ec:	2302      	movs	r3, #2
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	61fb      	str	r3, [r7, #28]
  return result;
 80035f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d108      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800360e:	4b01      	ldr	r3, [pc, #4]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	e00d      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	10908100 	.word	0x10908100
 8003620:	2302      	movs	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	4ba0      	ldr	r3, [pc, #640]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2202      	movs	r2, #2
 8003632:	613a      	str	r2, [r7, #16]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	fa92 f2a2 	rbit	r2, r2
 800363a:	60fa      	str	r2, [r7, #12]
  return result;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f002 021f 	and.w	r2, r2, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0b7      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800365a:	4b95      	ldr	r3, [pc, #596]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4992      	ldr	r1, [pc, #584]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800366c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b8e      	ldr	r3, [pc, #568]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a8d      	ldr	r2, [pc, #564]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	f023 0203 	bic.w	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4985      	ldr	r1, [pc, #532]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036aa:	4b81      	ldr	r3, [pc, #516]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	497e      	ldr	r1, [pc, #504]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c8:	4b79      	ldr	r3, [pc, #484]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4976      	ldr	r1, [pc, #472]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036e6:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f023 0210 	bic.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	496f      	ldr	r1, [pc, #444]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003704:	4b6a      	ldr	r3, [pc, #424]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	4967      	ldr	r1, [pc, #412]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f023 0220 	bic.w	r2, r3, #32
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4960      	ldr	r1, [pc, #384]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003740:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	4958      	ldr	r1, [pc, #352]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800375e:	4b54      	ldr	r3, [pc, #336]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4951      	ldr	r1, [pc, #324]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800377c:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	4949      	ldr	r1, [pc, #292]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800379a:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4942      	ldr	r1, [pc, #264]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037b8:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	493a      	ldr	r1, [pc, #232]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80037d6:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	4933      	ldr	r1, [pc, #204]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	492b      	ldr	r1, [pc, #172]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003812:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4924      	ldr	r1, [pc, #144]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	491c      	ldr	r1, [pc, #112]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	4915      	ldr	r1, [pc, #84]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	490d      	ldr	r1, [pc, #52]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	4906      	ldr	r1, [pc, #24]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80038a8:	4b01      	ldr	r3, [pc, #4]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038bc:	490b      	ldr	r1, [pc, #44]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	4904      	ldr	r1, [pc, #16]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3748      	adds	r7, #72	; 0x48
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e049      	b.n	8003996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd ffc2 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f001 f834 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e04f      	b.n	8003a58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01d      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x76>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d018      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x76>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x76>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x76>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x76>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x76>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d115      	bne.n	8003a42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	d015      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2e:	d011      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a40:	e008      	b.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e000      	b.n	8003a56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40013400 	.word	0x40013400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40015000 	.word	0x40015000
 8003a7c:	00010007 	.word	0x00010007

08003a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e049      	b.n	8003b26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f841 	bl	8003b2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 ff6c 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_TIM_PWM_Start+0x24>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e03c      	b.n	8003be2 <HAL_TIM_PWM_Start+0x9e>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d109      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x3e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e02f      	b.n	8003be2 <HAL_TIM_PWM_Start+0x9e>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d109      	bne.n	8003b9c <HAL_TIM_PWM_Start+0x58>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e022      	b.n	8003be2 <HAL_TIM_PWM_Start+0x9e>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d109      	bne.n	8003bb6 <HAL_TIM_PWM_Start+0x72>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e015      	b.n	8003be2 <HAL_TIM_PWM_Start+0x9e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d109      	bne.n	8003bd0 <HAL_TIM_PWM_Start+0x8c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e008      	b.n	8003be2 <HAL_TIM_PWM_Start+0x9e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0a1      	b.n	8003d2e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_PWM_Start+0xb6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	e023      	b.n	8003c42 <HAL_TIM_PWM_Start+0xfe>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0xc6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c08:	e01b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xfe>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0xd6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Start+0xfe>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xe6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xfe>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xf6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Start+0xfe>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 fc08 	bl	8005460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_TIM_PWM_Start+0x1f4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_TIM_PWM_Start+0x148>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a37      	ldr	r2, [pc, #220]	; (8003d3c <HAL_TIM_PWM_Start+0x1f8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_TIM_PWM_Start+0x148>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <HAL_TIM_PWM_Start+0x1fc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_TIM_PWM_Start+0x148>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a34      	ldr	r2, [pc, #208]	; (8003d44 <HAL_TIM_PWM_Start+0x200>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_TIM_PWM_Start+0x148>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a32      	ldr	r2, [pc, #200]	; (8003d48 <HAL_TIM_PWM_Start+0x204>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_TIM_PWM_Start+0x148>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_TIM_PWM_Start+0x208>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIM_PWM_Start+0x14c>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_TIM_PWM_Start+0x14e>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <HAL_TIM_PWM_Start+0x1f4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <HAL_TIM_PWM_Start+0x1a8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d018      	beq.n	8003cec <HAL_TIM_PWM_Start+0x1a8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <HAL_TIM_PWM_Start+0x20c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_TIM_PWM_Start+0x1a8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <HAL_TIM_PWM_Start+0x210>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_PWM_Start+0x1a8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <HAL_TIM_PWM_Start+0x1f8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_PWM_Start+0x1a8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <HAL_TIM_PWM_Start+0x1fc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_PWM_Start+0x1a8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_TIM_PWM_Start+0x208>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d115      	bne.n	8003d18 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_TIM_PWM_Start+0x214>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d015      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x1e6>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d011      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	e008      	b.n	8003d2a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e000      	b.n	8003d2c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40014400 	.word	0x40014400
 8003d48:	40014800 	.word	0x40014800
 8003d4c:	40015000 	.word	0x40015000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	00010007 	.word	0x00010007

08003d5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 fb76 	bl	8005460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a40      	ldr	r2, [pc, #256]	; (8003e7c <HAL_TIM_PWM_Stop+0x120>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_TIM_PWM_Stop+0x54>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3f      	ldr	r2, [pc, #252]	; (8003e80 <HAL_TIM_PWM_Stop+0x124>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_TIM_PWM_Stop+0x54>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <HAL_TIM_PWM_Stop+0x128>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIM_PWM_Stop+0x54>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <HAL_TIM_PWM_Stop+0x12c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIM_PWM_Stop+0x54>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <HAL_TIM_PWM_Stop+0x130>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIM_PWM_Stop+0x54>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <HAL_TIM_PWM_Stop+0x134>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <HAL_TIM_PWM_Stop+0x58>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <HAL_TIM_PWM_Stop+0x5a>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d017      	beq.n	8003dea <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_TIM_PWM_Stop+0x8e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	f240 4344 	movw	r3, #1092	; 0x444
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_PWM_Stop+0x8e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <HAL_TIM_PWM_Stop+0xbe>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	f240 4344 	movw	r3, #1092	; 0x444
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <HAL_TIM_PWM_Stop+0xbe>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Stop+0xce>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	e023      	b.n	8003e72 <HAL_TIM_PWM_Stop+0x116>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0xde>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	e01b      	b.n	8003e72 <HAL_TIM_PWM_Stop+0x116>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Stop+0xee>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e013      	b.n	8003e72 <HAL_TIM_PWM_Stop+0x116>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Stop+0xfe>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e58:	e00b      	b.n	8003e72 <HAL_TIM_PWM_Stop+0x116>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Stop+0x10e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e68:	e003      	b.n	8003e72 <HAL_TIM_PWM_Stop+0x116>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40012c00 	.word	0x40012c00
 8003e80:	40013400 	.word	0x40013400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800
 8003e90:	40015000 	.word	0x40015000

08003e94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e049      	b.n	8003f3a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f841 	bl	8003f42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fd62 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <HAL_TIM_IC_Start_IT+0x1a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e023      	b.n	8003fba <HAL_TIM_IC_Start_IT+0x62>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d104      	bne.n	8003f82 <HAL_TIM_IC_Start_IT+0x2a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e01b      	b.n	8003fba <HAL_TIM_IC_Start_IT+0x62>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_IC_Start_IT+0x3a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e013      	b.n	8003fba <HAL_TIM_IC_Start_IT+0x62>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_IC_Start_IT+0x4a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e00b      	b.n	8003fba <HAL_TIM_IC_Start_IT+0x62>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_IC_Start_IT+0x5a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e003      	b.n	8003fba <HAL_TIM_IC_Start_IT+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_TIM_IC_Start_IT+0x74>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e013      	b.n	8003ff4 <HAL_TIM_IC_Start_IT+0x9c>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d104      	bne.n	8003fdc <HAL_TIM_IC_Start_IT+0x84>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e00b      	b.n	8003ff4 <HAL_TIM_IC_Start_IT+0x9c>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d104      	bne.n	8003fec <HAL_TIM_IC_Start_IT+0x94>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e003      	b.n	8003ff4 <HAL_TIM_IC_Start_IT+0x9c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ffc:	7bbb      	ldrb	r3, [r7, #14]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d001      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0d8      	b.n	80041b8 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_TIM_IC_Start_IT+0xbe>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	e023      	b.n	800405e <HAL_TIM_IC_Start_IT+0x106>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d104      	bne.n	8004026 <HAL_TIM_IC_Start_IT+0xce>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	e01b      	b.n	800405e <HAL_TIM_IC_Start_IT+0x106>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d104      	bne.n	8004036 <HAL_TIM_IC_Start_IT+0xde>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	e013      	b.n	800405e <HAL_TIM_IC_Start_IT+0x106>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d104      	bne.n	8004046 <HAL_TIM_IC_Start_IT+0xee>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004044:	e00b      	b.n	800405e <HAL_TIM_IC_Start_IT+0x106>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b10      	cmp	r3, #16
 800404a:	d104      	bne.n	8004056 <HAL_TIM_IC_Start_IT+0xfe>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004054:	e003      	b.n	800405e <HAL_TIM_IC_Start_IT+0x106>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_TIM_IC_Start_IT+0x116>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406c:	e013      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x13e>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d104      	bne.n	800407e <HAL_TIM_IC_Start_IT+0x126>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800407c:	e00b      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x13e>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d104      	bne.n	800408e <HAL_TIM_IC_Start_IT+0x136>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800408c:	e003      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x13e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d841      	bhi.n	8004120 <HAL_TIM_IC_Start_IT+0x1c8>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <HAL_TIM_IC_Start_IT+0x14c>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	08004121 	.word	0x08004121
 80040ac:	08004121 	.word	0x08004121
 80040b0:	08004121 	.word	0x08004121
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	08004121 	.word	0x08004121
 80040bc:	08004121 	.word	0x08004121
 80040c0:	08004121 	.word	0x08004121
 80040c4:	080040fd 	.word	0x080040fd
 80040c8:	08004121 	.word	0x08004121
 80040cc:	08004121 	.word	0x08004121
 80040d0:	08004121 	.word	0x08004121
 80040d4:	0800410f 	.word	0x0800410f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0202 	orr.w	r2, r2, #2
 80040e6:	60da      	str	r2, [r3, #12]
      break;
 80040e8:	e01b      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0204 	orr.w	r2, r2, #4
 80040f8:	60da      	str	r2, [r3, #12]
      break;
 80040fa:	e012      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	60da      	str	r2, [r3, #12]
      break;
 800410c:	e009      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0210 	orr.w	r2, r2, #16
 800411c:	60da      	str	r2, [r3, #12]
      break;
 800411e:	e000      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004120:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	6839      	ldr	r1, [r7, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f998 	bl	8005460 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_TIM_IC_Start_IT+0x268>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x21e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d018      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x21e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_TIM_IC_Start_IT+0x26c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x21e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_TIM_IC_Start_IT+0x270>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x21e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_TIM_IC_Start_IT+0x274>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x21e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_TIM_IC_Start_IT+0x278>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIM_IC_Start_IT+0x21e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <HAL_TIM_IC_Start_IT+0x27c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d115      	bne.n	80041a2 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_TIM_IC_Start_IT+0x280>)
 800417e:	4013      	ands	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d015      	beq.n	80041b4 <HAL_TIM_IC_Start_IT+0x25c>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d011      	beq.n	80041b4 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	e008      	b.n	80041b4 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e000      	b.n	80041b6 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40013400 	.word	0x40013400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40015000 	.word	0x40015000
 80041d8:	00010007 	.word	0x00010007

080041dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d11b      	bne.n	8004238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0202 	mvn.w	r2, #2
 8004208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc ff34 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fb9a 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fba1 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0204 	mvn.w	r2, #4
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc ff0a 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fb70 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb77 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b08      	cmp	r3, #8
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0208 	mvn.w	r2, #8
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2204      	movs	r2, #4
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc fee0 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fb46 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb4d 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0210 	mvn.w	r2, #16
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2208      	movs	r2, #8
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc feb6 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb1c 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fb23 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d107      	bne.n	8004360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0201 	mvn.w	r2, #1
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd fa5c 	bl	8001818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d10e      	bne.n	800438c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d107      	bne.n	800438c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f001 f926 	bl	80055d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439a:	d10e      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d107      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f919 	bl	80055ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d10e      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fad1 	bl	8004988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d10e      	bne.n	8004412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d107      	bne.n	8004412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0220 	mvn.w	r2, #32
 800440a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f001 f8d9 	bl	80055c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004430:	2302      	movs	r3, #2
 8004432:	e082      	b.n	800453a <HAL_TIM_IC_ConfigChannel+0x120>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11b      	bne.n	800447a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f000 fe47 	bl	80050e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 020c 	bic.w	r2, r2, #12
 8004464:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6999      	ldr	r1, [r3, #24]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
 8004478:	e05a      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d11c      	bne.n	80044ba <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f000 fec5 	bl	800521e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6999      	ldr	r1, [r3, #24]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	021a      	lsls	r2, r3, #8
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	619a      	str	r2, [r3, #24]
 80044b8:	e03a      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f000 ff12 	bl	80052f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 020c 	bic.w	r2, r2, #12
 80044e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69d9      	ldr	r1, [r3, #28]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	61da      	str	r2, [r3, #28]
 80044f6:	e01b      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f000 ff32 	bl	8005370 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800451a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69d9      	ldr	r1, [r3, #28]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800455a:	2302      	movs	r3, #2
 800455c:	e0fd      	b.n	800475a <HAL_TIM_PWM_ConfigChannel+0x216>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b14      	cmp	r3, #20
 800456a:	f200 80f0 	bhi.w	800474e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	080045c9 	.word	0x080045c9
 8004578:	0800474f 	.word	0x0800474f
 800457c:	0800474f 	.word	0x0800474f
 8004580:	0800474f 	.word	0x0800474f
 8004584:	08004609 	.word	0x08004609
 8004588:	0800474f 	.word	0x0800474f
 800458c:	0800474f 	.word	0x0800474f
 8004590:	0800474f 	.word	0x0800474f
 8004594:	0800464b 	.word	0x0800464b
 8004598:	0800474f 	.word	0x0800474f
 800459c:	0800474f 	.word	0x0800474f
 80045a0:	0800474f 	.word	0x0800474f
 80045a4:	0800468b 	.word	0x0800468b
 80045a8:	0800474f 	.word	0x0800474f
 80045ac:	0800474f 	.word	0x0800474f
 80045b0:	0800474f 	.word	0x0800474f
 80045b4:	080046cd 	.word	0x080046cd
 80045b8:	0800474f 	.word	0x0800474f
 80045bc:	0800474f 	.word	0x0800474f
 80045c0:	0800474f 	.word	0x0800474f
 80045c4:	0800470d 	.word	0x0800470d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fa82 	bl	8004ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
      break;
 8004606:	e0a3      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fafc 	bl	8004c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]
      break;
 8004648:	e082      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fb6f 	bl	8004d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0208 	orr.w	r2, r2, #8
 8004664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
      break;
 8004688:	e062      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fbe1 	bl	8004e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	61da      	str	r2, [r3, #28]
      break;
 80046ca:	e041      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fc30 	bl	8004f38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0208 	orr.w	r2, r2, #8
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0204 	bic.w	r2, r2, #4
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800470a:	e021      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc7a 	bl	800500c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	021a      	lsls	r2, r3, #8
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800474c:	e000      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800474e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop

08004764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIM_ConfigClockSource+0x18>
 8004778:	2302      	movs	r3, #2
 800477a:	e0a8      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800479e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d067      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x124>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d80b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x70>
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d073      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x144>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d802      	bhi.n	80047ca <HAL_TIM_ConfigClockSource+0x66>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d06f      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047c8:	e078      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d06c      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x144>
 80047ce:	2b30      	cmp	r3, #48	; 0x30
 80047d0:	d06a      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80047d2:	e073      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047d4:	2b70      	cmp	r3, #112	; 0x70
 80047d6:	d00d      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x90>
 80047d8:	2b70      	cmp	r3, #112	; 0x70
 80047da:	d804      	bhi.n	80047e6 <HAL_TIM_ConfigClockSource+0x82>
 80047dc:	2b50      	cmp	r3, #80	; 0x50
 80047de:	d033      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xe4>
 80047e0:	2b60      	cmp	r3, #96	; 0x60
 80047e2:	d041      	beq.n	8004868 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80047e4:	e06a      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	d066      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x156>
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d017      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80047f2:	e063      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f000 fe0c 	bl	8005420 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004816:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]
      break;
 8004820:	e04c      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f000 fdf5 	bl	8005420 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e039      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	461a      	mov	r2, r3
 8004856:	f000 fcb3 	bl	80051c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2150      	movs	r1, #80	; 0x50
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fdc2 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004866:	e029      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	461a      	mov	r2, r3
 8004876:	f000 fd0f 	bl	8005298 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2160      	movs	r1, #96	; 0x60
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fdb2 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004886:	e019      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	461a      	mov	r2, r3
 8004896:	f000 fc93 	bl	80051c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2140      	movs	r1, #64	; 0x40
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fda2 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 80048a6:	e009      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 fd99 	bl	80053ea <TIM_ITRx_SetConfig>
        break;
 80048b8:	e000      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x158>
      break;
 80048ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d831      	bhi.n	8004950 <HAL_TIM_ReadCapturedValue+0x78>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004951 	.word	0x08004951
 8004900:	08004951 	.word	0x08004951
 8004904:	08004933 	.word	0x08004933
 8004908:	08004951 	.word	0x08004951
 800490c:	08004951 	.word	0x08004951
 8004910:	08004951 	.word	0x08004951
 8004914:	0800493d 	.word	0x0800493d
 8004918:	08004951 	.word	0x08004951
 800491c:	08004951 	.word	0x08004951
 8004920:	08004951 	.word	0x08004951
 8004924:	08004947 	.word	0x08004947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	60fb      	str	r3, [r7, #12]

      break;
 8004930:	e00f      	b.n	8004952 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	60fb      	str	r3, [r7, #12]

      break;
 800493a:	e00a      	b.n	8004952 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	60fb      	str	r3, [r7, #12]

      break;
 8004944:	e005      	b.n	8004952 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	60fb      	str	r3, [r7, #12]

      break;
 800494e:	e000      	b.n	8004952 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004950:	bf00      	nop
  }

  return tmpreg;
 8004952:	68fb      	ldr	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <TIM_Base_SetConfig+0x11c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d00f      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <TIM_Base_SetConfig+0x120>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3e      	ldr	r2, [pc, #248]	; (8004ac0 <TIM_Base_SetConfig+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3d      	ldr	r2, [pc, #244]	; (8004ac4 <TIM_Base_SetConfig+0x128>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a3c      	ldr	r2, [pc, #240]	; (8004ac8 <TIM_Base_SetConfig+0x12c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d108      	bne.n	80049ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a31      	ldr	r2, [pc, #196]	; (8004ab8 <TIM_Base_SetConfig+0x11c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01f      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d01b      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2e      	ldr	r2, [pc, #184]	; (8004abc <TIM_Base_SetConfig+0x120>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d017      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2d      	ldr	r2, [pc, #180]	; (8004ac0 <TIM_Base_SetConfig+0x124>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2c      	ldr	r2, [pc, #176]	; (8004ac4 <TIM_Base_SetConfig+0x128>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00f      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <TIM_Base_SetConfig+0x130>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <TIM_Base_SetConfig+0x134>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <TIM_Base_SetConfig+0x138>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <TIM_Base_SetConfig+0x12c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <TIM_Base_SetConfig+0x11c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_Base_SetConfig+0x100>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <TIM_Base_SetConfig+0x128>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x100>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a13      	ldr	r2, [pc, #76]	; (8004acc <TIM_Base_SetConfig+0x130>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x100>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <TIM_Base_SetConfig+0x134>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x100>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <TIM_Base_SetConfig+0x138>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x100>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a0c      	ldr	r2, [pc, #48]	; (8004ac8 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d103      	bne.n	8004aa4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	615a      	str	r2, [r3, #20]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40015000 	.word	0x40015000
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 0302 	bic.w	r3, r3, #2
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a30      	ldr	r2, [pc, #192]	; (8004bf4 <TIM_OC1_SetConfig+0x11c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <TIM_OC1_SetConfig+0x88>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a2f      	ldr	r2, [pc, #188]	; (8004bf8 <TIM_OC1_SetConfig+0x120>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00f      	beq.n	8004b60 <TIM_OC1_SetConfig+0x88>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <TIM_OC1_SetConfig+0x124>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <TIM_OC1_SetConfig+0x88>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <TIM_OC1_SetConfig+0x128>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_OC1_SetConfig+0x88>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <TIM_OC1_SetConfig+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_OC1_SetConfig+0x88>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <TIM_OC1_SetConfig+0x130>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10c      	bne.n	8004b7a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0308 	bic.w	r3, r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <TIM_OC1_SetConfig+0x11c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <TIM_OC1_SetConfig+0xd2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <TIM_OC1_SetConfig+0x120>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00f      	beq.n	8004baa <TIM_OC1_SetConfig+0xd2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <TIM_OC1_SetConfig+0x124>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_OC1_SetConfig+0xd2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <TIM_OC1_SetConfig+0x128>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_OC1_SetConfig+0xd2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <TIM_OC1_SetConfig+0x12c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC1_SetConfig+0xd2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <TIM_OC1_SetConfig+0x130>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d111      	bne.n	8004bce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	621a      	str	r2, [r3, #32]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800
 8004c08:	40015000 	.word	0x40015000

08004c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0210 	bic.w	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0320 	bic.w	r3, r3, #32
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <TIM_OC2_SetConfig+0x110>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_OC2_SetConfig+0x74>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <TIM_OC2_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC2_SetConfig+0x74>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <TIM_OC2_SetConfig+0x118>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10d      	bne.n	8004c9c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <TIM_OC2_SetConfig+0x110>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <TIM_OC2_SetConfig+0xc0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <TIM_OC2_SetConfig+0x114>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <TIM_OC2_SetConfig+0xc0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <TIM_OC2_SetConfig+0x11c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_OC2_SetConfig+0xc0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <TIM_OC2_SetConfig+0x120>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_OC2_SetConfig+0xc0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <TIM_OC2_SetConfig+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0xc0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC2_SetConfig+0x118>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d113      	bne.n	8004cf4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cda:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40013400 	.word	0x40013400
 8004d24:	40015000 	.word	0x40015000
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <TIM_OC3_SetConfig+0x10c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC3_SetConfig+0x72>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <TIM_OC3_SetConfig+0x110>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC3_SetConfig+0x72>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <TIM_OC3_SetConfig+0x114>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10d      	bne.n	8004dc2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <TIM_OC3_SetConfig+0x10c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_OC3_SetConfig+0xbe>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <TIM_OC3_SetConfig+0x110>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_OC3_SetConfig+0xbe>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <TIM_OC3_SetConfig+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_OC3_SetConfig+0xbe>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <TIM_OC3_SetConfig+0x11c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_OC3_SetConfig+0xbe>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <TIM_OC3_SetConfig+0x120>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_OC3_SetConfig+0xbe>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <TIM_OC3_SetConfig+0x114>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d113      	bne.n	8004e1a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40015000 	.word	0x40015000
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <TIM_OC4_SetConfig+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x8c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <TIM_OC4_SetConfig+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x8c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <TIM_OC4_SetConfig+0xd0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x8c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <TIM_OC4_SetConfig+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x8c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <TIM_OC4_SetConfig+0xd8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x8c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC4_SetConfig+0xdc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d109      	bne.n	8004ef8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800
 8004f34:	40015000 	.word	0x40015000

08004f38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <TIM_OC5_SetConfig+0xbc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_OC5_SetConfig+0x82>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <TIM_OC5_SetConfig+0xc0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_OC5_SetConfig+0x82>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <TIM_OC5_SetConfig+0xc4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_OC5_SetConfig+0x82>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <TIM_OC5_SetConfig+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_OC5_SetConfig+0x82>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <TIM_OC5_SetConfig+0xcc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC5_SetConfig+0x82>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	; (8005008 <TIM_OC5_SetConfig+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d109      	bne.n	8004fce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800
 8005008:	40015000 	.word	0x40015000

0800500c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	051b      	lsls	r3, r3, #20
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a1a      	ldr	r2, [pc, #104]	; (80050cc <TIM_OC6_SetConfig+0xc0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <TIM_OC6_SetConfig+0x84>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <TIM_OC6_SetConfig+0xc4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00f      	beq.n	8005090 <TIM_OC6_SetConfig+0x84>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <TIM_OC6_SetConfig+0xc8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_OC6_SetConfig+0x84>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <TIM_OC6_SetConfig+0xcc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_OC6_SetConfig+0x84>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a16      	ldr	r2, [pc, #88]	; (80050dc <TIM_OC6_SetConfig+0xd0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC6_SetConfig+0x84>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <TIM_OC6_SetConfig+0xd4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d109      	bne.n	80050a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40013400 	.word	0x40013400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800
 80050e0:	40015000 	.word	0x40015000

080050e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f023 0201 	bic.w	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <TIM_TI1_SetConfig+0xc4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d017      	beq.n	8005142 <TIM_TI1_SetConfig+0x5e>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d013      	beq.n	8005142 <TIM_TI1_SetConfig+0x5e>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4a23      	ldr	r2, [pc, #140]	; (80051ac <TIM_TI1_SetConfig+0xc8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00f      	beq.n	8005142 <TIM_TI1_SetConfig+0x5e>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <TIM_TI1_SetConfig+0xcc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <TIM_TI1_SetConfig+0x5e>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <TIM_TI1_SetConfig+0xd0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_TI1_SetConfig+0x5e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <TIM_TI1_SetConfig+0xd4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_TI1_SetConfig+0x5e>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <TIM_TI1_SetConfig+0xd8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <TIM_TI1_SetConfig+0x62>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <TIM_TI1_SetConfig+0x64>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e003      	b.n	8005166 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	b2db      	uxtb	r3, r3
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f023 030a 	bic.w	r3, r3, #10
 8005180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f003 030a 	and.w	r3, r3, #10
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40015000 	.word	0x40015000

080051c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800521e:	b480      	push	{r7}
 8005220:	b087      	sub	sp, #28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f023 0210 	bic.w	r2, r3, #16
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800525c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	b29b      	uxth	r3, r3
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005270:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0210 	bic.w	r2, r3, #16
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	031b      	lsls	r3, r3, #12
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005334:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	b2db      	uxtb	r3, r3
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005348:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80053c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	031b      	lsls	r3, r3, #12
 80053c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	f043 0307 	orr.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	021a      	lsls	r2, r3, #8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	431a      	orrs	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2201      	movs	r2, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e06d      	b.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a30      	ldr	r2, [pc, #192]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d009      	beq.n	8005502 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d004      	beq.n	8005502 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005508:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01d      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d018      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10c      	bne.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	4313      	orrs	r3, r2
 8005584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40015000 	.word	0x40015000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40014000 	.word	0x40014000

080055c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e040      	b.n	8005694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fc f9d2 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8c0 	bl	80057c4 <UART_SetConfig>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e022      	b.n	8005694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa88 	bl	8005b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb0f 	bl	8005cb0 <UART_CheckIdleState>
 8005692:	4603      	mov	r3, r0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	; 0x28
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	f040 8082 	bne.w	80057ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_UART_Transmit+0x26>
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e07a      	b.n	80057bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_UART_Transmit+0x38>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e073      	b.n	80057bc <HAL_UART_Transmit+0x120>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2221      	movs	r2, #33	; 0x21
 80056e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ea:	f7fc faa5 	bl	8001c38 <HAL_GetTick>
 80056ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d108      	bne.n	800571c <HAL_UART_Transmit+0x80>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e003      	b.n	8005724 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800572c:	e02d      	b.n	800578a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fb02 	bl	8005d42 <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e039      	b.n	80057bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575a:	b292      	uxth	r2, r2
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	3302      	adds	r3, #2
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e008      	b.n	8005778 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	b292      	uxth	r2, r2
 8005770:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3301      	adds	r3, #1
 8005776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1cb      	bne.n	800572e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	2140      	movs	r1, #64	; 0x40
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 face 	bl	8005d42 <UART_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e005      	b.n	80057bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4baa      	ldr	r3, [pc, #680]	; (8005a98 <UART_SetConfig+0x2d4>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	6979      	ldr	r1, [r7, #20]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a98      	ldr	r2, [pc, #608]	; (8005a9c <UART_SetConfig+0x2d8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d121      	bne.n	8005884 <UART_SetConfig+0xc0>
 8005840:	4b97      	ldr	r3, [pc, #604]	; (8005aa0 <UART_SetConfig+0x2dc>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	2b03      	cmp	r3, #3
 800584a:	d817      	bhi.n	800587c <UART_SetConfig+0xb8>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x90>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005865 	.word	0x08005865
 8005858:	08005871 	.word	0x08005871
 800585c:	08005877 	.word	0x08005877
 8005860:	0800586b 	.word	0x0800586b
 8005864:	2301      	movs	r3, #1
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e0b2      	b.n	80059d0 <UART_SetConfig+0x20c>
 800586a:	2302      	movs	r3, #2
 800586c:	77fb      	strb	r3, [r7, #31]
 800586e:	e0af      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005870:	2304      	movs	r3, #4
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e0ac      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005876:	2308      	movs	r3, #8
 8005878:	77fb      	strb	r3, [r7, #31]
 800587a:	e0a9      	b.n	80059d0 <UART_SetConfig+0x20c>
 800587c:	2310      	movs	r3, #16
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	bf00      	nop
 8005882:	e0a5      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a86      	ldr	r2, [pc, #536]	; (8005aa4 <UART_SetConfig+0x2e0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d123      	bne.n	80058d6 <UART_SetConfig+0x112>
 800588e:	4b84      	ldr	r3, [pc, #528]	; (8005aa0 <UART_SetConfig+0x2dc>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589a:	d012      	beq.n	80058c2 <UART_SetConfig+0xfe>
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d802      	bhi.n	80058a8 <UART_SetConfig+0xe4>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <UART_SetConfig+0xf2>
 80058a6:	e012      	b.n	80058ce <UART_SetConfig+0x10a>
 80058a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ac:	d00c      	beq.n	80058c8 <UART_SetConfig+0x104>
 80058ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058b2:	d003      	beq.n	80058bc <UART_SetConfig+0xf8>
 80058b4:	e00b      	b.n	80058ce <UART_SetConfig+0x10a>
 80058b6:	2300      	movs	r3, #0
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e089      	b.n	80059d0 <UART_SetConfig+0x20c>
 80058bc:	2302      	movs	r3, #2
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e086      	b.n	80059d0 <UART_SetConfig+0x20c>
 80058c2:	2304      	movs	r3, #4
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e083      	b.n	80059d0 <UART_SetConfig+0x20c>
 80058c8:	2308      	movs	r3, #8
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e080      	b.n	80059d0 <UART_SetConfig+0x20c>
 80058ce:	2310      	movs	r3, #16
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	bf00      	nop
 80058d4:	e07c      	b.n	80059d0 <UART_SetConfig+0x20c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a73      	ldr	r2, [pc, #460]	; (8005aa8 <UART_SetConfig+0x2e4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d123      	bne.n	8005928 <UART_SetConfig+0x164>
 80058e0:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <UART_SetConfig+0x2dc>)
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80058e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058ec:	d012      	beq.n	8005914 <UART_SetConfig+0x150>
 80058ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058f2:	d802      	bhi.n	80058fa <UART_SetConfig+0x136>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <UART_SetConfig+0x144>
 80058f8:	e012      	b.n	8005920 <UART_SetConfig+0x15c>
 80058fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058fe:	d00c      	beq.n	800591a <UART_SetConfig+0x156>
 8005900:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005904:	d003      	beq.n	800590e <UART_SetConfig+0x14a>
 8005906:	e00b      	b.n	8005920 <UART_SetConfig+0x15c>
 8005908:	2300      	movs	r3, #0
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e060      	b.n	80059d0 <UART_SetConfig+0x20c>
 800590e:	2302      	movs	r3, #2
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e05d      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005914:	2304      	movs	r3, #4
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e05a      	b.n	80059d0 <UART_SetConfig+0x20c>
 800591a:	2308      	movs	r3, #8
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e057      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005920:	2310      	movs	r3, #16
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	bf00      	nop
 8005926:	e053      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5f      	ldr	r2, [pc, #380]	; (8005aac <UART_SetConfig+0x2e8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d123      	bne.n	800597a <UART_SetConfig+0x1b6>
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <UART_SetConfig+0x2dc>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593e:	d012      	beq.n	8005966 <UART_SetConfig+0x1a2>
 8005940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005944:	d802      	bhi.n	800594c <UART_SetConfig+0x188>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <UART_SetConfig+0x196>
 800594a:	e012      	b.n	8005972 <UART_SetConfig+0x1ae>
 800594c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005950:	d00c      	beq.n	800596c <UART_SetConfig+0x1a8>
 8005952:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005956:	d003      	beq.n	8005960 <UART_SetConfig+0x19c>
 8005958:	e00b      	b.n	8005972 <UART_SetConfig+0x1ae>
 800595a:	2300      	movs	r3, #0
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e037      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005960:	2302      	movs	r3, #2
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e034      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005966:	2304      	movs	r3, #4
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e031      	b.n	80059d0 <UART_SetConfig+0x20c>
 800596c:	2308      	movs	r3, #8
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e02e      	b.n	80059d0 <UART_SetConfig+0x20c>
 8005972:	2310      	movs	r3, #16
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	bf00      	nop
 8005978:	e02a      	b.n	80059d0 <UART_SetConfig+0x20c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4c      	ldr	r2, [pc, #304]	; (8005ab0 <UART_SetConfig+0x2ec>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d123      	bne.n	80059cc <UART_SetConfig+0x208>
 8005984:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <UART_SetConfig+0x2dc>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800598c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005990:	d012      	beq.n	80059b8 <UART_SetConfig+0x1f4>
 8005992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005996:	d802      	bhi.n	800599e <UART_SetConfig+0x1da>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <UART_SetConfig+0x1e8>
 800599c:	e012      	b.n	80059c4 <UART_SetConfig+0x200>
 800599e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059a2:	d00c      	beq.n	80059be <UART_SetConfig+0x1fa>
 80059a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059a8:	d003      	beq.n	80059b2 <UART_SetConfig+0x1ee>
 80059aa:	e00b      	b.n	80059c4 <UART_SetConfig+0x200>
 80059ac:	2300      	movs	r3, #0
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e00e      	b.n	80059d0 <UART_SetConfig+0x20c>
 80059b2:	2302      	movs	r3, #2
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x20c>
 80059b8:	2304      	movs	r3, #4
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e008      	b.n	80059d0 <UART_SetConfig+0x20c>
 80059be:	2308      	movs	r3, #8
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e005      	b.n	80059d0 <UART_SetConfig+0x20c>
 80059c4:	2310      	movs	r3, #16
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	bf00      	nop
 80059ca:	e001      	b.n	80059d0 <UART_SetConfig+0x20c>
 80059cc:	2310      	movs	r3, #16
 80059ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	d16e      	bne.n	8005ab8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80059da:	7ffb      	ldrb	r3, [r7, #31]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d828      	bhi.n	8005a32 <UART_SetConfig+0x26e>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x224>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fd fcdc 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8005a10:	61b8      	str	r0, [r7, #24]
        break;
 8005a12:	e013      	b.n	8005a3c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fd fcfa 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8005a18:	61b8      	str	r0, [r7, #24]
        break;
 8005a1a:	e00f      	b.n	8005a3c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <UART_SetConfig+0x2f0>)
 8005a1e:	61bb      	str	r3, [r7, #24]
        break;
 8005a20:	e00c      	b.n	8005a3c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fd fc5b 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 8005a26:	61b8      	str	r0, [r7, #24]
        break;
 8005a28:	e008      	b.n	8005a3c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	61bb      	str	r3, [r7, #24]
        break;
 8005a30:	e004      	b.n	8005a3c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	77bb      	strb	r3, [r7, #30]
        break;
 8005a3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8086 	beq.w	8005b50 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	005a      	lsls	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	441a      	add	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d916      	bls.n	8005a90 <UART_SetConfig+0x2cc>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a68:	d212      	bcs.n	8005a90 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f023 030f 	bic.w	r3, r3, #15
 8005a72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	89fb      	ldrh	r3, [r7, #14]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	89fa      	ldrh	r2, [r7, #14]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e05f      	b.n	8005b50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	77bb      	strb	r3, [r7, #30]
 8005a94:	e05c      	b.n	8005b50 <UART_SetConfig+0x38c>
 8005a96:	bf00      	nop
 8005a98:	efff69f3 	.word	0xefff69f3
 8005a9c:	40013800 	.word	0x40013800
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40004400 	.word	0x40004400
 8005aa8:	40004800 	.word	0x40004800
 8005aac:	40004c00 	.word	0x40004c00
 8005ab0:	40005000 	.word	0x40005000
 8005ab4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab8:	7ffb      	ldrb	r3, [r7, #31]
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d827      	bhi.n	8005b0e <UART_SetConfig+0x34a>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x300>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af9 	.word	0x08005af9
 8005ad0:	08005b0f 	.word	0x08005b0f
 8005ad4:	08005aff 	.word	0x08005aff
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005b0f 	.word	0x08005b0f
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	08005b07 	.word	0x08005b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fd fc6e 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8005aec:	61b8      	str	r0, [r7, #24]
        break;
 8005aee:	e013      	b.n	8005b18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af0:	f7fd fc8c 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8005af4:	61b8      	str	r0, [r7, #24]
        break;
 8005af6:	e00f      	b.n	8005b18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af8:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <UART_SetConfig+0x3a4>)
 8005afa:	61bb      	str	r3, [r7, #24]
        break;
 8005afc:	e00c      	b.n	8005b18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fd fbed 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 8005b02:	61b8      	str	r0, [r7, #24]
        break;
 8005b04:	e008      	b.n	8005b18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0a:	61bb      	str	r3, [r7, #24]
        break;
 8005b0c:	e004      	b.n	8005b18 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	77bb      	strb	r3, [r7, #30]
        break;
 8005b16:	bf00      	nop
    }

    if (pclk != 0U)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d018      	beq.n	8005b50 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	085a      	lsrs	r2, r3, #1
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	441a      	add	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d908      	bls.n	8005b4c <UART_SetConfig+0x388>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b40:	d204      	bcs.n	8005b4c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	60da      	str	r2, [r3, #12]
 8005b4a:	e001      	b.n	8005b50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	007a1200 	.word	0x007a1200

08005b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6a:	d10a      	bne.n	8005c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cc0:	f7fb ffba 	bl	8001c38 <HAL_GetTick>
 8005cc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d10e      	bne.n	8005cf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f82d 	bl	8005d42 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e023      	b.n	8005d3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d10e      	bne.n	8005d1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f817 	bl	8005d42 <UART_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00d      	b.n	8005d3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d52:	e05e      	b.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d05a      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5c:	f7fb ff6c 	bl	8001c38 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d302      	bcc.n	8005d72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11b      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e043      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d02c      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc6:	d124      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005de0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e00f      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d091      	beq.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	4603      	mov	r3, r0
 8005e42:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4c:	2b84      	cmp	r3, #132	; 0x84
 8005e4e:	d005      	beq.n	8005e5c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	3303      	adds	r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e70:	f3ef 8305 	mrs	r3, IPSR
 8005e74:	607b      	str	r3, [r7, #4]
  return(result);
 8005e76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e92:	f001 fd25 	bl	80078e0 <vTaskStartScheduler>
  
  return osOK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	b089      	sub	sp, #36	; 0x24
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d020      	beq.n	8005ef0 <osThreadCreate+0x54>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01c      	beq.n	8005ef0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685c      	ldr	r4, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681d      	ldr	r5, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691e      	ldr	r6, [r3, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ffb6 	bl	8005e3a <makeFreeRtosPriority>
 8005ece:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed8:	9202      	str	r2, [sp, #8]
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	9100      	str	r1, [sp, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f001 fb40 	bl	800756a <xTaskCreateStatic>
 8005eea:	4603      	mov	r3, r0
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e01c      	b.n	8005f2a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685c      	ldr	r4, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005efc:	b29e      	uxth	r6, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff98 	bl	8005e3a <makeFreeRtosPriority>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	f107 030c 	add.w	r3, r7, #12
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	9200      	str	r2, [sp, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	4632      	mov	r2, r6
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f001 fb7e 	bl	800761c <xTaskCreate>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e000      	b.n	8005f2c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f34 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <osDelay+0x16>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	e000      	b.n	8005f4c <osDelay+0x18>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fc93 	bl	8007878 <vTaskDelay>
  
  return osOK;
 8005f52:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4619      	mov	r1, r3
 8005f72:	2001      	movs	r0, #1
 8005f74:	f000 fd3c 	bl	80069f0 <xQueueCreateMutexStatic>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	e003      	b.n	8005f84 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	f000 fd1f 	bl	80069c0 <xQueueCreateMutex>
 8005f82:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d010      	beq.n	8005fc0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d10b      	bne.n	8005fbc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	2303      	movs	r3, #3
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f000 fc1c 	bl	80067f0 <xQueueGenericCreateStatic>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	e016      	b.n	8005fea <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e014      	b.n	8005fea <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d110      	bne.n	8005fe8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	2100      	movs	r1, #0
 8005fca:	2001      	movs	r0, #1
 8005fcc:	f000 fc82 	bl	80068d4 <xQueueGenericCreate>
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <osSemaphoreCreate+0x58>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fd22 	bl	8006a28 <xQueueGenericSend>
      return sema;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	e000      	b.n	8005fea <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005fe8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	e03a      	b.n	8006082 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d103      	bne.n	8006020 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006018:	f04f 33ff 	mov.w	r3, #4294967295
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e009      	b.n	8006034 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d006      	beq.n	8006034 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <osSemaphoreWait+0x40>
      ticks = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006034:	f7ff ff19 	bl	8005e6a <inHandlerMode>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d017      	beq.n	800606e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	461a      	mov	r2, r3
 8006044:	2100      	movs	r1, #0
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 f8ea 	bl	8007220 <xQueueReceiveFromISR>
 800604c:	4603      	mov	r3, r0
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006052:	23ff      	movs	r3, #255	; 0xff
 8006054:	e015      	b.n	8006082 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d011      	beq.n	8006080 <osSemaphoreWait+0x8c>
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <osSemaphoreWait+0x98>)
 800605e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	e008      	b.n	8006080 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 ffcd 	bl	8007010 <xQueueSemaphoreTake>
 8006076:	4603      	mov	r3, r0
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800607c:	23ff      	movs	r3, #255	; 0xff
 800607e:	e000      	b.n	8006082 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800609c:	2300      	movs	r3, #0
 800609e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80060a0:	f7ff fee3 	bl	8005e6a <inHandlerMode>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fe47 	bl	8006d44 <xQueueGiveFromISR>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d001      	beq.n	80060c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80060bc:	23ff      	movs	r3, #255	; 0xff
 80060be:	e017      	b.n	80060f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d013      	beq.n	80060ee <osSemaphoreRelease+0x5e>
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <osSemaphoreRelease+0x68>)
 80060c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	e00a      	b.n	80060ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80060d8:	2300      	movs	r3, #0
 80060da:	2200      	movs	r2, #0
 80060dc:	2100      	movs	r1, #0
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fca2 	bl	8006a28 <xQueueGenericSend>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d001      	beq.n	80060ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80060ea:	23ff      	movs	r3, #255	; 0xff
 80060ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	3303      	adds	r3, #3
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006110:	2014      	movs	r0, #20
 8006112:	f002 fc65 	bl	80089e0 <pvPortMalloc>
 8006116:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d046      	beq.n	80061ac <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f002 fc52 	bl	80089e0 <pvPortMalloc>
 800613c:	4602      	mov	r2, r0
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d02b      	beq.n	80061a2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	4618      	mov	r0, r3
 8006156:	f002 fc43 	bl	80089e0 <pvPortMalloc>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d011      	beq.n	800618c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e008      	b.n	8006180 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3301      	adds	r3, #1
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	d3f1      	bcc.n	800616e <osPoolCreate+0x72>
 800618a:	e00f      	b.n	80061ac <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4618      	mov	r0, r3
 8006192:	f002 fce7 	bl	8008b64 <vPortFree>
        vPortFree(thePool);
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f002 fce4 	bl	8008b64 <vPortFree>
        thePool = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e004      	b.n	80061ac <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80061a2:	6978      	ldr	r0, [r7, #20]
 80061a4:	f002 fcde 	bl	8008b64 <vPortFree>
      thePool = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80061ac:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b08a      	sub	sp, #40	; 0x28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80061c6:	f7ff fe50 	bl	8005e6a <inHandlerMode>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061d0:	f3ef 8211 	mrs	r2, BASEPRI
 80061d4:	f04f 0320 	mov.w	r3, #32
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	617a      	str	r2, [r7, #20]
 80061e6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061e8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
 80061ec:	e001      	b.n	80061f2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80061ee:	f002 fadd 	bl	80087ac <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e029      	b.n	800624c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6892      	ldr	r2, [r2, #8]
 8006204:	fbb3 f1f2 	udiv	r1, r3, r2
 8006208:	fb02 f201 	mul.w	r2, r2, r1
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d113      	bne.n	8006246 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4413      	add	r3, r2
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	440b      	add	r3, r1
 800623c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	611a      	str	r2, [r3, #16]
      break;
 8006244:	e007      	b.n	8006256 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	429a      	cmp	r2, r3
 8006254:	d3d0      	bcc.n	80061f8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8006256:	f7ff fe08 	bl	8005e6a <inHandlerMode>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	e001      	b.n	8006270 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800626c:	f002 facc 	bl	8008808 <vPortExitCritical>
  }
  
  return p;
 8006270:	6a3b      	ldr	r3, [r7, #32]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3728      	adds	r7, #40	; 0x28
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <osPoolFree+0x14>
    return osErrorParameter;
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	e030      	b.n	80062f0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <osPoolFree+0x1e>
    return osErrorParameter;
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	e02b      	b.n	80062f0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d201      	bcs.n	80062a6 <osPoolFree+0x2c>
    return osErrorParameter;
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	e024      	b.n	80062f0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80062ba:	fb02 f201 	mul.w	r2, r2, r1
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <osPoolFree+0x4e>
    return osErrorParameter;
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	e013      	b.n	80062f0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d301      	bcc.n	80062e2 <osPoolFree+0x68>
    return osErrorParameter;
 80062de:	2380      	movs	r3, #128	; 0x80
 80062e0:	e006      	b.n	80062f0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b085      	sub	sp, #20
 8006300:	af02      	add	r7, sp, #8
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <osMessageCreate+0x38>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68dc      	ldr	r4, [r3, #12]
 8006326:	2300      	movs	r3, #0
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4623      	mov	r3, r4
 800632c:	f000 fa60 	bl	80067f0 <xQueueGenericCreateStatic>
 8006330:	4603      	mov	r3, r0
 8006332:	e008      	b.n	8006346 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	4619      	mov	r1, r3
 8006340:	f000 fac8 	bl	80068d4 <xQueueGenericCreate>
 8006344:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}

0800634e <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800634e:	b590      	push	{r4, r7, lr}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689c      	ldr	r4, [r3, #8]
 800636c:	200c      	movs	r0, #12
 800636e:	f002 fb37 	bl	80089e0 <pvPortMalloc>
 8006372:	4603      	mov	r3, r0
 8006374:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <osMailCreate+0x36>
    return NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	e038      	b.n	80063f6 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	681c      	ldr	r4, [r3, #0]
 8006398:	2200      	movs	r2, #0
 800639a:	2104      	movs	r1, #4
 800639c:	f000 fa9a 	bl	80068d4 <xQueueGenericCreate>
 80063a0:	4603      	mov	r3, r0
 80063a2:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f002 fbd4 	bl	8008b64 <vPortFree>
    return NULL;
 80063bc:	2300      	movs	r3, #0
 80063be:	e01a      	b.n	80063f6 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	681c      	ldr	r4, [r3, #0]
 80063c6:	f107 030c 	add.w	r3, r7, #12
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fe96 	bl	80060fc <osPoolCreate>
 80063d0:	4603      	mov	r3, r0
 80063d2:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d107      	bne.n	80063f0 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f002 fbbc 	bl	8008b64 <vPortFree>
    return NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e002      	b.n	80063f6 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd90      	pop	{r4, r7, pc}

080063fe <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <osMailAlloc+0x14>
    return NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	e006      	b.n	8006420 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fecd 	bl	80061b6 <osPoolAlloc>
 800641c:	60f8      	str	r0, [r7, #12]
  
  return p;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <osMailPut+0x14>
    return osErrorParameter;
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	e02c      	b.n	8006496 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8006440:	f7ff fd13 	bl	8005e6a <inHandlerMode>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d018      	beq.n	800647c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6858      	ldr	r0, [r3, #4]
 800644e:	f107 020c 	add.w	r2, r7, #12
 8006452:	4639      	mov	r1, r7
 8006454:	2300      	movs	r3, #0
 8006456:	f000 fbe1 	bl	8006c1c <xQueueGenericSendFromISR>
 800645a:	4603      	mov	r3, r0
 800645c:	2b01      	cmp	r3, #1
 800645e:	d001      	beq.n	8006464 <osMailPut+0x3c>
      return osErrorOS;
 8006460:	23ff      	movs	r3, #255	; 0xff
 8006462:	e018      	b.n	8006496 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d014      	beq.n	8006494 <osMailPut+0x6c>
 800646a:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <osMailPut+0x78>)
 800646c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	e00b      	b.n	8006494 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6858      	ldr	r0, [r3, #4]
 8006480:	4639      	mov	r1, r7
 8006482:	2300      	movs	r3, #0
 8006484:	2200      	movs	r2, #0
 8006486:	f000 facf 	bl	8006a28 <xQueueGenericSend>
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <osMailPut+0x6c>
      return osErrorOS;
 8006490:	23ff      	movs	r3, #255	; 0xff
 8006492:	e000      	b.n	8006496 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b08b      	sub	sp, #44	; 0x2c
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80064ba:	2380      	movs	r3, #128	; 0x80
 80064bc:	617b      	str	r3, [r7, #20]
    return event;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	461c      	mov	r4, r3
 80064c2:	f107 0314 	add.w	r3, r7, #20
 80064c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064ce:	e056      	b.n	800657e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d103      	bne.n	80064e8 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	e009      	b.n	80064fc <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d006      	beq.n	80064fc <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <osMailGet+0x58>
      ticks = 1;
 80064f8:	2301      	movs	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80064fc:	f7ff fcb5 	bl	8005e6a <inHandlerMode>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01d      	beq.n	8006542 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6858      	ldr	r0, [r3, #4]
 800650a:	f107 0220 	add.w	r2, r7, #32
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	f000 fe83 	bl	8007220 <xQueueReceiveFromISR>
 800651a:	4603      	mov	r3, r0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d102      	bne.n	8006526 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8006520:	2320      	movs	r3, #32
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e001      	b.n	800652a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01e      	beq.n	800656e <osMailGet+0xca>
 8006530:	4b15      	ldr	r3, [pc, #84]	; (8006588 <osMailGet+0xe4>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	e015      	b.n	800656e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6858      	ldr	r0, [r3, #4]
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	3304      	adds	r3, #4
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	4619      	mov	r1, r3
 8006550:	f000 fc82 	bl	8006e58 <xQueueReceive>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d102      	bne.n	8006560 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800655a:	2320      	movs	r3, #32
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	e006      	b.n	800656e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <osMailGet+0xc6>
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <osMailGet+0xc8>
 800656a:	2340      	movs	r3, #64	; 0x40
 800656c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	461c      	mov	r4, r3
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800657a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	372c      	adds	r7, #44	; 0x2c
 8006582:	46bd      	mov	sp, r7
 8006584:	bd90      	pop	{r4, r7, pc}
 8006586:	bf00      	nop
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <osMailFree+0x14>
    return osErrorParameter;
 800659c:	2380      	movs	r3, #128	; 0x80
 800659e:	e006      	b.n	80065ae <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fe67 	bl	800627a <osPoolFree>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f103 0208 	add.w	r2, r3, #8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f103 0208 	add.w	r2, r3, #8
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f103 0208 	add.w	r2, r3, #8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d103      	bne.n	8006678 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	e00c      	b.n	8006692 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3308      	adds	r3, #8
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e002      	b.n	8006686 <vListInsert+0x2e>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d2f6      	bcs.n	8006680 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6892      	ldr	r2, [r2, #8]
 80066e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6852      	ldr	r2, [r2, #4]
 80066ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d103      	bne.n	80066fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	1e5a      	subs	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <xQueueGenericReset+0x28>
	__asm volatile
 8006734:	f04f 0320 	mov.w	r3, #32
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	e7fe      	b.n	8006746 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006748:	f002 f830 	bl	80087ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	3b01      	subs	r3, #1
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	22ff      	movs	r2, #255	; 0xff
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	22ff      	movs	r2, #255	; 0xff
 8006794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d114      	bne.n	80067c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01a      	beq.n	80067dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3310      	adds	r3, #16
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fada 	bl	8007d64 <xTaskRemoveFromEventList>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067b6:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <xQueueGenericReset+0xcc>)
 80067b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	e009      	b.n	80067dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3310      	adds	r3, #16
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fef2 	bl	80065b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3324      	adds	r3, #36	; 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff feed 	bl	80065b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067dc:	f002 f814 	bl	8008808 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067e0:	2301      	movs	r3, #1
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	; 0x38
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d109      	bne.n	8006818 <xQueueGenericCreateStatic+0x28>
 8006804:	f04f 0320 	mov.w	r3, #32
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
 8006816:	e7fe      	b.n	8006816 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <xQueueGenericCreateStatic+0x42>
 800681e:	f04f 0320 	mov.w	r3, #32
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
 8006830:	e7fe      	b.n	8006830 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <xQueueGenericCreateStatic+0x4e>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <xQueueGenericCreateStatic+0x52>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueGenericCreateStatic+0x54>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <xQueueGenericCreateStatic+0x6c>
 8006848:	f04f 0320 	mov.w	r3, #32
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	e7fe      	b.n	800685a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <xQueueGenericCreateStatic+0x78>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <xQueueGenericCreateStatic+0x7c>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <xQueueGenericCreateStatic+0x7e>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <xQueueGenericCreateStatic+0x96>
 8006872:	f04f 0320 	mov.w	r3, #32
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	e7fe      	b.n	8006884 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006886:	2348      	movs	r3, #72	; 0x48
 8006888:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b48      	cmp	r3, #72	; 0x48
 800688e:	d009      	beq.n	80068a4 <xQueueGenericCreateStatic+0xb4>
 8006890:	f04f 0320 	mov.w	r3, #32
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e7fe      	b.n	80068a2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00d      	beq.n	80068ca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f842 	bl	800694e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3730      	adds	r7, #48	; 0x30
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d109      	bne.n	80068fc <xQueueGenericCreate+0x28>
 80068e8:	f04f 0320 	mov.w	r3, #32
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	e7fe      	b.n	80068fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	e004      	b.n	8006912 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3348      	adds	r3, #72	; 0x48
 8006916:	4618      	mov	r0, r3
 8006918:	f002 f862 	bl	80089e0 <pvPortMalloc>
 800691c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00f      	beq.n	8006944 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	3348      	adds	r3, #72	; 0x48
 8006928:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006932:	79fa      	ldrb	r2, [r7, #7]
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f805 	bl	800694e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006944:	69bb      	ldr	r3, [r7, #24]
	}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e002      	b.n	8006970 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800697c:	2101      	movs	r1, #1
 800697e:	69b8      	ldr	r0, [r7, #24]
 8006980:	f7ff fece 	bl	8006720 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00e      	beq.n	80069b8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069ac:	2300      	movs	r3, #0
 80069ae:	2200      	movs	r2, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f838 	bl	8006a28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069ca:	2301      	movs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	2300      	movs	r3, #0
 80069d0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	461a      	mov	r2, r3
 80069d6:	6939      	ldr	r1, [r7, #16]
 80069d8:	6978      	ldr	r0, [r7, #20]
 80069da:	f7ff ff7b 	bl	80068d4 <xQueueGenericCreate>
 80069de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff ffd3 	bl	800698c <prvInitialiseMutex>

		return pxNewQueue;
 80069e6:	68fb      	ldr	r3, [r7, #12]
	}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	4603      	mov	r3, r0
 80069f8:	6039      	str	r1, [r7, #0]
 80069fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069fc:	2301      	movs	r3, #1
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	6939      	ldr	r1, [r7, #16]
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f7ff feee 	bl	80067f0 <xQueueGenericCreateStatic>
 8006a14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff ffb8 	bl	800698c <prvInitialiseMutex>

		return pxNewQueue;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
	}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	; 0x38
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a36:	2300      	movs	r3, #0
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <xQueueGenericSend+0x30>
 8006a44:	f04f 0320 	mov.w	r3, #32
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a56:	e7fe      	b.n	8006a56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d103      	bne.n	8006a66 <xQueueGenericSend+0x3e>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <xQueueGenericSend+0x42>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericSend+0x44>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <xQueueGenericSend+0x5c>
 8006a70:	f04f 0320 	mov.w	r3, #32
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
 8006a82:	e7fe      	b.n	8006a82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d103      	bne.n	8006a92 <xQueueGenericSend+0x6a>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <xQueueGenericSend+0x6e>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <xQueueGenericSend+0x70>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d109      	bne.n	8006ab0 <xQueueGenericSend+0x88>
 8006a9c:	f04f 0320 	mov.w	r3, #32
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	623b      	str	r3, [r7, #32]
 8006aae:	e7fe      	b.n	8006aae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ab0:	f001 fb14 	bl	80080dc <xTaskGetSchedulerState>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <xQueueGenericSend+0x98>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <xQueueGenericSend+0x9c>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <xQueueGenericSend+0x9e>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <xQueueGenericSend+0xb6>
 8006aca:	f04f 0320 	mov.w	r3, #32
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	e7fe      	b.n	8006adc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ade:	f001 fe65 	bl	80087ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d302      	bcc.n	8006af4 <xQueueGenericSend+0xcc>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d129      	bne.n	8006b48 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006afa:	f000 fc26 	bl	800734a <prvCopyDataToQueue>
 8006afe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d010      	beq.n	8006b2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	3324      	adds	r3, #36	; 0x24
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 f929 	bl	8007d64 <xTaskRemoveFromEventList>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d013      	beq.n	8006b40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b18:	4b3f      	ldr	r3, [pc, #252]	; (8006c18 <xQueueGenericSend+0x1f0>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	e00a      	b.n	8006b40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b30:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <xQueueGenericSend+0x1f0>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b40:	f001 fe62 	bl	8008808 <vPortExitCritical>
				return pdPASS;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e063      	b.n	8006c10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d103      	bne.n	8006b56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b4e:	f001 fe5b 	bl	8008808 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e05c      	b.n	8006c10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b5c:	f107 0314 	add.w	r3, r7, #20
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 f961 	bl	8007e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b66:	2301      	movs	r3, #1
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b6a:	f001 fe4d 	bl	8008808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b6e:	f000 ff15 	bl	800799c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b72:	f001 fe1b 	bl	80087ac <vPortEnterCritical>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d103      	bne.n	8006b8c <xQueueGenericSend+0x164>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <xQueueGenericSend+0x17a>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba2:	f001 fe31 	bl	8008808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ba6:	1d3a      	adds	r2, r7, #4
 8006ba8:	f107 0314 	add.w	r3, r7, #20
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 f950 	bl	8007e54 <xTaskCheckForTimeOut>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d124      	bne.n	8006c04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bbc:	f000 fcbd 	bl	800753a <prvIsQueueFull>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d018      	beq.n	8006bf8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	3310      	adds	r3, #16
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f8a4 	bl	8007d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bd6:	f000 fc48 	bl	800746a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bda:	f000 feed 	bl	80079b8 <xTaskResumeAll>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f47f af7c 	bne.w	8006ade <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <xQueueGenericSend+0x1f0>)
 8006be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	e772      	b.n	8006ade <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fc36 	bl	800746a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bfe:	f000 fedb 	bl	80079b8 <xTaskResumeAll>
 8006c02:	e76c      	b.n	8006ade <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c06:	f000 fc30 	bl	800746a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c0a:	f000 fed5 	bl	80079b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c0e:	2300      	movs	r3, #0
		}
	}
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3738      	adds	r7, #56	; 0x38
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	; 0x38
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <xQueueGenericSendFromISR+0x2c>
 8006c34:	f04f 0320 	mov.w	r3, #32
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
 8006c46:	e7fe      	b.n	8006c46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSendFromISR+0x3a>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <xQueueGenericSendFromISR+0x3e>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xQueueGenericSendFromISR+0x40>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <xQueueGenericSendFromISR+0x58>
 8006c60:	f04f 0320 	mov.w	r3, #32
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	e7fe      	b.n	8006c72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d103      	bne.n	8006c82 <xQueueGenericSendFromISR+0x66>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <xQueueGenericSendFromISR+0x6a>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <xQueueGenericSendFromISR+0x6c>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <xQueueGenericSendFromISR+0x84>
 8006c8c:	f04f 0320 	mov.w	r3, #32
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e7fe      	b.n	8006c9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ca0:	f001 fe60 	bl	8008964 <vPortValidateInterruptPriority>
	__asm volatile
 8006ca4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ca8:	f04f 0320 	mov.w	r3, #32
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	61ba      	str	r2, [r7, #24]
 8006cba:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d302      	bcc.n	8006cd2 <xQueueGenericSendFromISR+0xb6>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d12c      	bne.n	8006d2c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce2:	f000 fb32 	bl	800734a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ce6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d112      	bne.n	8006d16 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d016      	beq.n	8006d26 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f831 	bl	8007d64 <xTaskRemoveFromEventList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00e      	beq.n	8006d26 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e007      	b.n	8006d26 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	b25a      	sxtb	r2, r3
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d26:	2301      	movs	r3, #1
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d2a:	e001      	b.n	8006d30 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3738      	adds	r7, #56	; 0x38
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08e      	sub	sp, #56	; 0x38
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <xQueueGiveFromISR+0x28>
	__asm volatile
 8006d58:	f04f 0320 	mov.w	r3, #32
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	e7fe      	b.n	8006d6a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <xQueueGiveFromISR+0x44>
 8006d74:	f04f 0320 	mov.w	r3, #32
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	e7fe      	b.n	8006d86 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <xQueueGiveFromISR+0x54>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <xQueueGiveFromISR+0x58>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <xQueueGiveFromISR+0x5a>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <xQueueGiveFromISR+0x72>
 8006da2:	f04f 0320 	mov.w	r3, #32
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	e7fe      	b.n	8006db4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006db6:	f001 fdd5 	bl	8008964 <vPortValidateInterruptPriority>
	__asm volatile
 8006dba:	f3ef 8211 	mrs	r2, BASEPRI
 8006dbe:	f04f 0320 	mov.w	r3, #32
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	617a      	str	r2, [r7, #20]
 8006dd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006dd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d22b      	bcs.n	8006e3e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d112      	bne.n	8006e28 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d016      	beq.n	8006e38 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	3324      	adds	r3, #36	; 0x24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 ffa8 	bl	8007d64 <xTaskRemoveFromEventList>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00b      	beq.n	8006e38 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e007      	b.n	8006e38 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	b25a      	sxtb	r2, r3
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3c:	e001      	b.n	8006e42 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3738      	adds	r7, #56	; 0x38
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08c      	sub	sp, #48	; 0x30
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <xQueueReceive+0x2e>
	__asm volatile
 8006e72:	f04f 0320 	mov.w	r3, #32
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	e7fe      	b.n	8006e84 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <xQueueReceive+0x3c>
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <xQueueReceive+0x40>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <xQueueReceive+0x42>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <xQueueReceive+0x5a>
 8006e9e:	f04f 0320 	mov.w	r3, #32
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	61fb      	str	r3, [r7, #28]
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eb2:	f001 f913 	bl	80080dc <xTaskGetSchedulerState>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <xQueueReceive+0x6a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <xQueueReceive+0x6e>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <xQueueReceive+0x70>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <xQueueReceive+0x88>
 8006ecc:	f04f 0320 	mov.w	r3, #32
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e7fe      	b.n	8006ede <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ee0:	f001 fc64 	bl	80087ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01f      	beq.n	8006f30 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef4:	f000 fa93 	bl	800741e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	1e5a      	subs	r2, r3, #1
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00f      	beq.n	8006f28 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 ff29 	bl	8007d64 <xTaskRemoveFromEventList>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f18:	4b3c      	ldr	r3, [pc, #240]	; (800700c <xQueueReceive+0x1b4>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f28:	f001 fc6e 	bl	8008808 <vPortExitCritical>
				return pdPASS;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e069      	b.n	8007004 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f36:	f001 fc67 	bl	8008808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e062      	b.n	8007004 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f44:	f107 0310 	add.w	r3, r7, #16
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 ff6d 	bl	8007e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f52:	f001 fc59 	bl	8008808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f56:	f000 fd21 	bl	800799c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f5a:	f001 fc27 	bl	80087ac <vPortEnterCritical>
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f64:	b25b      	sxtb	r3, r3
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d103      	bne.n	8006f74 <xQueueReceive+0x11c>
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f7a:	b25b      	sxtb	r3, r3
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d103      	bne.n	8006f8a <xQueueReceive+0x132>
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f8a:	f001 fc3d 	bl	8008808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f8e:	1d3a      	adds	r2, r7, #4
 8006f90:	f107 0310 	add.w	r3, r7, #16
 8006f94:	4611      	mov	r1, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 ff5c 	bl	8007e54 <xTaskCheckForTimeOut>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d123      	bne.n	8006fea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa4:	f000 fab3 	bl	800750e <prvIsQueueEmpty>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d017      	beq.n	8006fde <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	3324      	adds	r3, #36	; 0x24
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 feb0 	bl	8007d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fbe:	f000 fa54 	bl	800746a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fc2:	f000 fcf9 	bl	80079b8 <xTaskResumeAll>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d189      	bne.n	8006ee0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xQueueReceive+0x1b4>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	e780      	b.n	8006ee0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe0:	f000 fa43 	bl	800746a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fe4:	f000 fce8 	bl	80079b8 <xTaskResumeAll>
 8006fe8:	e77a      	b.n	8006ee0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fec:	f000 fa3d 	bl	800746a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ff0:	f000 fce2 	bl	80079b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff6:	f000 fa8a 	bl	800750e <prvIsQueueEmpty>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f43f af6f 	beq.w	8006ee0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007002:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007004:	4618      	mov	r0, r3
 8007006:	3730      	adds	r7, #48	; 0x30
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08e      	sub	sp, #56	; 0x38
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800701a:	2300      	movs	r3, #0
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007022:	2300      	movs	r3, #0
 8007024:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <xQueueSemaphoreTake+0x30>
 800702c:	f04f 0320 	mov.w	r3, #32
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	623b      	str	r3, [r7, #32]
 800703e:	e7fe      	b.n	800703e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <xQueueSemaphoreTake+0x4c>
 8007048:	f04f 0320 	mov.w	r3, #32
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	e7fe      	b.n	800705a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800705c:	f001 f83e 	bl	80080dc <xTaskGetSchedulerState>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <xQueueSemaphoreTake+0x5c>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <xQueueSemaphoreTake+0x60>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <xQueueSemaphoreTake+0x62>
 8007070:	2300      	movs	r3, #0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <xQueueSemaphoreTake+0x7a>
 8007076:	f04f 0320 	mov.w	r3, #32
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	e7fe      	b.n	8007088 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800708a:	f001 fb8f 	bl	80087ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d024      	beq.n	80070e4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	1e5a      	subs	r2, r3, #1
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80070aa:	f001 f9dd 	bl	8008468 <pvTaskIncrementMutexHeldCount>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00f      	beq.n	80070dc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	3310      	adds	r3, #16
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fe4f 	bl	8007d64 <xTaskRemoveFromEventList>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070cc:	4b53      	ldr	r3, [pc, #332]	; (800721c <xQueueSemaphoreTake+0x20c>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070dc:	f001 fb94 	bl	8008808 <vPortExitCritical>
				return pdPASS;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e096      	b.n	8007212 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d110      	bne.n	800710c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <xQueueSemaphoreTake+0xf4>
 80070f0:	f04f 0320 	mov.w	r3, #32
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e7fe      	b.n	8007102 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007104:	f001 fb80 	bl	8008808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007108:	2300      	movs	r3, #0
 800710a:	e082      	b.n	8007212 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800710c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007112:	f107 030c 	add.w	r3, r7, #12
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fe86 	bl	8007e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007120:	f001 fb72 	bl	8008808 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007124:	f000 fc3a 	bl	800799c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007128:	f001 fb40 	bl	80087ac <vPortEnterCritical>
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007132:	b25b      	sxtb	r3, r3
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d103      	bne.n	8007142 <xQueueSemaphoreTake+0x132>
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007148:	b25b      	sxtb	r3, r3
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d103      	bne.n	8007158 <xQueueSemaphoreTake+0x148>
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007158:	f001 fb56 	bl	8008808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800715c:	463a      	mov	r2, r7
 800715e:	f107 030c 	add.w	r3, r7, #12
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fe75 	bl	8007e54 <xTaskCheckForTimeOut>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d132      	bne.n	80071d6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007172:	f000 f9cc 	bl	800750e <prvIsQueueEmpty>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d026      	beq.n	80071ca <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007184:	f001 fb12 	bl	80087ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	f000 ffc3 	bl	8008118 <xTaskPriorityInherit>
 8007192:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007194:	f001 fb38 	bl	8008808 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	3324      	adds	r3, #36	; 0x24
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fdbb 	bl	8007d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071a8:	f000 f95f 	bl	800746a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071ac:	f000 fc04 	bl	80079b8 <xTaskResumeAll>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f47f af69 	bne.w	800708a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80071b8:	4b18      	ldr	r3, [pc, #96]	; (800721c <xQueueSemaphoreTake+0x20c>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	e75f      	b.n	800708a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80071ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071cc:	f000 f94d 	bl	800746a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071d0:	f000 fbf2 	bl	80079b8 <xTaskResumeAll>
 80071d4:	e759      	b.n	800708a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80071d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071d8:	f000 f947 	bl	800746a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071dc:	f000 fbec 	bl	80079b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071e2:	f000 f994 	bl	800750e <prvIsQueueEmpty>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f43f af4e 	beq.w	800708a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80071f4:	f001 fada 	bl	80087ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071fa:	f000 f88e 	bl	800731a <prvGetDisinheritPriorityAfterTimeout>
 80071fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f890 	bl	800832c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800720c:	f001 fafc 	bl	8008808 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007210:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007212:	4618      	mov	r0, r3
 8007214:	3738      	adds	r7, #56	; 0x38
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <xQueueReceiveFromISR+0x2a>
 8007236:	f04f 0320 	mov.w	r3, #32
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	623b      	str	r3, [r7, #32]
 8007248:	e7fe      	b.n	8007248 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d103      	bne.n	8007258 <xQueueReceiveFromISR+0x38>
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <xQueueReceiveFromISR+0x3c>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <xQueueReceiveFromISR+0x3e>
 800725c:	2300      	movs	r3, #0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <xQueueReceiveFromISR+0x56>
 8007262:	f04f 0320 	mov.w	r3, #32
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	e7fe      	b.n	8007274 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007276:	f001 fb75 	bl	8008964 <vPortValidateInterruptPriority>
	__asm volatile
 800727a:	f3ef 8211 	mrs	r2, BASEPRI
 800727e:	f04f 0320 	mov.w	r3, #32
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	61ba      	str	r2, [r7, #24]
 8007290:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007292:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d02f      	beq.n	8007302 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b0:	f000 f8b5 	bl	800741e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	1e5a      	subs	r2, r3, #1
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80072bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d112      	bne.n	80072ec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d016      	beq.n	80072fc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	3310      	adds	r3, #16
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fd46 	bl	8007d64 <xTaskRemoveFromEventList>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00e      	beq.n	80072fc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	e007      	b.n	80072fc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f0:	3301      	adds	r3, #1
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	b25a      	sxtb	r2, r3
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80072fc:	2301      	movs	r3, #1
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	e001      	b.n	8007306 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007302:	2300      	movs	r3, #0
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	613b      	str	r3, [r7, #16]
	__asm volatile
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007312:	4618      	mov	r0, r3
 8007314:	3738      	adds	r7, #56	; 0x38
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f1c3 0307 	rsb	r3, r3, #7
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	e001      	b.n	800733c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800733c:	68fb      	ldr	r3, [r7, #12]
	}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10d      	bne.n	8007384 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d14d      	bne.n	800740c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 ff55 	bl	8008224 <xTaskPriorityDisinherit>
 800737a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	e043      	b.n	800740c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d119      	bne.n	80073be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6898      	ldr	r0, [r3, #8]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	461a      	mov	r2, r3
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	f001 fd1d 	bl	8008dd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	441a      	add	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d32b      	bcc.n	800740c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	609a      	str	r2, [r3, #8]
 80073bc:	e026      	b.n	800740c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68d8      	ldr	r0, [r3, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	461a      	mov	r2, r3
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	f001 fd03 	bl	8008dd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	425b      	negs	r3, r3
 80073d8:	441a      	add	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d207      	bcs.n	80073fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	425b      	negs	r3, r3
 80073f4:	441a      	add	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d105      	bne.n	800740c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3b01      	subs	r3, #1
 800740a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007414:	697b      	ldr	r3, [r7, #20]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d018      	beq.n	8007462 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	441a      	add	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d303      	bcc.n	8007452 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68d9      	ldr	r1, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	461a      	mov	r2, r3
 800745c:	6838      	ldr	r0, [r7, #0]
 800745e:	f001 fcb9 	bl	8008dd4 <memcpy>
	}
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007472:	f001 f99b 	bl	80087ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800747c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800747e:	e011      	b.n	80074a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3324      	adds	r3, #36	; 0x24
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fc69 	bl	8007d64 <xTaskRemoveFromEventList>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007498:	f000 fd3c 	bl	8007f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	3b01      	subs	r3, #1
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dce9      	bgt.n	8007480 <prvUnlockQueue+0x16>
 80074ac:	e000      	b.n	80074b0 <prvUnlockQueue+0x46>
					break;
 80074ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	22ff      	movs	r2, #255	; 0xff
 80074b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074b8:	f001 f9a6 	bl	8008808 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074bc:	f001 f976 	bl	80087ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074c8:	e011      	b.n	80074ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d012      	beq.n	80074f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3310      	adds	r3, #16
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fc44 	bl	8007d64 <xTaskRemoveFromEventList>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074e2:	f000 fd17 	bl	8007f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dce9      	bgt.n	80074ca <prvUnlockQueue+0x60>
 80074f6:	e000      	b.n	80074fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007502:	f001 f981 	bl	8008808 <vPortExitCritical>
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007516:	f001 f949 	bl	80087ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007522:	2301      	movs	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e001      	b.n	800752c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800752c:	f001 f96c 	bl	8008808 <vPortExitCritical>

	return xReturn;
 8007530:	68fb      	ldr	r3, [r7, #12]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007542:	f001 f933 	bl	80087ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	429a      	cmp	r2, r3
 8007550:	d102      	bne.n	8007558 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e001      	b.n	800755c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800755c:	f001 f954 	bl	8008808 <vPortExitCritical>

	return xReturn;
 8007560:	68fb      	ldr	r3, [r7, #12]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800756a:	b580      	push	{r7, lr}
 800756c:	b08e      	sub	sp, #56	; 0x38
 800756e:	af04      	add	r7, sp, #16
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <xTaskCreateStatic+0x28>
	__asm volatile
 800757e:	f04f 0320 	mov.w	r3, #32
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	e7fe      	b.n	8007590 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	d109      	bne.n	80075ac <xTaskCreateStatic+0x42>
 8007598:	f04f 0320 	mov.w	r3, #32
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	e7fe      	b.n	80075aa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075ac:	235c      	movs	r3, #92	; 0x5c
 80075ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b5c      	cmp	r3, #92	; 0x5c
 80075b4:	d009      	beq.n	80075ca <xTaskCreateStatic+0x60>
 80075b6:	f04f 0320 	mov.w	r3, #32
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	e7fe      	b.n	80075c8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01e      	beq.n	800760e <xTaskCreateStatic+0xa4>
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075e8:	2300      	movs	r3, #0
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f850 	bl	80076a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007608:	f000 f8cc 	bl	80077a4 <prvAddNewTaskToReadyList>
 800760c:	e001      	b.n	8007612 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007612:	697b      	ldr	r3, [r7, #20]
	}
 8007614:	4618      	mov	r0, r3
 8007616:	3728      	adds	r7, #40	; 0x28
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08c      	sub	sp, #48	; 0x30
 8007620:	af04      	add	r7, sp, #16
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f9d5 	bl	80089e0 <pvPortMalloc>
 8007636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800763e:	205c      	movs	r0, #92	; 0x5c
 8007640:	f001 f9ce 	bl	80089e0 <pvPortMalloc>
 8007644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
 8007652:	e005      	b.n	8007660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007654:	6978      	ldr	r0, [r7, #20]
 8007656:	f001 fa85 	bl	8008b64 <vPortFree>
 800765a:	e001      	b.n	8007660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d017      	beq.n	8007696 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	2300      	movs	r3, #0
 8007672:	9303      	str	r3, [sp, #12]
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	9302      	str	r3, [sp, #8]
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f80e 	bl	80076a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800768a:	69f8      	ldr	r0, [r7, #28]
 800768c:	f000 f88a 	bl	80077a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007690:	2301      	movs	r3, #1
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	e002      	b.n	800769c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007696:	f04f 33ff 	mov.w	r3, #4294967295
 800769a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800769c:	69bb      	ldr	r3, [r7, #24]
	}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b088      	sub	sp, #32
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076be:	3b01      	subs	r3, #1
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d009      	beq.n	80076ec <prvInitialiseNewTask+0x46>
 80076d8:	f04f 0320 	mov.w	r3, #32
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e7fe      	b.n	80076ea <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e012      	b.n	8007718 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	3334      	adds	r3, #52	; 0x34
 8007702:	460a      	mov	r2, r1
 8007704:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d006      	beq.n	8007720 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3301      	adds	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2b17      	cmp	r3, #23
 800771c:	d9e9      	bls.n	80076f2 <prvInitialiseNewTask+0x4c>
 800771e:	e000      	b.n	8007722 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007720:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2200      	movs	r2, #0
 8007726:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	2b06      	cmp	r3, #6
 800772e:	d901      	bls.n	8007734 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007730:	2306      	movs	r3, #6
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007738:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800773e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	2200      	movs	r2, #0
 8007744:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	3304      	adds	r3, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe ff53 	bl	80065f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	3318      	adds	r3, #24
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe ff4e 	bl	80065f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	f1c3 0207 	rsb	r2, r3, #7
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	2200      	movs	r2, #0
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	68f9      	ldr	r1, [r7, #12]
 8007782:	69b8      	ldr	r0, [r7, #24]
 8007784:	f000 feea 	bl	800855c <pxPortInitialiseStack>
 8007788:	4602      	mov	r2, r0
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800779a:	bf00      	nop
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077ac:	f000 fffe 	bl	80087ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077b0:	4b2a      	ldr	r3, [pc, #168]	; (800785c <prvAddNewTaskToReadyList+0xb8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	4a29      	ldr	r2, [pc, #164]	; (800785c <prvAddNewTaskToReadyList+0xb8>)
 80077b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077ba:	4b29      	ldr	r3, [pc, #164]	; (8007860 <prvAddNewTaskToReadyList+0xbc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077c2:	4a27      	ldr	r2, [pc, #156]	; (8007860 <prvAddNewTaskToReadyList+0xbc>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077c8:	4b24      	ldr	r3, [pc, #144]	; (800785c <prvAddNewTaskToReadyList+0xb8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d110      	bne.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077d0:	f000 fbc4 	bl	8007f5c <prvInitialiseTaskLists>
 80077d4:	e00d      	b.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077d6:	4b23      	ldr	r3, [pc, #140]	; (8007864 <prvAddNewTaskToReadyList+0xc0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <prvAddNewTaskToReadyList+0xbc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d802      	bhi.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077ec:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <prvAddNewTaskToReadyList+0xbc>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <prvAddNewTaskToReadyList+0xc4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <prvAddNewTaskToReadyList+0xc4>)
 80077fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	2201      	movs	r2, #1
 8007802:	409a      	lsls	r2, r3
 8007804:	4b19      	ldr	r3, [pc, #100]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4313      	orrs	r3, r2
 800780a:	4a18      	ldr	r2, [pc, #96]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4a15      	ldr	r2, [pc, #84]	; (8007870 <prvAddNewTaskToReadyList+0xcc>)
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7fe fef3 	bl	8006610 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800782a:	f000 ffed 	bl	8008808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <prvAddNewTaskToReadyList+0xc0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007836:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <prvAddNewTaskToReadyList+0xbc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	429a      	cmp	r2, r3
 8007842:	d207      	bcs.n	8007854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <prvAddNewTaskToReadyList+0xd0>)
 8007846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000388 	.word	0x20000388
 8007860:	20000288 	.word	0x20000288
 8007864:	20000394 	.word	0x20000394
 8007868:	200003a4 	.word	0x200003a4
 800786c:	20000390 	.word	0x20000390
 8007870:	2000028c 	.word	0x2000028c
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d016      	beq.n	80078b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800788a:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <vTaskDelay+0x60>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <vTaskDelay+0x2e>
 8007892:	f04f 0320 	mov.w	r3, #32
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60bb      	str	r3, [r7, #8]
 80078a4:	e7fe      	b.n	80078a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80078a6:	f000 f879 	bl	800799c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078aa:	2100      	movs	r1, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fdef 	bl	8008490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078b2:	f000 f881 	bl	80079b8 <xTaskResumeAll>
 80078b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <vTaskDelay+0x64>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200003b0 	.word	0x200003b0
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ee:	463a      	mov	r2, r7
 80078f0:	1d39      	adds	r1, r7, #4
 80078f2:	f107 0308 	add.w	r3, r7, #8
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7f9 f890 	bl	8000a1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	9202      	str	r2, [sp, #8]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	2300      	movs	r3, #0
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2300      	movs	r3, #0
 800790c:	460a      	mov	r2, r1
 800790e:	491d      	ldr	r1, [pc, #116]	; (8007984 <vTaskStartScheduler+0xa4>)
 8007910:	481d      	ldr	r0, [pc, #116]	; (8007988 <vTaskStartScheduler+0xa8>)
 8007912:	f7ff fe2a 	bl	800756a <xTaskCreateStatic>
 8007916:	4602      	mov	r2, r0
 8007918:	4b1c      	ldr	r3, [pc, #112]	; (800798c <vTaskStartScheduler+0xac>)
 800791a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800791c:	4b1b      	ldr	r3, [pc, #108]	; (800798c <vTaskStartScheduler+0xac>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e001      	b.n	800792e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d115      	bne.n	8007960 <vTaskStartScheduler+0x80>
 8007934:	f04f 0320 	mov.w	r3, #32
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <vTaskStartScheduler+0xb0>)
 8007948:	f04f 32ff 	mov.w	r2, #4294967295
 800794c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800794e:	4b11      	ldr	r3, [pc, #68]	; (8007994 <vTaskStartScheduler+0xb4>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007954:	4b10      	ldr	r3, [pc, #64]	; (8007998 <vTaskStartScheduler+0xb8>)
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800795a:	f000 fe89 	bl	8008670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800795e:	e00d      	b.n	800797c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d109      	bne.n	800797c <vTaskStartScheduler+0x9c>
 8007968:	f04f 0320 	mov.w	r3, #32
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e7fe      	b.n	800797a <vTaskStartScheduler+0x9a>
}
 800797c:	bf00      	nop
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	08008ef0 	.word	0x08008ef0
 8007988:	08007f2d 	.word	0x08007f2d
 800798c:	200003ac 	.word	0x200003ac
 8007990:	200003a8 	.word	0x200003a8
 8007994:	20000394 	.word	0x20000394
 8007998:	2000038c 	.word	0x2000038c

0800799c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079a0:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <vTaskSuspendAll+0x18>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3301      	adds	r3, #1
 80079a6:	4a03      	ldr	r2, [pc, #12]	; (80079b4 <vTaskSuspendAll+0x18>)
 80079a8:	6013      	str	r3, [r2, #0]
}
 80079aa:	bf00      	nop
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	200003b0 	.word	0x200003b0

080079b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079c6:	4b41      	ldr	r3, [pc, #260]	; (8007acc <xTaskResumeAll+0x114>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <xTaskResumeAll+0x2a>
 80079ce:	f04f 0320 	mov.w	r3, #32
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	e7fe      	b.n	80079e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079e2:	f000 fee3 	bl	80087ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <xTaskResumeAll+0x114>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	4a37      	ldr	r2, [pc, #220]	; (8007acc <xTaskResumeAll+0x114>)
 80079ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f0:	4b36      	ldr	r3, [pc, #216]	; (8007acc <xTaskResumeAll+0x114>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d161      	bne.n	8007abc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079f8:	4b35      	ldr	r3, [pc, #212]	; (8007ad0 <xTaskResumeAll+0x118>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d05d      	beq.n	8007abc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a00:	e02e      	b.n	8007a60 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007a02:	4b34      	ldr	r3, [pc, #208]	; (8007ad4 <xTaskResumeAll+0x11c>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3318      	adds	r3, #24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fe5b 	bl	80066ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fe56 	bl	80066ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	2201      	movs	r2, #1
 8007a24:	409a      	lsls	r2, r3
 8007a26:	4b2c      	ldr	r3, [pc, #176]	; (8007ad8 <xTaskResumeAll+0x120>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	4a2a      	ldr	r2, [pc, #168]	; (8007ad8 <xTaskResumeAll+0x120>)
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4a27      	ldr	r2, [pc, #156]	; (8007adc <xTaskResumeAll+0x124>)
 8007a3e:	441a      	add	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f7fe fde2 	bl	8006610 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	4b23      	ldr	r3, [pc, #140]	; (8007ae0 <xTaskResumeAll+0x128>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d302      	bcc.n	8007a60 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007a5a:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <xTaskResumeAll+0x12c>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a60:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <xTaskResumeAll+0x11c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1cc      	bne.n	8007a02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a6e:	f000 fb0f 	bl	8008090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a72:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <xTaskResumeAll+0x130>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d010      	beq.n	8007aa0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a7e:	f000 f837 	bl	8007af0 <xTaskIncrementTick>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007a88:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <xTaskResumeAll+0x12c>)
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f1      	bne.n	8007a7e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <xTaskResumeAll+0x130>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007aa0:	4b10      	ldr	r3, [pc, #64]	; (8007ae4 <xTaskResumeAll+0x12c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d009      	beq.n	8007abc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <xTaskResumeAll+0x134>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007abc:	f000 fea4 	bl	8008808 <vPortExitCritical>

	return xAlreadyYielded;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200003b0 	.word	0x200003b0
 8007ad0:	20000388 	.word	0x20000388
 8007ad4:	20000348 	.word	0x20000348
 8007ad8:	20000390 	.word	0x20000390
 8007adc:	2000028c 	.word	0x2000028c
 8007ae0:	20000288 	.word	0x20000288
 8007ae4:	2000039c 	.word	0x2000039c
 8007ae8:	20000398 	.word	0x20000398
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007afa:	4b50      	ldr	r3, [pc, #320]	; (8007c3c <xTaskIncrementTick+0x14c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 808c 	bne.w	8007c1c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b04:	4b4e      	ldr	r3, [pc, #312]	; (8007c40 <xTaskIncrementTick+0x150>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b0c:	4a4c      	ldr	r2, [pc, #304]	; (8007c40 <xTaskIncrementTick+0x150>)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d11f      	bne.n	8007b58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b18:	4b4a      	ldr	r3, [pc, #296]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <xTaskIncrementTick+0x46>
 8007b22:	f04f 0320 	mov.w	r3, #32
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	e7fe      	b.n	8007b34 <xTaskIncrementTick+0x44>
 8007b36:	4b43      	ldr	r3, [pc, #268]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	4b42      	ldr	r3, [pc, #264]	; (8007c48 <xTaskIncrementTick+0x158>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a40      	ldr	r2, [pc, #256]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	4a40      	ldr	r2, [pc, #256]	; (8007c48 <xTaskIncrementTick+0x158>)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	4b40      	ldr	r3, [pc, #256]	; (8007c4c <xTaskIncrementTick+0x15c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	4a3e      	ldr	r2, [pc, #248]	; (8007c4c <xTaskIncrementTick+0x15c>)
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	f000 fa9c 	bl	8008090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b58:	4b3d      	ldr	r3, [pc, #244]	; (8007c50 <xTaskIncrementTick+0x160>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d34d      	bcc.n	8007bfe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b62:	4b38      	ldr	r3, [pc, #224]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <xTaskIncrementTick+0x80>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <xTaskIncrementTick+0x82>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b76:	4b36      	ldr	r3, [pc, #216]	; (8007c50 <xTaskIncrementTick+0x160>)
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	601a      	str	r2, [r3, #0]
					break;
 8007b7e:	e03e      	b.n	8007bfe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b80:	4b30      	ldr	r3, [pc, #192]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d203      	bcs.n	8007ba0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b98:	4a2d      	ldr	r2, [pc, #180]	; (8007c50 <xTaskIncrementTick+0x160>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6013      	str	r3, [r2, #0]
						break;
 8007b9e:	e02e      	b.n	8007bfe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fd90 	bl	80066ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d004      	beq.n	8007bbc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fd87 	bl	80066ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <xTaskIncrementTick+0x164>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	4a22      	ldr	r2, [pc, #136]	; (8007c54 <xTaskIncrementTick+0x164>)
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4a1f      	ldr	r2, [pc, #124]	; (8007c58 <xTaskIncrementTick+0x168>)
 8007bdc:	441a      	add	r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fe fd13 	bl	8006610 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <xTaskIncrementTick+0x16c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d3b4      	bcc.n	8007b62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bfc:	e7b1      	b.n	8007b62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <xTaskIncrementTick+0x16c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4914      	ldr	r1, [pc, #80]	; (8007c58 <xTaskIncrementTick+0x168>)
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d907      	bls.n	8007c26 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007c16:	2301      	movs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	e004      	b.n	8007c26 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c1c:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <xTaskIncrementTick+0x170>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <xTaskIncrementTick+0x170>)
 8007c24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <xTaskIncrementTick+0x174>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c32:	697b      	ldr	r3, [r7, #20]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200003b0 	.word	0x200003b0
 8007c40:	2000038c 	.word	0x2000038c
 8007c44:	20000340 	.word	0x20000340
 8007c48:	20000344 	.word	0x20000344
 8007c4c:	200003a0 	.word	0x200003a0
 8007c50:	200003a8 	.word	0x200003a8
 8007c54:	20000390 	.word	0x20000390
 8007c58:	2000028c 	.word	0x2000028c
 8007c5c:	20000288 	.word	0x20000288
 8007c60:	20000398 	.word	0x20000398
 8007c64:	2000039c 	.word	0x2000039c

08007c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c6e:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <vTaskSwitchContext+0xa0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c76:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <vTaskSwitchContext+0xa4>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c7c:	e03e      	b.n	8007cfc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007c7e:	4b23      	ldr	r3, [pc, #140]	; (8007d0c <vTaskSwitchContext+0xa4>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c84:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <vTaskSwitchContext+0xa8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	fab3 f383 	clz	r3, r3
 8007c90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c92:	7afb      	ldrb	r3, [r7, #11]
 8007c94:	f1c3 031f 	rsb	r3, r3, #31
 8007c98:	617b      	str	r3, [r7, #20]
 8007c9a:	491e      	ldr	r1, [pc, #120]	; (8007d14 <vTaskSwitchContext+0xac>)
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007cae:	f04f 0320 	mov.w	r3, #32
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
 8007cc0:	e7fe      	b.n	8007cc0 <vTaskSwitchContext+0x58>
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <vTaskSwitchContext+0xac>)
 8007cce:	4413      	add	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d104      	bne.n	8007cf2 <vTaskSwitchContext+0x8a>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a07      	ldr	r2, [pc, #28]	; (8007d18 <vTaskSwitchContext+0xb0>)
 8007cfa:	6013      	str	r3, [r2, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	200003b0 	.word	0x200003b0
 8007d0c:	2000039c 	.word	0x2000039c
 8007d10:	20000390 	.word	0x20000390
 8007d14:	2000028c 	.word	0x2000028c
 8007d18:	20000288 	.word	0x20000288

08007d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d109      	bne.n	8007d40 <vTaskPlaceOnEventList+0x24>
 8007d2c:	f04f 0320 	mov.w	r3, #32
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e7fe      	b.n	8007d3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <vTaskPlaceOnEventList+0x44>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3318      	adds	r3, #24
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe fc85 	bl	8006658 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d4e:	2101      	movs	r1, #1
 8007d50:	6838      	ldr	r0, [r7, #0]
 8007d52:	f000 fb9d 	bl	8008490 <prvAddCurrentTaskToDelayedList>
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000288 	.word	0x20000288

08007d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <xTaskRemoveFromEventList+0x2a>
 8007d7a:	f04f 0320 	mov.w	r3, #32
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e7fe      	b.n	8007d8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	3318      	adds	r3, #24
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fc99 	bl	80066ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d98:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <xTaskRemoveFromEventList+0xac>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11c      	bne.n	8007dda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fc90 	bl	80066ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	2201      	movs	r2, #1
 8007db0:	409a      	lsls	r2, r3
 8007db2:	4b18      	ldr	r3, [pc, #96]	; (8007e14 <xTaskRemoveFromEventList+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	4a16      	ldr	r2, [pc, #88]	; (8007e14 <xTaskRemoveFromEventList+0xb0>)
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <xTaskRemoveFromEventList+0xb4>)
 8007dca:	441a      	add	r2, r3
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f7fe fc1c 	bl	8006610 <vListInsertEnd>
 8007dd8:	e005      	b.n	8007de6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3318      	adds	r3, #24
 8007dde:	4619      	mov	r1, r3
 8007de0:	480e      	ldr	r0, [pc, #56]	; (8007e1c <xTaskRemoveFromEventList+0xb8>)
 8007de2:	f7fe fc15 	bl	8006610 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <xTaskRemoveFromEventList+0xbc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d905      	bls.n	8007e00 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007df4:	2301      	movs	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <xTaskRemoveFromEventList+0xc0>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e001      	b.n	8007e04 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007e04:	697b      	ldr	r3, [r7, #20]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200003b0 	.word	0x200003b0
 8007e14:	20000390 	.word	0x20000390
 8007e18:	2000028c 	.word	0x2000028c
 8007e1c:	20000348 	.word	0x20000348
 8007e20:	20000288 	.word	0x20000288
 8007e24:	2000039c 	.word	0x2000039c

08007e28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <vTaskInternalSetTimeOutState+0x24>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <vTaskInternalSetTimeOutState+0x28>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	605a      	str	r2, [r3, #4]
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	200003a0 	.word	0x200003a0
 8007e50:	2000038c 	.word	0x2000038c

08007e54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d109      	bne.n	8007e78 <xTaskCheckForTimeOut+0x24>
 8007e64:	f04f 0320 	mov.w	r3, #32
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	e7fe      	b.n	8007e76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <xTaskCheckForTimeOut+0x3e>
 8007e7e:	f04f 0320 	mov.w	r3, #32
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e7fe      	b.n	8007e90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007e92:	f000 fc8b 	bl	80087ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e96:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <xTaskCheckForTimeOut+0xb8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d102      	bne.n	8007eb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	e023      	b.n	8007efe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <xTaskCheckForTimeOut+0xbc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d007      	beq.n	8007ed2 <xTaskCheckForTimeOut+0x7e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d302      	bcc.n	8007ed2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	e015      	b.n	8007efe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d20b      	bcs.n	8007ef4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff ff9d 	bl	8007e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	e004      	b.n	8007efe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007efa:	2301      	movs	r3, #1
 8007efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007efe:	f000 fc83 	bl	8008808 <vPortExitCritical>

	return xReturn;
 8007f02:	69fb      	ldr	r3, [r7, #28]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	2000038c 	.word	0x2000038c
 8007f10:	200003a0 	.word	0x200003a0

08007f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f18:	4b03      	ldr	r3, [pc, #12]	; (8007f28 <vTaskMissedYield+0x14>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	2000039c 	.word	0x2000039c

08007f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f34:	f000 f852 	bl	8007fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <prvIdleTask+0x28>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d9f9      	bls.n	8007f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <prvIdleTask+0x2c>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f50:	e7f0      	b.n	8007f34 <prvIdleTask+0x8>
 8007f52:	bf00      	nop
 8007f54:	2000028c 	.word	0x2000028c
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	e00c      	b.n	8007f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4a12      	ldr	r2, [pc, #72]	; (8007fbc <prvInitialiseTaskLists+0x60>)
 8007f74:	4413      	add	r3, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fb1d 	bl	80065b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b06      	cmp	r3, #6
 8007f86:	d9ef      	bls.n	8007f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f88:	480d      	ldr	r0, [pc, #52]	; (8007fc0 <prvInitialiseTaskLists+0x64>)
 8007f8a:	f7fe fb14 	bl	80065b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f8e:	480d      	ldr	r0, [pc, #52]	; (8007fc4 <prvInitialiseTaskLists+0x68>)
 8007f90:	f7fe fb11 	bl	80065b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f94:	480c      	ldr	r0, [pc, #48]	; (8007fc8 <prvInitialiseTaskLists+0x6c>)
 8007f96:	f7fe fb0e 	bl	80065b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f9a:	480c      	ldr	r0, [pc, #48]	; (8007fcc <prvInitialiseTaskLists+0x70>)
 8007f9c:	f7fe fb0b 	bl	80065b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fa0:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <prvInitialiseTaskLists+0x74>)
 8007fa2:	f7fe fb08 	bl	80065b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <prvInitialiseTaskLists+0x78>)
 8007fa8:	4a05      	ldr	r2, [pc, #20]	; (8007fc0 <prvInitialiseTaskLists+0x64>)
 8007faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <prvInitialiseTaskLists+0x7c>)
 8007fae:	4a05      	ldr	r2, [pc, #20]	; (8007fc4 <prvInitialiseTaskLists+0x68>)
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	2000028c 	.word	0x2000028c
 8007fc0:	20000318 	.word	0x20000318
 8007fc4:	2000032c 	.word	0x2000032c
 8007fc8:	20000348 	.word	0x20000348
 8007fcc:	2000035c 	.word	0x2000035c
 8007fd0:	20000374 	.word	0x20000374
 8007fd4:	20000340 	.word	0x20000340
 8007fd8:	20000344 	.word	0x20000344

08007fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe2:	e019      	b.n	8008018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fe4:	f000 fbe2 	bl	80087ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <prvCheckTasksWaitingTermination+0x4c>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fb68 	bl	80066ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <prvCheckTasksWaitingTermination+0x50>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	4a0a      	ldr	r2, [pc, #40]	; (800802c <prvCheckTasksWaitingTermination+0x50>)
 8008002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvCheckTasksWaitingTermination+0x54>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3b01      	subs	r3, #1
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <prvCheckTasksWaitingTermination+0x54>)
 800800c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800800e:	f000 fbfb 	bl	8008808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f80e 	bl	8008034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008018:	4b05      	ldr	r3, [pc, #20]	; (8008030 <prvCheckTasksWaitingTermination+0x54>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e1      	bne.n	8007fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	2000035c 	.word	0x2000035c
 800802c:	20000388 	.word	0x20000388
 8008030:	20000370 	.word	0x20000370

08008034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008042:	2b00      	cmp	r3, #0
 8008044:	d108      	bne.n	8008058 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fd8a 	bl	8008b64 <vPortFree>
				vPortFree( pxTCB );
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fd87 	bl	8008b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008056:	e017      	b.n	8008088 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800805e:	2b01      	cmp	r3, #1
 8008060:	d103      	bne.n	800806a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fd7e 	bl	8008b64 <vPortFree>
	}
 8008068:	e00e      	b.n	8008088 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008070:	2b02      	cmp	r3, #2
 8008072:	d009      	beq.n	8008088 <prvDeleteTCB+0x54>
 8008074:	f04f 0320 	mov.w	r3, #32
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e7fe      	b.n	8008086 <prvDeleteTCB+0x52>
	}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008096:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <prvResetNextTaskUnblockTime+0x44>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <prvResetNextTaskUnblockTime+0x14>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e000      	b.n	80080a6 <prvResetNextTaskUnblockTime+0x16>
 80080a4:	2300      	movs	r3, #0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080aa:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <prvResetNextTaskUnblockTime+0x48>)
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080b2:	e008      	b.n	80080c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <prvResetNextTaskUnblockTime+0x44>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	4a05      	ldr	r2, [pc, #20]	; (80080d8 <prvResetNextTaskUnblockTime+0x48>)
 80080c4:	6013      	str	r3, [r2, #0]
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000340 	.word	0x20000340
 80080d8:	200003a8 	.word	0x200003a8

080080dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080e2:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <xTaskGetSchedulerState+0x34>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ea:	2301      	movs	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	e008      	b.n	8008102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <xTaskGetSchedulerState+0x38>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080f8:	2302      	movs	r3, #2
 80080fa:	607b      	str	r3, [r7, #4]
 80080fc:	e001      	b.n	8008102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080fe:	2300      	movs	r3, #0
 8008100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008102:	687b      	ldr	r3, [r7, #4]
	}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	20000394 	.word	0x20000394
 8008114:	200003b0 	.word	0x200003b0

08008118 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d06e      	beq.n	800820c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008132:	4b39      	ldr	r3, [pc, #228]	; (8008218 <xTaskPriorityInherit+0x100>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	429a      	cmp	r2, r3
 800813a:	d25e      	bcs.n	80081fa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	db06      	blt.n	8008152 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008144:	4b34      	ldr	r3, [pc, #208]	; (8008218 <xTaskPriorityInherit+0x100>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	f1c3 0207 	rsb	r2, r3, #7
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6959      	ldr	r1, [r3, #20]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4a2e      	ldr	r2, [pc, #184]	; (800821c <xTaskPriorityInherit+0x104>)
 8008164:	4413      	add	r3, r2
 8008166:	4299      	cmp	r1, r3
 8008168:	d101      	bne.n	800816e <xTaskPriorityInherit+0x56>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <xTaskPriorityInherit+0x58>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d03a      	beq.n	80081ea <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	3304      	adds	r3, #4
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe faa6 	bl	80066ca <uxListRemove>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d115      	bne.n	80081b0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008188:	4924      	ldr	r1, [pc, #144]	; (800821c <xTaskPriorityInherit+0x104>)
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <xTaskPriorityInherit+0x98>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	2201      	movs	r2, #1
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	43da      	mvns	r2, r3
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <xTaskPriorityInherit+0x108>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4013      	ands	r3, r2
 80081ac:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <xTaskPriorityInherit+0x108>)
 80081ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081b0:	4b19      	ldr	r3, [pc, #100]	; (8008218 <xTaskPriorityInherit+0x100>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	2201      	movs	r2, #1
 80081c0:	409a      	lsls	r2, r3
 80081c2:	4b17      	ldr	r3, [pc, #92]	; (8008220 <xTaskPriorityInherit+0x108>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	4a15      	ldr	r2, [pc, #84]	; (8008220 <xTaskPriorityInherit+0x108>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a10      	ldr	r2, [pc, #64]	; (800821c <xTaskPriorityInherit+0x104>)
 80081da:	441a      	add	r2, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fa14 	bl	8006610 <vListInsertEnd>
 80081e8:	e004      	b.n	80081f4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <xTaskPriorityInherit+0x100>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e008      	b.n	800820c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <xTaskPriorityInherit+0x100>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	429a      	cmp	r2, r3
 8008206:	d201      	bcs.n	800820c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800820c:	68fb      	ldr	r3, [r7, #12]
	}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000288 	.word	0x20000288
 800821c:	2000028c 	.word	0x2000028c
 8008220:	20000390 	.word	0x20000390

08008224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d06c      	beq.n	8008314 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800823a:	4b39      	ldr	r3, [pc, #228]	; (8008320 <xTaskPriorityDisinherit+0xfc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	429a      	cmp	r2, r3
 8008242:	d009      	beq.n	8008258 <xTaskPriorityDisinherit+0x34>
 8008244:	f04f 0320 	mov.w	r3, #32
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e7fe      	b.n	8008256 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <xTaskPriorityDisinherit+0x50>
 8008260:	f04f 0320 	mov.w	r3, #32
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	e7fe      	b.n	8008272 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008278:	1e5a      	subs	r2, r3, #1
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008286:	429a      	cmp	r2, r3
 8008288:	d044      	beq.n	8008314 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828e:	2b00      	cmp	r3, #0
 8008290:	d140      	bne.n	8008314 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3304      	adds	r3, #4
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fa17 	bl	80066ca <uxListRemove>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d115      	bne.n	80082ce <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a6:	491f      	ldr	r1, [pc, #124]	; (8008324 <xTaskPriorityDisinherit+0x100>)
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xTaskPriorityDisinherit+0xaa>
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	2201      	movs	r2, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	43da      	mvns	r2, r3
 80082c4:	4b18      	ldr	r3, [pc, #96]	; (8008328 <xTaskPriorityDisinherit+0x104>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4013      	ands	r3, r2
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <xTaskPriorityDisinherit+0x104>)
 80082cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	f1c3 0207 	rsb	r2, r3, #7
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	2201      	movs	r2, #1
 80082e8:	409a      	lsls	r2, r3
 80082ea:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <xTaskPriorityDisinherit+0x104>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	4a0d      	ldr	r2, [pc, #52]	; (8008328 <xTaskPriorityDisinherit+0x104>)
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <xTaskPriorityDisinherit+0x100>)
 8008302:	441a      	add	r2, r3
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe f980 	bl	8006610 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008314:	697b      	ldr	r3, [r7, #20]
	}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000288 	.word	0x20000288
 8008324:	2000028c 	.word	0x2000028c
 8008328:	20000390 	.word	0x20000390

0800832c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800833a:	2301      	movs	r3, #1
 800833c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 8086 	beq.w	8008452 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834a:	2b00      	cmp	r3, #0
 800834c:	d109      	bne.n	8008362 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800834e:	f04f 0320 	mov.w	r3, #32
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	e7fe      	b.n	8008360 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d902      	bls.n	8008372 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	e002      	b.n	8008378 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	429a      	cmp	r2, r3
 8008380:	d067      	beq.n	8008452 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	429a      	cmp	r2, r3
 800838a:	d162      	bne.n	8008452 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800838c:	4b33      	ldr	r3, [pc, #204]	; (800845c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	429a      	cmp	r2, r3
 8008394:	d109      	bne.n	80083aa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008396:	f04f 0320 	mov.w	r3, #32
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	60bb      	str	r3, [r7, #8]
 80083a8:	e7fe      	b.n	80083a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	db04      	blt.n	80083c8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	f1c3 0207 	rsb	r2, r3, #7
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	6959      	ldr	r1, [r3, #20]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a22      	ldr	r2, [pc, #136]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083d8:	4413      	add	r3, r2
 80083da:	4299      	cmp	r1, r3
 80083dc:	d101      	bne.n	80083e2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d034      	beq.n	8008452 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe f96c 	bl	80066ca <uxListRemove>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d115      	bne.n	8008424 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fc:	4918      	ldr	r1, [pc, #96]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	2201      	movs	r2, #1
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	43da      	mvns	r2, r3
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4013      	ands	r3, r2
 8008420:	4a10      	ldr	r2, [pc, #64]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008422:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	2201      	movs	r2, #1
 800842a:	409a      	lsls	r2, r3
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4313      	orrs	r3, r2
 8008432:	4a0c      	ldr	r2, [pc, #48]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4a07      	ldr	r2, [pc, #28]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008444:	441a      	add	r2, r3
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fe f8df 	bl	8006610 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008452:	bf00      	nop
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000288 	.word	0x20000288
 8008460:	2000028c 	.word	0x2000028c
 8008464:	20000390 	.word	0x20000390

08008468 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <pvTaskIncrementMutexHeldCount+0x24>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <pvTaskIncrementMutexHeldCount+0x24>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800847a:	3201      	adds	r2, #1
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800847e:	4b03      	ldr	r3, [pc, #12]	; (800848c <pvTaskIncrementMutexHeldCount+0x24>)
 8008480:	681b      	ldr	r3, [r3, #0]
	}
 8008482:	4618      	mov	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	20000288 	.word	0x20000288

08008490 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800849a:	4b29      	ldr	r3, [pc, #164]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb0>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a0:	4b28      	ldr	r3, [pc, #160]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe f90f 	bl	80066ca <uxListRemove>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084b2:	4b24      	ldr	r3, [pc, #144]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	2201      	movs	r2, #1
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	43da      	mvns	r2, r3
 80084c0:	4b21      	ldr	r3, [pc, #132]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4013      	ands	r3, r2
 80084c6:	4a20      	ldr	r2, [pc, #128]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d10a      	bne.n	80084e8 <prvAddCurrentTaskToDelayedList+0x58>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d8:	4b1a      	ldr	r3, [pc, #104]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	481a      	ldr	r0, [pc, #104]	; (800854c <prvAddCurrentTaskToDelayedList+0xbc>)
 80084e2:	f7fe f895 	bl	8006610 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084e6:	e026      	b.n	8008536 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084f0:	4b14      	ldr	r3, [pc, #80]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d209      	bcs.n	8008514 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008500:	4b13      	ldr	r3, [pc, #76]	; (8008550 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3304      	adds	r3, #4
 800850a:	4619      	mov	r1, r3
 800850c:	4610      	mov	r0, r2
 800850e:	f7fe f8a3 	bl	8006658 <vListInsert>
}
 8008512:	e010      	b.n	8008536 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3304      	adds	r3, #4
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f7fe f899 	bl	8006658 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	429a      	cmp	r2, r3
 800852e:	d202      	bcs.n	8008536 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008530:	4a09      	ldr	r2, [pc, #36]	; (8008558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6013      	str	r3, [r2, #0]
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	2000038c 	.word	0x2000038c
 8008544:	20000288 	.word	0x20000288
 8008548:	20000390 	.word	0x20000390
 800854c:	20000374 	.word	0x20000374
 8008550:	20000344 	.word	0x20000344
 8008554:	20000340 	.word	0x20000340
 8008558:	200003a8 	.word	0x200003a8

0800855c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3b04      	subs	r3, #4
 800856c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3b04      	subs	r3, #4
 800857a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3b04      	subs	r3, #4
 800858a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800858c:	4a0c      	ldr	r2, [pc, #48]	; (80085c0 <pxPortInitialiseStack+0x64>)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b14      	subs	r3, #20
 8008596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3b04      	subs	r3, #4
 80085a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f06f 0202 	mvn.w	r2, #2
 80085aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b20      	subs	r3, #32
 80085b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	080085c5 	.word	0x080085c5

080085c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ce:	4b11      	ldr	r3, [pc, #68]	; (8008614 <prvTaskExitError+0x50>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d009      	beq.n	80085ec <prvTaskExitError+0x28>
 80085d8:	f04f 0320 	mov.w	r3, #32
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	e7fe      	b.n	80085ea <prvTaskExitError+0x26>
 80085ec:	f04f 0320 	mov.w	r3, #32
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085fe:	bf00      	nop
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0fc      	beq.n	8008600 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c
	...

08008620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <pxCurrentTCBConst2>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	f380 8809 	msr	PSP, r0
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst2>:
 8008640:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008648:	4808      	ldr	r0, [pc, #32]	; (800866c <prvPortStartFirstTask+0x24>)
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f380 8808 	msr	MSP, r0
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8814 	msr	CONTROL, r0
 800865a:	b662      	cpsie	i
 800865c:	b661      	cpsie	f
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	df00      	svc	0
 8008668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800866a:	bf00      	nop
 800866c:	e000ed08 	.word	0xe000ed08

08008670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008676:	4b44      	ldr	r3, [pc, #272]	; (8008788 <xPortStartScheduler+0x118>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a44      	ldr	r2, [pc, #272]	; (800878c <xPortStartScheduler+0x11c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d109      	bne.n	8008694 <xPortStartScheduler+0x24>
 8008680:	f04f 0320 	mov.w	r3, #32
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	e7fe      	b.n	8008692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008694:	4b3c      	ldr	r3, [pc, #240]	; (8008788 <xPortStartScheduler+0x118>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a3d      	ldr	r2, [pc, #244]	; (8008790 <xPortStartScheduler+0x120>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d109      	bne.n	80086b2 <xPortStartScheduler+0x42>
 800869e:	f04f 0320 	mov.w	r3, #32
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e7fe      	b.n	80086b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086b2:	4b38      	ldr	r3, [pc, #224]	; (8008794 <xPortStartScheduler+0x124>)
 80086b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	4b30      	ldr	r3, [pc, #192]	; (8008798 <xPortStartScheduler+0x128>)
 80086d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086da:	4b30      	ldr	r3, [pc, #192]	; (800879c <xPortStartScheduler+0x12c>)
 80086dc:	2207      	movs	r2, #7
 80086de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e0:	e009      	b.n	80086f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80086e2:	4b2e      	ldr	r3, [pc, #184]	; (800879c <xPortStartScheduler+0x12c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	4a2c      	ldr	r2, [pc, #176]	; (800879c <xPortStartScheduler+0x12c>)
 80086ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fe:	2b80      	cmp	r3, #128	; 0x80
 8008700:	d0ef      	beq.n	80086e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008702:	4b26      	ldr	r3, [pc, #152]	; (800879c <xPortStartScheduler+0x12c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f1c3 0307 	rsb	r3, r3, #7
 800870a:	2b04      	cmp	r3, #4
 800870c:	d009      	beq.n	8008722 <xPortStartScheduler+0xb2>
 800870e:	f04f 0320 	mov.w	r3, #32
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	60bb      	str	r3, [r7, #8]
 8008720:	e7fe      	b.n	8008720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008722:	4b1e      	ldr	r3, [pc, #120]	; (800879c <xPortStartScheduler+0x12c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	4a1c      	ldr	r2, [pc, #112]	; (800879c <xPortStartScheduler+0x12c>)
 800872a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800872c:	4b1b      	ldr	r3, [pc, #108]	; (800879c <xPortStartScheduler+0x12c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008734:	4a19      	ldr	r2, [pc, #100]	; (800879c <xPortStartScheduler+0x12c>)
 8008736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <xPortStartScheduler+0x130>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <xPortStartScheduler+0x130>)
 8008746:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800874a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800874c:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <xPortStartScheduler+0x130>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a13      	ldr	r2, [pc, #76]	; (80087a0 <xPortStartScheduler+0x130>)
 8008752:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8008756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008758:	f000 f8d6 	bl	8008908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800875c:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <xPortStartScheduler+0x134>)
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008762:	f000 f8f5 	bl	8008950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <xPortStartScheduler+0x138>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <xPortStartScheduler+0x138>)
 800876c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008772:	f7ff ff69 	bl	8008648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008776:	f7ff fa77 	bl	8007c68 <vTaskSwitchContext>
	prvTaskExitError();
 800877a:	f7ff ff23 	bl	80085c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	e000ed00 	.word	0xe000ed00
 800878c:	410fc271 	.word	0x410fc271
 8008790:	410fc270 	.word	0x410fc270
 8008794:	e000e400 	.word	0xe000e400
 8008798:	200003b4 	.word	0x200003b4
 800879c:	200003b8 	.word	0x200003b8
 80087a0:	e000ed20 	.word	0xe000ed20
 80087a4:	2000000c 	.word	0x2000000c
 80087a8:	e000ef34 	.word	0xe000ef34

080087ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	f04f 0320 	mov.w	r3, #32
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087c4:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <vPortEnterCritical+0x54>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	4a0d      	ldr	r2, [pc, #52]	; (8008800 <vPortEnterCritical+0x54>)
 80087cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <vPortEnterCritical+0x54>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10e      	bne.n	80087f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <vPortEnterCritical+0x58>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <vPortEnterCritical+0x48>
 80087e0:	f04f 0320 	mov.w	r3, #32
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	e7fe      	b.n	80087f2 <vPortEnterCritical+0x46>
	}
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	2000000c 	.word	0x2000000c
 8008804:	e000ed04 	.word	0xe000ed04

08008808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800880e:	4b11      	ldr	r3, [pc, #68]	; (8008854 <vPortExitCritical+0x4c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <vPortExitCritical+0x22>
 8008816:	f04f 0320 	mov.w	r3, #32
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	e7fe      	b.n	8008828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800882a:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <vPortExitCritical+0x4c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	4a08      	ldr	r2, [pc, #32]	; (8008854 <vPortExitCritical+0x4c>)
 8008832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008834:	4b07      	ldr	r3, [pc, #28]	; (8008854 <vPortExitCritical+0x4c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <vPortExitCritical+0x3e>
 800883c:	2300      	movs	r3, #0
 800883e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	2000000c 	.word	0x2000000c
	...

08008860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008860:	f3ef 8009 	mrs	r0, PSP
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4b15      	ldr	r3, [pc, #84]	; (80088c0 <pxCurrentTCBConst>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	f01e 0f10 	tst.w	lr, #16
 8008870:	bf08      	it	eq
 8008872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	6010      	str	r0, [r2, #0]
 800887c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008880:	f04f 0020 	mov.w	r0, #32
 8008884:	f380 8811 	msr	BASEPRI, r0
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f7ff f9ea 	bl	8007c68 <vTaskSwitchContext>
 8008894:	f04f 0000 	mov.w	r0, #0
 8008898:	f380 8811 	msr	BASEPRI, r0
 800889c:	bc09      	pop	{r0, r3}
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a6:	f01e 0f10 	tst.w	lr, #16
 80088aa:	bf08      	it	eq
 80088ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088b0:	f380 8809 	msr	PSP, r0
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst>:
 80088c0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
	__asm volatile
 80088ce:	f04f 0320 	mov.w	r3, #32
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088e0:	f7ff f906 	bl	8007af0 <xTaskIncrementTick>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088ea:	4b06      	ldr	r3, [pc, #24]	; (8008904 <SysTick_Handler+0x3c>)
 80088ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800890c:	4b0b      	ldr	r3, [pc, #44]	; (800893c <vPortSetupTimerInterrupt+0x34>)
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <vPortSetupTimerInterrupt+0x38>)
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <vPortSetupTimerInterrupt+0x3c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <vPortSetupTimerInterrupt+0x40>)
 800891e:	fba2 2303 	umull	r2, r3, r2, r3
 8008922:	099b      	lsrs	r3, r3, #6
 8008924:	4a09      	ldr	r2, [pc, #36]	; (800894c <vPortSetupTimerInterrupt+0x44>)
 8008926:	3b01      	subs	r3, #1
 8008928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800892a:	4b04      	ldr	r3, [pc, #16]	; (800893c <vPortSetupTimerInterrupt+0x34>)
 800892c:	2207      	movs	r2, #7
 800892e:	601a      	str	r2, [r3, #0]
}
 8008930:	bf00      	nop
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e010 	.word	0xe000e010
 8008940:	e000e018 	.word	0xe000e018
 8008944:	20000000 	.word	0x20000000
 8008948:	10624dd3 	.word	0x10624dd3
 800894c:	e000e014 	.word	0xe000e014

08008950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008960 <vPortEnableVFP+0x10>
 8008954:	6801      	ldr	r1, [r0, #0]
 8008956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800895a:	6001      	str	r1, [r0, #0]
 800895c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800895e:	bf00      	nop
 8008960:	e000ed88 	.word	0xe000ed88

08008964 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800896a:	f3ef 8305 	mrs	r3, IPSR
 800896e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b0f      	cmp	r3, #15
 8008974:	d913      	bls.n	800899e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008976:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <vPortValidateInterruptPriority+0x6c>)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008980:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <vPortValidateInterruptPriority+0x70>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	7afa      	ldrb	r2, [r7, #11]
 8008986:	429a      	cmp	r2, r3
 8008988:	d209      	bcs.n	800899e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800898a:	f04f 0320 	mov.w	r3, #32
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	607b      	str	r3, [r7, #4]
 800899c:	e7fe      	b.n	800899c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800899e:	4b0e      	ldr	r3, [pc, #56]	; (80089d8 <vPortValidateInterruptPriority+0x74>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <vPortValidateInterruptPriority+0x78>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d909      	bls.n	80089c2 <vPortValidateInterruptPriority+0x5e>
 80089ae:	f04f 0320 	mov.w	r3, #32
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	e7fe      	b.n	80089c0 <vPortValidateInterruptPriority+0x5c>
	}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	e000e3f0 	.word	0xe000e3f0
 80089d4:	200003b4 	.word	0x200003b4
 80089d8:	e000ed0c 	.word	0xe000ed0c
 80089dc:	200003b8 	.word	0x200003b8

080089e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089ec:	f7fe ffd6 	bl	800799c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089f0:	4b57      	ldr	r3, [pc, #348]	; (8008b50 <pvPortMalloc+0x170>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089f8:	f000 f90c 	bl	8008c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089fc:	4b55      	ldr	r3, [pc, #340]	; (8008b54 <pvPortMalloc+0x174>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f040 808c 	bne.w	8008b22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01c      	beq.n	8008a4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a10:	2208      	movs	r2, #8
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d013      	beq.n	8008a4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f023 0307 	bic.w	r3, r3, #7
 8008a28:	3308      	adds	r3, #8
 8008a2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <pvPortMalloc+0x6a>
 8008a36:	f04f 0320 	mov.w	r3, #32
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e7fe      	b.n	8008a48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d068      	beq.n	8008b22 <pvPortMalloc+0x142>
 8008a50:	4b41      	ldr	r3, [pc, #260]	; (8008b58 <pvPortMalloc+0x178>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d863      	bhi.n	8008b22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a5a:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <pvPortMalloc+0x17c>)
 8008a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a5e:	4b3f      	ldr	r3, [pc, #252]	; (8008b5c <pvPortMalloc+0x17c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a64:	e004      	b.n	8008a70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d903      	bls.n	8008a82 <pvPortMalloc+0xa2>
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f1      	bne.n	8008a66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a82:	4b33      	ldr	r3, [pc, #204]	; (8008b50 <pvPortMalloc+0x170>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d04a      	beq.n	8008b22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2208      	movs	r2, #8
 8008a92:	4413      	add	r3, r2
 8008a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d91e      	bls.n	8008aec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <pvPortMalloc+0xf4>
 8008ac0:	f04f 0320 	mov.w	r3, #32
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	e7fe      	b.n	8008ad2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	f000 f8f6 	bl	8008cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <pvPortMalloc+0x178>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <pvPortMalloc+0x178>)
 8008af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008afa:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <pvPortMalloc+0x178>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <pvPortMalloc+0x180>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d203      	bcs.n	8008b0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <pvPortMalloc+0x178>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <pvPortMalloc+0x180>)
 8008b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	4b10      	ldr	r3, [pc, #64]	; (8008b54 <pvPortMalloc+0x174>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b22:	f7fe ff49 	bl	80079b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d009      	beq.n	8008b44 <pvPortMalloc+0x164>
 8008b30:	f04f 0320 	mov.w	r3, #32
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e7fe      	b.n	8008b42 <pvPortMalloc+0x162>
	return pvReturn;
 8008b44:	69fb      	ldr	r3, [r7, #28]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3728      	adds	r7, #40	; 0x28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	200023c4 	.word	0x200023c4
 8008b54:	200023d0 	.word	0x200023d0
 8008b58:	200023c8 	.word	0x200023c8
 8008b5c:	200023bc 	.word	0x200023bc
 8008b60:	200023cc 	.word	0x200023cc

08008b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d046      	beq.n	8008c04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b76:	2308      	movs	r3, #8
 8008b78:	425b      	negs	r3, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <vPortFree+0xa8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <vPortFree+0x42>
 8008b92:	f04f 0320 	mov.w	r3, #32
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e7fe      	b.n	8008ba4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <vPortFree+0x5e>
 8008bae:	f04f 0320 	mov.w	r3, #32
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60bb      	str	r3, [r7, #8]
 8008bc0:	e7fe      	b.n	8008bc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <vPortFree+0xa8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d019      	beq.n	8008c04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d115      	bne.n	8008c04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <vPortFree+0xa8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	43db      	mvns	r3, r3
 8008be2:	401a      	ands	r2, r3
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008be8:	f7fe fed8 	bl	800799c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <vPortFree+0xac>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <vPortFree+0xac>)
 8008bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f000 f86c 	bl	8008cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c00:	f7fe feda 	bl	80079b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c04:	bf00      	nop
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200023d0 	.word	0x200023d0
 8008c10:	200023c8 	.word	0x200023c8

08008c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c20:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <prvHeapInit+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00c      	beq.n	8008c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3307      	adds	r3, #7
 8008c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0307 	bic.w	r3, r3, #7
 8008c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <prvHeapInit+0xac>)
 8008c44:	4413      	add	r3, r2
 8008c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c4c:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <prvHeapInit+0xb0>)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <prvHeapInit+0xb0>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c60:	2208      	movs	r2, #8
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0307 	bic.w	r3, r3, #7
 8008c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a15      	ldr	r2, [pc, #84]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <prvHeapInit+0xb8>)
 8008ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <prvHeapInit+0xbc>)
 8008caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cac:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <prvHeapInit+0xc0>)
 8008cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	200003bc 	.word	0x200003bc
 8008cc4:	200023bc 	.word	0x200023bc
 8008cc8:	200023c4 	.word	0x200023c4
 8008ccc:	200023cc 	.word	0x200023cc
 8008cd0:	200023c8 	.word	0x200023c8
 8008cd4:	200023d0 	.word	0x200023d0

08008cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ce0:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <prvInsertBlockIntoFreeList+0xac>)
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e002      	b.n	8008cec <prvInsertBlockIntoFreeList+0x14>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d8f7      	bhi.n	8008ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	4413      	add	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d108      	bne.n	8008d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	441a      	add	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d118      	bne.n	8008d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <prvInsertBlockIntoFreeList+0xb0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d00d      	beq.n	8008d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	441a      	add	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e008      	b.n	8008d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <prvInsertBlockIntoFreeList+0xb0>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	e003      	b.n	8008d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d002      	beq.n	8008d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	200023bc 	.word	0x200023bc
 8008d88:	200023c4 	.word	0x200023c4

08008d8c <__libc_init_array>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	4e0d      	ldr	r6, [pc, #52]	; (8008dc4 <__libc_init_array+0x38>)
 8008d90:	4c0d      	ldr	r4, [pc, #52]	; (8008dc8 <__libc_init_array+0x3c>)
 8008d92:	1ba4      	subs	r4, r4, r6
 8008d94:	10a4      	asrs	r4, r4, #2
 8008d96:	2500      	movs	r5, #0
 8008d98:	42a5      	cmp	r5, r4
 8008d9a:	d109      	bne.n	8008db0 <__libc_init_array+0x24>
 8008d9c:	4e0b      	ldr	r6, [pc, #44]	; (8008dcc <__libc_init_array+0x40>)
 8008d9e:	4c0c      	ldr	r4, [pc, #48]	; (8008dd0 <__libc_init_array+0x44>)
 8008da0:	f000 f82c 	bl	8008dfc <_init>
 8008da4:	1ba4      	subs	r4, r4, r6
 8008da6:	10a4      	asrs	r4, r4, #2
 8008da8:	2500      	movs	r5, #0
 8008daa:	42a5      	cmp	r5, r4
 8008dac:	d105      	bne.n	8008dba <__libc_init_array+0x2e>
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008db4:	4798      	blx	r3
 8008db6:	3501      	adds	r5, #1
 8008db8:	e7ee      	b.n	8008d98 <__libc_init_array+0xc>
 8008dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dbe:	4798      	blx	r3
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	e7f2      	b.n	8008daa <__libc_init_array+0x1e>
 8008dc4:	08008f3c 	.word	0x08008f3c
 8008dc8:	08008f3c 	.word	0x08008f3c
 8008dcc:	08008f3c 	.word	0x08008f3c
 8008dd0:	08008f40 	.word	0x08008f40

08008dd4 <memcpy>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	1e43      	subs	r3, r0, #1
 8008dd8:	440a      	add	r2, r1
 8008dda:	4291      	cmp	r1, r2
 8008ddc:	d100      	bne.n	8008de0 <memcpy+0xc>
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008de8:	e7f7      	b.n	8008dda <memcpy+0x6>

08008dea <memset>:
 8008dea:	4402      	add	r2, r0
 8008dec:	4603      	mov	r3, r0
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d100      	bne.n	8008df4 <memset+0xa>
 8008df2:	4770      	bx	lr
 8008df4:	f803 1b01 	strb.w	r1, [r3], #1
 8008df8:	e7f9      	b.n	8008dee <memset+0x4>
	...

08008dfc <_init>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	bf00      	nop
 8008e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e02:	bc08      	pop	{r3}
 8008e04:	469e      	mov	lr, r3
 8008e06:	4770      	bx	lr

08008e08 <_fini>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr
