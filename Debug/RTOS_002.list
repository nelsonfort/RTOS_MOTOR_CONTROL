
RTOS_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008344  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800860c  0800860c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800860c  0800860c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800860c  0800860c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000261c  20000010  08008624  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000262c  08008624  0002262c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015751  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc6  00000000  00000000  00035791  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  00039560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a01  00000000  00000000  0003a650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f66c  00000000  00000000  0005c051  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1e22  00000000  00000000  0006b6bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  0013d55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084cc 	.word	0x080084cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080084cc 	.word	0x080084cc

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000088 	.word	0x20000088

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b0ae      	sub	sp, #184	; 0xb8
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f001 f849 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f8cd 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fa67 	bl	80006f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000226:	f000 f9af 	bl	8000588 <MX_TIM3_Init>
  MX_TIM1_Init();
 800022a:	f000 f92b 	bl	8000484 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800022e:	f000 fa31 	bl	8000694 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexEncoder */
  osMutexDef(MutexEncoder);
 8000232:	2300      	movs	r3, #0
 8000234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000238:	2300      	movs	r3, #0
 800023a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  MutexEncoderHandle = osMutexCreate(osMutex(MutexEncoder));
 800023e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000242:	4618      	mov	r0, r3
 8000244:	f005 f9f0 	bl	8005628 <osMutexCreate>
 8000248:	4602      	mov	r2, r0
 800024a:	4b4b      	ldr	r3, [pc, #300]	; (8000378 <main+0x164>)
 800024c:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem1 */
  osSemaphoreDef(binSem1);
 800024e:	2300      	movs	r3, #0
 8000250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000254:	2300      	movs	r3, #0
 8000256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  binSem1Handle = osSemaphoreCreate(osSemaphore(binSem1), 1);
 800025a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800025e:	2101      	movs	r1, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f005 f9f9 	bl	8005658 <osSemaphoreCreate>
 8000266:	4602      	mov	r2, r0
 8000268:	4b44      	ldr	r3, [pc, #272]	; (800037c <main+0x168>)
 800026a:	601a      	str	r2, [r3, #0]

  /* definition and creation of BinSemPWM */
  osSemaphoreDef(BinSemPWM);
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000272:	2300      	movs	r3, #0
 8000274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  BinSemPWMHandle = osSemaphoreCreate(osSemaphore(BinSemPWM), 1);
 8000278:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800027c:	2101      	movs	r1, #1
 800027e:	4618      	mov	r0, r3
 8000280:	f005 f9ea 	bl	8005658 <osSemaphoreCreate>
 8000284:	4602      	mov	r2, r0
 8000286:	4b3e      	ldr	r3, [pc, #248]	; (8000380 <main+0x16c>)
 8000288:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueUARTSend */
  osMessageQDef(QueueUARTSend, 32, UART_DATA_SEND_t);
 800028a:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <main+0x170>)
 800028c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueUARTSendHandle = osMessageCreate(osMessageQ(QueueUARTSend), NULL);
 8000296:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f005 fb93 	bl	80059c8 <osMessageCreate>
 80002a2:	4602      	mov	r2, r0
 80002a4:	4b38      	ldr	r3, [pc, #224]	; (8000388 <main+0x174>)
 80002a6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueUARTSndHandle = osMailCreate(osMailQ(QueueUARTSnd), NULL);      // create mail queue
 80002a8:	2100      	movs	r1, #0
 80002aa:	4838      	ldr	r0, [pc, #224]	; (800038c <main+0x178>)
 80002ac:	f005 fbb5 	bl	8005a1a <osMailCreate>
 80002b0:	4602      	mov	r2, r0
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <main+0x17c>)
 80002b4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskVelRef */
  osThreadDef(TaskVelRef, TaskVelRef_App, osPriorityHigh, 0, 128);
 80002b6:	4b37      	ldr	r3, [pc, #220]	; (8000394 <main+0x180>)
 80002b8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskVelRefHandle = osThreadCreate(osThread(TaskVelRef), NULL);
 80002ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f005 f949 	bl	8005568 <osThreadCreate>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <main+0x184>)
 80002da:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskControl */
  osThreadDef(TaskControl, TaskControl_App, osPriorityAboveNormal, 0, 128);
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <main+0x188>)
 80002de:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControlHandle = osThreadCreate(osThread(TaskControl), NULL);
 80002f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 f936 	bl	8005568 <osThreadCreate>
 80002fc:	4602      	mov	r2, r0
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <main+0x18c>)
 8000300:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskPWM */
  osThreadDef(TaskPWM, TaskPWM_App, osPriorityAboveNormal, 0, 128);
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <main+0x190>)
 8000304:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPWMHandle = osThreadCreate(osThread(TaskPWM), NULL);
 8000316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f005 f923 	bl	8005568 <osThreadCreate>
 8000322:	4602      	mov	r2, r0
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <main+0x194>)
 8000326:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskMotorSpeed */
  osThreadDef(TaskMotorSpeed, TaskMotorSpeed_App, osPriorityHigh, 0, 128);
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <main+0x198>)
 800032a:	f107 0420 	add.w	r4, r7, #32
 800032e:	461d      	mov	r5, r3
 8000330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorSpeedHandle = osThreadCreate(osThread(TaskMotorSpeed), NULL);
 800033c:	f107 0320 	add.w	r3, r7, #32
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f005 f910 	bl	8005568 <osThreadCreate>
 8000348:	4602      	mov	r2, r0
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <main+0x19c>)
 800034c:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskUartSend */
  osThreadDef(TaskUartSend, TaskUartSend_App, osPriorityBelowNormal, 0, 128);
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <main+0x1a0>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	461d      	mov	r5, r3
 8000354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800035c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUartSendHandle = osThreadCreate(osThread(TaskUartSend), NULL);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f005 f8ff 	bl	8005568 <osThreadCreate>
 800036a:	4602      	mov	r2, r0
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <main+0x1a4>)
 800036e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000370:	f005 f8f3 	bl	800555a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	e7fe      	b.n	8000374 <main+0x160>
 8000376:	bf00      	nop
 8000378:	200023e0 	.word	0x200023e0
 800037c:	200023d8 	.word	0x200023d8
 8000380:	20002464 	.word	0x20002464
 8000384:	080084e4 	.word	0x080084e4
 8000388:	20002458 	.word	0x20002458
 800038c:	080085c8 	.word	0x080085c8
 8000390:	200025d8 	.word	0x200025d8
 8000394:	08008500 	.word	0x08008500
 8000398:	20002460 	.word	0x20002460
 800039c:	08008528 	.word	0x08008528
 80003a0:	2000253c 	.word	0x2000253c
 80003a4:	0800854c 	.word	0x0800854c
 80003a8:	2000245c 	.word	0x2000245c
 80003ac:	08008578 	.word	0x08008578
 80003b0:	200025d4 	.word	0x200025d4
 80003b4:	080085a4 	.word	0x080085a4
 80003b8:	200023d4 	.word	0x200023d4

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b0a6      	sub	sp, #152	; 0x98
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f008 f875 	bl	80084ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2258      	movs	r2, #88	; 0x58
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f008 f867 	bl	80084ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ec:	2302      	movs	r3, #2
 80003ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f4:	2310      	movs	r3, #16
 80003f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fa:	2302      	movs	r3, #2
 80003fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000408:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800040c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fa32 	bl	8001884 <HAL_RCC_OscConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000426:	f000 fd75 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	230f      	movs	r3, #15
 800042c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042e:	2302      	movs	r3, #2
 8000430:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000444:	2102      	movs	r1, #2
 8000446:	4618      	mov	r0, r3
 8000448:	f002 f932 	bl	80026b0 <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000452:	f000 fd5f 	bl	8000f14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <SystemClock_Config+0xc4>)
 8000458:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800045e:	2300      	movs	r3, #0
 8000460:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000462:	2300      	movs	r3, #0
 8000464:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f002 fb89 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000474:	f000 fd4e 	bl	8000f14 <Error_Handler>
  }
}
 8000478:	bf00      	nop
 800047a:	3798      	adds	r7, #152	; 0x98
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	00201002 	.word	0x00201002

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0320 	add.w	r3, r7, #32
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b0:	4b33      	ldr	r3, [pc, #204]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004b2:	4a34      	ldr	r2, [pc, #208]	; (8000584 <MX_TIM1_Init+0x100>)
 80004b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 80004b6:	4b32      	ldr	r3, [pc, #200]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004b8:	2248      	movs	r2, #72	; 0x48
 80004ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004bc:	4b30      	ldr	r3, [pc, #192]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ca:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004dc:	4828      	ldr	r0, [pc, #160]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004de:	f002 fd6d 	bl	8002fbc <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80004e8:	f000 fd14 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	4619      	mov	r1, r3
 80004f8:	4821      	ldr	r0, [pc, #132]	; (8000580 <MX_TIM1_Init+0xfc>)
 80004fa:	f003 fc99 	bl	8003e30 <HAL_TIM_ConfigClockSource>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000504:	f000 fd06 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000508:	481d      	ldr	r0, [pc, #116]	; (8000580 <MX_TIM1_Init+0xfc>)
 800050a:	f003 f829 	bl	8003560 <HAL_TIM_IC_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000514:	f000 fcfe 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	4619      	mov	r1, r3
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <MX_TIM1_Init+0xfc>)
 800052c:	f004 fb24 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000536:	f000 fced 	bl	8000f14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800053e:	2301      	movs	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <MX_TIM1_Init+0xfc>)
 8000552:	f003 fac8 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800055c:	f000 fcda 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2204      	movs	r2, #4
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_TIM1_Init+0xfc>)
 8000568:	f003 fabd 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000572:	f000 fccf 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3730      	adds	r7, #48	; 0x30
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000246c 	.word	0x2000246c
 8000584:	40012c00 	.word	0x40012c00

08000588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08e      	sub	sp, #56	; 0x38
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <MX_TIM3_Init+0x104>)
 80005bc:	4a34      	ldr	r2, [pc, #208]	; (8000690 <MX_TIM3_Init+0x108>)
 80005be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005c0:	4b32      	ldr	r3, [pc, #200]	; (800068c <MX_TIM3_Init+0x104>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_TIM3_Init+0x104>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_TIM3_Init+0x104>)
 80005ce:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <MX_TIM3_Init+0x104>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_TIM3_Init+0x104>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e0:	482a      	ldr	r0, [pc, #168]	; (800068c <MX_TIM3_Init+0x104>)
 80005e2:	f002 fceb 	bl	8002fbc <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005ec:	f000 fc92 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4823      	ldr	r0, [pc, #140]	; (800068c <MX_TIM3_Init+0x104>)
 80005fe:	f003 fc17 	bl	8003e30 <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000608:	f000 fc84 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800060c:	481f      	ldr	r0, [pc, #124]	; (800068c <MX_TIM3_Init+0x104>)
 800060e:	f002 fd9d 	bl	800314c <HAL_TIM_PWM_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000618:	f000 fc7c 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <MX_TIM3_Init+0x104>)
 800062c:	f004 faa4 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000636:	f000 fc6d 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063a:	2360      	movs	r3, #96	; 0x60
 800063c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1200;
 800063e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000642:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <MX_TIM3_Init+0x104>)
 8000654:	f003 fadc 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800065e:	f000 fc59 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 8000662:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000666:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	2204      	movs	r2, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <MX_TIM3_Init+0x104>)
 8000670:	f003 face 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800067a:	f000 fc4b 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <MX_TIM3_Init+0x104>)
 8000680:	f000 fcd4 	bl	800102c <HAL_TIM_MspPostInit>

}
 8000684:	bf00      	nop
 8000686:	3738      	adds	r7, #56	; 0x38
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200023e4 	.word	0x200023e4
 8000690:	40000400 	.word	0x40000400

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART2_UART_Init+0x58>)
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_USART2_UART_Init+0x5c>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d8:	f004 faf8 	bl	8004ccc <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 fc17 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200024b8 	.word	0x200024b8
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a35      	ldr	r2, [pc, #212]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MotorA_INA_Pin|MotorA_INB_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f001 f856 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_GPIO_Init+0xf4>)
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <MX_GPIO_Init+0xf8>)
 800078e:	f000 fea7 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_DIR_Pin */
  GPIO_InitStruct.Pin = PIN_DIR_Pin;
 8000792:	2304      	movs	r3, #4
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_DIR_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4811      	ldr	r0, [pc, #68]	; (80007ec <MX_GPIO_Init+0xf8>)
 80007a6:	f000 fe9b 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MotorA_INA_Pin MotorA_INB_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MotorA_INA_Pin|MotorA_INB_Pin;
 80007aa:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fe8b 	bl	80014e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	2028      	movs	r0, #40	; 0x28
 80007d0:	f000 fe5c 	bl	800148c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d4:	2028      	movs	r0, #40	; 0x28
 80007d6:	f000 fe75 	bl	80014c4 <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	48000800 	.word	0x48000800

080007f0 <set_PWM>:

/* USER CODE BEGIN 4 */
void set_PWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint32_t pulse)
{
 80007f0:	b084      	sub	sp, #16
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b088      	sub	sp, #32
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80007fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_TIM_PWM_Stop(&timer,channel);
 8000800:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000802:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000806:	f002 fe0f 	bl	8003428 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC;
    timer.Init.Period = period;
 800080a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_TIM_PWM_Init(&timer);
 8000810:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000814:	f002 fc9a 	bl	800314c <HAL_TIM_PWM_Init>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = pulse;
 800081c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800081e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&timer,&sConfigOC,channel);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800082c:	4619      	mov	r1, r3
 800082e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000832:	f003 f9ed 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>

    HAL_TIM_PWM_Start(&timer,channel);
 8000836:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000838:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800083c:	f002 fce8 	bl	8003210 <HAL_TIM_PWM_Start>
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800084a:	b004      	add	sp, #16
 800084c:	4770      	bx	lr
	...

08000850 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7f1b      	ldrb	r3, [r3, #28]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d14b      	bne.n	80008f8 <HAL_TIM_IC_CaptureCallback+0xa8>
	{
		if(HAL_GPIO_ReadPin(PIN_DIR_GPIO_Port,PIN_DIR_Pin ) == 1)
 8000860:	2104      	movs	r1, #4
 8000862:	4848      	ldr	r0, [pc, #288]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000864:	f000 ffc6 	bl	80017f4 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d103      	bne.n	8000876 <HAL_TIM_IC_CaptureCallback+0x26>
		{
			MotorA_EncA.direction = -1;
 800086e:	4b46      	ldr	r3, [pc, #280]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	759a      	strb	r2, [r3, #22]
 8000874:	e002      	b.n	800087c <HAL_TIM_IC_CaptureCallback+0x2c>
		}
		else
		{
			MotorA_EncA.direction = 1;
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000878:	2201      	movs	r2, #1
 800087a:	759a      	strb	r2, [r3, #22]
		}

		if(MotorA_EncA.Is_First_Captured==0)
 800087c:	4b42      	ldr	r3, [pc, #264]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10a      	bne.n	800089c <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			MotorA_EncA.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f003 fb8b 	bl	8003fa4 <HAL_TIM_ReadCapturedValue>
 800088e:	4602      	mov	r2, r0
 8000890:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000892:	605a      	str	r2, [r3, #4]
			MotorA_EncA.Is_First_Captured = 1;
 8000894:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e026      	b.n	80008ea <HAL_TIM_IC_CaptureCallback+0x9a>
		}
		else if(MotorA_EncA.Is_First_Captured)
 800089c:	4b3a      	ldr	r3, [pc, #232]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d021      	beq.n	80008ea <HAL_TIM_IC_CaptureCallback+0x9a>
		{
			MotorA_EncA.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f003 fb7b 	bl	8003fa4 <HAL_TIM_ReadCapturedValue>
 80008ae:	4602      	mov	r2, r0
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008b2:	609a      	str	r2, [r3, #8]
			if(MotorA_EncA.IC_Value2 > MotorA_EncA.IC_Value1)
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d907      	bls.n	80008d0 <HAL_TIM_IC_CaptureCallback+0x80>
			{
				MotorA_EncA.Period = MotorA_EncA.IC_Value2 - MotorA_EncA.IC_Value1;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008cc:	60d3      	str	r3, [r2, #12]
 80008ce:	e009      	b.n	80008e4 <HAL_TIM_IC_CaptureCallback+0x94>
			}
			else
			{
				MotorA_EncA.Period = MotorA_EncA.IC_Value2+65535 - MotorA_EncA.IC_Value1;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80008de:	33ff      	adds	r3, #255	; 0xff
 80008e0:	4a29      	ldr	r2, [pc, #164]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008e2:	60d3      	str	r3, [r2, #12]
			}
			//MotorA_EncA.Frequency = HAL_RCC_GetPCLK2Freq()/(htim->Init.Prescaler*MotorA_EncA.Period);
			//MotorA_EncA.CalculationOK = 1;
			MotorA_EncA.Is_First_Captured = 0;
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]

		}
		MotorA_EncA.cont++;
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008ec:	7d5b      	ldrb	r3, [r3, #21]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008f6:	755a      	strb	r2, [r3, #21]
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7f1b      	ldrb	r3, [r3, #28]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d13d      	bne.n	800097c <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		if(MotorA_EncB.Is_First_Captured==0)
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10a      	bne.n	8000920 <HAL_TIM_IC_CaptureCallback+0xd0>
		{
			MotorA_EncB.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800090a:	2104      	movs	r1, #4
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f003 fb49 	bl	8003fa4 <HAL_TIM_ReadCapturedValue>
 8000912:	4602      	mov	r2, r0
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000916:	605a      	str	r2, [r3, #4]
			MotorA_EncB.Is_First_Captured = 1;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e026      	b.n	800096e <HAL_TIM_IC_CaptureCallback+0x11e>
		}
		else if(MotorA_EncB.Is_First_Captured)
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d021      	beq.n	800096e <HAL_TIM_IC_CaptureCallback+0x11e>
		{
			MotorA_EncB.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800092a:	2104      	movs	r1, #4
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f003 fb39 	bl	8003fa4 <HAL_TIM_ReadCapturedValue>
 8000932:	4602      	mov	r2, r0
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000936:	609a      	str	r2, [r3, #8]
			if(MotorA_EncB.IC_Value2 > MotorA_EncB.IC_Value1)
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	d907      	bls.n	8000954 <HAL_TIM_IC_CaptureCallback+0x104>
			{
				MotorA_EncB.Period = MotorA_EncB.IC_Value2 - MotorA_EncB.IC_Value1;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000950:	60d3      	str	r3, [r2, #12]
 8000952:	e009      	b.n	8000968 <HAL_TIM_IC_CaptureCallback+0x118>
			}
			else
			{
				MotorA_EncB.Period = MotorA_EncB.IC_Value2+65535 - MotorA_EncB.IC_Value1;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000962:	33ff      	adds	r3, #255	; 0xff
 8000964:	4a09      	ldr	r2, [pc, #36]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000966:	60d3      	str	r3, [r2, #12]
			}
			// Freq = (FreqCKL/(PreScaler*Nticks))
			//MotorA_EncB.Frequency = HAL_RCC_GetPCLK2Freq()/(htim->Init.Prescaler*MotorA_EncB.Period);
			//MotorA_EncB.CalculationOK = 1;
			MotorA_EncB.Is_First_Captured = 0;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]

		}
		MotorA_EncB.cont++;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000970:	7d5b      	ldrb	r3, [r3, #21]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	3301      	adds	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800097a:	755a      	strb	r2, [r3, #21]
	}
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	48000800 	.word	0x48000800
 8000988:	20002540 	.word	0x20002540
 800098c:	20002440 	.word	0x20002440

08000990 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
	if(B1_Pin == GPIO_Pin)
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a0:	d104      	bne.n	80009ac <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(binSem1Handle);
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x24>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 fed8 	bl	800575c <osSemaphoreRelease>

	}
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200023d8 	.word	0x200023d8

080009b8 <TaskVelRef_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskVelRef_App */
void TaskVelRef_App(void const * argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  MC.ready = 1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <TaskVelRef_App+0x80>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2120      	movs	r1, #32
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 ff28 	bl	8001824 <HAL_GPIO_WritePin>
  for(;;)
  {
	  if(!MC.ready)
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <TaskVelRef_App+0x80>)
 80009d6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d106      	bne.n	80009ee <TaskVelRef_App+0x36>
	  {
		  osSemaphoreWait(binSem1Handle, osWaitForever);
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <TaskVelRef_App+0x84>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 fe69 	bl	80056c0 <osSemaphoreWait>
	  }
	  MC.ready=1;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <TaskVelRef_App+0x80>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2120      	movs	r1, #32
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f000 ff11 	bl	8001824 <HAL_GPIO_WritePin>
	  for(uint8_t cont = 0; cont <=2 ; cont++ ){
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e012      	b.n	8000a2e <TaskVelRef_App+0x76>
		MC.speedRef = (250+cont*100);
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	33fa      	adds	r3, #250	; 0xfa
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <TaskVelRef_App+0x80>)
 8000a1c:	edc3 7a00 	vstr	s15, [r3]
		osDelay(2500);
 8000a20:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000a24:	f004 fdec 	bl	8005600 <osDelay>
	  for(uint8_t cont = 0; cont <=2 ; cont++ ){
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d9e9      	bls.n	8000a08 <TaskVelRef_App+0x50>
	  if(!MC.ready)
 8000a34:	e7ce      	b.n	80009d4 <TaskVelRef_App+0x1c>
 8000a36:	bf00      	nop
 8000a38:	20002558 	.word	0x20002558
 8000a3c:	200023d8 	.word	0x200023d8

08000a40 <TaskControl_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskControl_App */
void TaskControl_App(void const * argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskControl_App */
	//-- Initialize structure
	MC.MotorA_speed = 0;
 8000a48:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
	MC.MotorB_speed = 0;
 8000a50:	4b67      	ldr	r3, [pc, #412]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
	for(int8_t cont = 0;cont<PID_COEF_LEN;cont++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e019      	b.n	8000a92 <TaskControl_App+0x52>
	{
		MC.PID_MA.x_n[cont] = 0;
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4a63      	ldr	r2, [pc, #396]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000a64:	330c      	adds	r3, #12
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
		MC.PID_MA.y_n[cont] = 0;
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4a5e      	ldr	r2, [pc, #376]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000a78:	330a      	adds	r3, #10
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3304      	adds	r3, #4
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
	for(int8_t cont = 0;cont<PID_COEF_LEN;cont++)
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	dde1      	ble.n	8000a5e <TaskControl_App+0x1e>
	}
	MC.speedRef=0;
 8000a9a:	4b55      	ldr	r3, [pc, #340]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	MC.errorA=0;
 8000aa2:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
	MC.errorB=0;
 8000aaa:	4b51      	ldr	r3, [pc, #324]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
	//-- Seteo los coeficientes del PID diseñado.
	MC.PID_MA.a[0] = 1;
 8000ab2:	4b4f      	ldr	r3, [pc, #316]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ab4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ab8:	615a      	str	r2, [r3, #20]
	MC.PID_MA.a[1] = 1.845;
 8000aba:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000abc:	4a4d      	ldr	r2, [pc, #308]	; (8000bf4 <TaskControl_App+0x1b4>)
 8000abe:	619a      	str	r2, [r3, #24]
	MC.PID_MA.a[2] = -0.845;
 8000ac0:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ac2:	4a4d      	ldr	r2, [pc, #308]	; (8000bf8 <TaskControl_App+0x1b8>)
 8000ac4:	61da      	str	r2, [r3, #28]
	MC.PID_MA.b[0] = 0.125;
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ac8:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8000acc:	621a      	str	r2, [r3, #32]
	MC.PID_MA.b[1] = 0.0075;
 8000ace:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ad0:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <TaskControl_App+0x1bc>)
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
	MC.PID_MA.b[2] = -0.117;
 8000ad4:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ad6:	4a4a      	ldr	r2, [pc, #296]	; (8000c00 <TaskControl_App+0x1c0>)
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28

	osDelay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f004 fd90 	bl	8005600 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  if(MC.ready)
 8000ae0:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ae2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d07c      	beq.n	8000be6 <TaskControl_App+0x1a6>
	  {
		  osDelay(5);
 8000aec:	2005      	movs	r0, #5
 8000aee:	f004 fd87 	bl	8005600 <osDelay>
		  //-- Armo la señal de error
		  MC.errorA = MC.speedRef - MC.MotorA_speed*60;
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000af4:	ed93 7a00 	vldr	s14, [r3]
 8000af8:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000afa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000afe:	eddf 6a41 	vldr	s13, [pc, #260]	; 8000c04 <TaskControl_App+0x1c4>
 8000b02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0a:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b0c:	edc3 7a03 	vstr	s15, [r3, #12]

		  //-- Realizo el corrimiento de los coeficientes del PID
		  for(int8_t i = PID_COEF_LEN-2 ; i>=0 ; i--)
 8000b10:	2301      	movs	r3, #1
 8000b12:	73bb      	strb	r3, [r7, #14]
 8000b14:	e027      	b.n	8000b66 <TaskControl_App+0x126>
		  {
			  MC.PID_MA.x_n[i+1] = MC.PID_MA.x_n[i];
 8000b16:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4933      	ldr	r1, [pc, #204]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b22:	320c      	adds	r2, #12
 8000b24:	0092      	lsls	r2, r2, #2
 8000b26:	440a      	add	r2, r1
 8000b28:	3208      	adds	r2, #8
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	4930      	ldr	r1, [pc, #192]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b2e:	330c      	adds	r3, #12
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	3308      	adds	r3, #8
 8000b36:	601a      	str	r2, [r3, #0]
			  MC.PID_MA.y_n[i+1] = MC.PID_MA.y_n[i];
 8000b38:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b40:	3301      	adds	r3, #1
 8000b42:	492b      	ldr	r1, [pc, #172]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b44:	320a      	adds	r2, #10
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	440a      	add	r2, r1
 8000b4a:	3204      	adds	r2, #4
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	4928      	ldr	r1, [pc, #160]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b50:	330a      	adds	r3, #10
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	440b      	add	r3, r1
 8000b56:	3304      	adds	r3, #4
 8000b58:	601a      	str	r2, [r3, #0]
		  for(int8_t i = PID_COEF_LEN-2 ; i>=0 ; i--)
 8000b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	3b01      	subs	r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	73bb      	strb	r3, [r7, #14]
 8000b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dad3      	bge.n	8000b16 <TaskControl_App+0xd6>
		  }
		  MC.PID_MA.x_n[0] = MC.errorA;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b74:	6393      	str	r3, [r2, #56]	; 0x38
		  MC.PID_MA.y_n[0] += MC.PID_MA.b[0]*MC.PID_MA.x_n[0] ;
		  for(uint8_t i = 1 ; i<=PID_COEF_LEN-1 ; i++)
		  {
			  MC.PID_MA.y_n[0] += MC.PID_MA.b[i]*MC.PID_MA.x_n[i] + MC.PID_MA.a[i]*MC.PID_MA.y_n[i];
		  }*/
		  MC.PID_MA.y_n[0] = MC.PID_MA.b[0]*MC.PID_MA.x_n[0] +
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b78:	ed93 7a08 	vldr	s14, [r3, #32]
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b7e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000b82:	ee27 7a27 	vmul.f32	s14, s14, s15
				  	  	  	  MC.PID_MA.b[1]*MC.PID_MA.x_n[1] +
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b88:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b8e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  MC.PID_MA.y_n[0] = MC.PID_MA.b[0]*MC.PID_MA.x_n[0] +
 8000b96:	ee37 7a27 	vadd.f32	s14, s14, s15
							  MC.PID_MA.b[2]*MC.PID_MA.x_n[2] +
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000b9c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000ba2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				  	  	  	  MC.PID_MA.b[1]*MC.PID_MA.x_n[1] +
 8000baa:	ee37 7a27 	vadd.f32	s14, s14, s15
							  MC.PID_MA.a[1]*MC.PID_MA.y_n[1] +
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000bb0:	edd3 6a06 	vldr	s13, [r3, #24]
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000bb6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
							  MC.PID_MA.b[2]*MC.PID_MA.x_n[2] +
 8000bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
							  MC.PID_MA.a[2]*MC.PID_MA.y_n[2];
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000bc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000bca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
							  MC.PID_MA.a[1]*MC.PID_MA.y_n[1] +
 8000bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
		  MC.PID_MA.y_n[0] = MC.PID_MA.b[0]*MC.PID_MA.x_n[0] +
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <TaskControl_App+0x1b0>)
 8000bd8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		  //-- Libero la tarea encargada de activar el PWM que acciona el motor..
		  osSemaphoreRelease(BinSemPWMHandle);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <TaskControl_App+0x1c8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fdbb 	bl	800575c <osSemaphoreRelease>

	  }
	  osDelay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f004 fd0a 	bl	8005600 <osDelay>
	  if(MC.ready)
 8000bec:	e778      	b.n	8000ae0 <TaskControl_App+0xa0>
 8000bee:	bf00      	nop
 8000bf0:	20002558 	.word	0x20002558
 8000bf4:	3fec28f6 	.word	0x3fec28f6
 8000bf8:	bf5851ec 	.word	0xbf5851ec
 8000bfc:	3bf5c28f 	.word	0x3bf5c28f
 8000c00:	bdef9db2 	.word	0xbdef9db2
 8000c04:	42700000 	.word	0x42700000
 8000c08:	20002464 	.word	0x20002464

08000c0c <TaskPWM_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskPWM_App */
void TaskPWM_App(void const * argument)
{
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	b095      	sub	sp, #84	; 0x54
 8000c10:	af12      	add	r7, sp, #72	; 0x48
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskPWM_App */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c14:	2100      	movs	r1, #0
 8000c16:	4846      	ldr	r0, [pc, #280]	; (8000d30 <TaskPWM_App+0x124>)
 8000c18:	f002 fafa 	bl	8003210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4844      	ldr	r0, [pc, #272]	; (8000d30 <TaskPWM_App+0x124>)
 8000c20:	f002 faf6 	bl	8003210 <HAL_TIM_PWM_Start>
	set_PWM(htim3, TIM_CHANNEL_1, 3600, (uint16_t) 0); // -- PWM desactivado
 8000c24:	4e42      	ldr	r6, [pc, #264]	; (8000d30 <TaskPWM_App+0x124>)
 8000c26:	2300      	movs	r3, #0
 8000c28:	9311      	str	r3, [sp, #68]	; 0x44
 8000c2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000c2e:	9310      	str	r3, [sp, #64]	; 0x40
 8000c30:	2300      	movs	r3, #0
 8000c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8000c34:	466d      	mov	r5, sp
 8000c36:	f106 0410 	add.w	r4, r6, #16
 8000c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c46:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000c4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c52:	f7ff fdcd 	bl	80007f0 <set_PWM>
	HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f000 fde0 	bl	8001824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fdd9 	bl	8001824 <HAL_GPIO_WritePin>
	MC.pwmMotor = 0;
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <TaskPWM_App+0x128>)
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(BinSemPWMHandle, osWaitForever);
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <TaskPWM_App+0x12c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 fd1c 	bl	80056c0 <osSemaphoreWait>
	MC.pwmMotor = MC.PID_MA.y_n[0];
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <TaskPWM_App+0x128>)
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <TaskPWM_App+0x128>)
 8000c8e:	6753      	str	r3, [r2, #116]	; 0x74
	if(MC.pwmMotor<=0)
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <TaskPWM_App+0x128>)
 8000c92:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8000c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	d80e      	bhi.n	8000cbe <TaskPWM_App+0xb2>
	{
		HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f000 fdbb 	bl	8001824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fdb4 	bl	8001824 <HAL_GPIO_WritePin>
 8000cbc:	e00d      	b.n	8000cda <TaskPWM_App+0xce>
	}
	else
	{
		HAL_GPIO_WritePin(MotorA_INA_GPIO_Port, MotorA_INA_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fdac 	bl	8001824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA_INB_GPIO_Port, MotorA_INB_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fda5 	bl	8001824 <HAL_GPIO_WritePin>
	}
	set_PWM(htim3, TIM_CHANNEL_1, 3600, (uint32_t) fabs((3600*MC.pwmMotor/450)  ) ); ///7.5 --Vmax 450rpm PWM
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <TaskPWM_App+0x128>)
 8000cdc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8000ce0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000d3c <TaskPWM_App+0x130>
 8000ce4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ce8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000d40 <TaskPWM_App+0x134>
 8000cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf0:	eef0 7ae7 	vabs.f32	s15, s15
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 3a90 	vmov	r3, s15
 8000cfc:	4e0c      	ldr	r6, [pc, #48]	; (8000d30 <TaskPWM_App+0x124>)
 8000cfe:	9311      	str	r3, [sp, #68]	; 0x44
 8000d00:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000d04:	9310      	str	r3, [sp, #64]	; 0x40
 8000d06:	2300      	movs	r3, #0
 8000d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d0a:	466d      	mov	r5, sp
 8000d0c:	f106 0410 	add.w	r4, r6, #16
 8000d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000d24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d28:	f7ff fd62 	bl	80007f0 <set_PWM>
  {
 8000d2c:	e7a5      	b.n	8000c7a <TaskPWM_App+0x6e>
 8000d2e:	bf00      	nop
 8000d30:	200023e4 	.word	0x200023e4
 8000d34:	20002558 	.word	0x20002558
 8000d38:	20002464 	.word	0x20002464
 8000d3c:	45610000 	.word	0x45610000
 8000d40:	43e10000 	.word	0x43e10000

08000d44 <TaskMotorSpeed_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskMotorSpeed_App */
void TaskMotorSpeed_App(void const * argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskMotorSpeed_App */
	uint8_t contAux = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4838      	ldr	r0, [pc, #224]	; (8000e34 <TaskMotorSpeed_App+0xf0>)
 8000d54:	f002 fc66 	bl	8003624 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4836      	ldr	r0, [pc, #216]	; (8000e34 <TaskMotorSpeed_App+0xf0>)
 8000d5c:	f002 fc62 	bl	8003624 <HAL_TIM_IC_Start_IT>
	UART_DATA_SEND_t *dataPtr;
	MotorA_EncA.direction = 1;
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <TaskMotorSpeed_App+0xf4>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	759a      	strb	r2, [r3, #22]
  /* Infinite loop */
  for(;;)
  {
	  //osMutexWait(MutexEncoderHandle, osWaitForever );
		if((contAux == MotorA_EncA.cont))
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <TaskMotorSpeed_App+0xf4>)
 8000d68:	7d5b      	ldrb	r3, [r3, #21]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	7bfa      	ldrb	r2, [r7, #15]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d113      	bne.n	8000d9a <TaskMotorSpeed_App+0x56>
		{
			DataSendUart.MotorA_speed = 0;
 8000d72:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
			MC.MotorA_speed = 0;
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <TaskMotorSpeed_App+0xfc>)
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
			DataSendUart.time_stamp = (uint32_t) tickCounter;
 8000d82:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <TaskMotorSpeed_App+0x100>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000d88:	60d3      	str	r3, [r2, #12]
			DataSendUart.Period = 0;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
			DataSendUart.Frequency = 0;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	e02b      	b.n	8000df2 <TaskMotorSpeed_App+0xae>
		}
		else{
			// Freq = (FreqCLK/(PreScaler*Nticks))
			// Speed = Freq/Encoder_pulses (Speed in the shaft)
			DataSendUart.MotorA_speed = (float) HAL_RCC_GetPCLK2Freq()/(htim1.Init.Prescaler*MotorA_EncA.Period*ENCODER_SHAFT_CPR);
 8000d9a:	f001 fe9d 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8000d9e:	ee07 0a90 	vmov	s15, r0
 8000da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <TaskMotorSpeed_App+0xf0>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <TaskMotorSpeed_App+0xf4>)
 8000dac:	68d2      	ldr	r2, [r2, #12]
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	f44f 7298 	mov.w	r2, #304	; 0x130
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000dc8:	edc3 7a00 	vstr	s15, [r3]
			//DataSendUart.MotorA_speed = DataSendUart.MotorA_speed;//*MotorA_EncA.direction;
			MC.MotorA_speed = DataSendUart.MotorA_speed;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <TaskMotorSpeed_App+0xfc>)
 8000dd2:	6053      	str	r3, [r2, #4]
			DataSendUart.time_stamp = (uint32_t) tickCounter;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <TaskMotorSpeed_App+0x100>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000dda:	60d3      	str	r3, [r2, #12]
			DataSendUart.Period = (uint32_t) MotorA_EncA.Period;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <TaskMotorSpeed_App+0xf4>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000de2:	6053      	str	r3, [r2, #4]
			DataSendUart.Frequency = (float) MotorA_EncA.Frequency;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <TaskMotorSpeed_App+0xf4>)
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000dea:	6093      	str	r3, [r2, #8]
			contAux = MotorA_EncA.cont;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <TaskMotorSpeed_App+0xf4>)
 8000dee:	7d5b      	ldrb	r3, [r3, #21]
 8000df0:	73fb      	strb	r3, [r7, #15]
		}

		//osMutexRelease(MutexEncoderHandle);
		//dataPtr = osMailAlloc(QueueUARTSndHandle, millis5);
		dataPtr = osMailAlloc(QueueUARTSndHandle, osWaitForever );
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <TaskMotorSpeed_App+0x104>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fe65 	bl	8005aca <osMailAlloc>
 8000e00:	60b8      	str	r0, [r7, #8]
		if(dataPtr != NULL)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d011      	beq.n	8000e2c <TaskMotorSpeed_App+0xe8>
		{
			dataPtr->MotorA_speed = DataSendUart.MotorA_speed;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	601a      	str	r2, [r3, #0]
			dataPtr->time_stamp = DataSendUart.time_stamp;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <TaskMotorSpeed_App+0xf8>)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60da      	str	r2, [r3, #12]
			if(osMailPut(QueueUARTSndHandle, dataPtr) != osOK)
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <TaskMotorSpeed_App+0x104>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 fe68 	bl	8005af4 <osMailPut>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d000      	beq.n	8000e2c <TaskMotorSpeed_App+0xe8>
			{
				while(1);
 8000e2a:	e7fe      	b.n	8000e2a <TaskMotorSpeed_App+0xe6>
			}
		}
		osDelay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f004 fbe7 	bl	8005600 <osDelay>
		if((contAux == MotorA_EncA.cont))
 8000e32:	e798      	b.n	8000d66 <TaskMotorSpeed_App+0x22>
 8000e34:	2000246c 	.word	0x2000246c
 8000e38:	20002540 	.word	0x20002540
 8000e3c:	20002430 	.word	0x20002430
 8000e40:	20002558 	.word	0x20002558
 8000e44:	200023dc 	.word	0x200023dc
 8000e48:	200025d8 	.word	0x200025d8

08000e4c <TaskUartSend_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskUartSend_App */
void TaskUartSend_App(void const * argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskUartSend_App */
  osEvent dataSEND;
  UART_DATA_SEND_t *dataPtr;
  uint8_t a=8, b=16, c=32, d=64 ;
 8000e54:	2308      	movs	r3, #8
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	2310      	movs	r3, #16
 8000e5a:	73bb      	strb	r3, [r7, #14]
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	737b      	strb	r3, [r7, #13]
 8000e60:	2340      	movs	r3, #64	; 0x40
 8000e62:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  dataSEND = osMailGet(QueueUARTSndHandle, osWaitForever);
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <TaskUartSend_App+0x90>)
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fe7d 	bl	8005b70 <osMailGet>
	  if(dataSEND.status == osEventMail){
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	2b20      	cmp	r3, #32
 8000e7a:	d1f3      	bne.n	8000e64 <TaskUartSend_App+0x18>
		  dataPtr = dataSEND.value.p;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	61fb      	str	r3, [r7, #28]
		  HAL_UART_Transmit(&huart2, (uint8_t *)&a, sizeof(uint8_t), osWaitForever);
 8000e80:	f107 010f 	add.w	r1, r7, #15
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <TaskUartSend_App+0x94>)
 8000e8c:	f003 ff6c 	bl	8004d68 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)&b, sizeof(uint8_t), osWaitForever);
 8000e90:	f107 010e 	add.w	r1, r7, #14
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <TaskUartSend_App+0x94>)
 8000e9c:	f003 ff64 	bl	8004d68 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)&c, sizeof(uint8_t), osWaitForever);
 8000ea0:	f107 010d 	add.w	r1, r7, #13
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <TaskUartSend_App+0x94>)
 8000eac:	f003 ff5c 	bl	8004d68 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)&d, sizeof(uint8_t), osWaitForever);
 8000eb0:	f107 010c 	add.w	r1, r7, #12
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <TaskUartSend_App+0x94>)
 8000ebc:	f003 ff54 	bl	8004d68 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)dataPtr, sizeof(UART_DATA_SEND_t), osWaitForever);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	69f9      	ldr	r1, [r7, #28]
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <TaskUartSend_App+0x94>)
 8000eca:	f003 ff4d 	bl	8004d68 <HAL_UART_Transmit>
		  osMailFree(QueueUARTSndHandle, dataPtr); // Free a memory block from a mail.
 8000ece:	4b03      	ldr	r3, [pc, #12]	; (8000edc <TaskUartSend_App+0x90>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	69f9      	ldr	r1, [r7, #28]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 febf 	bl	8005c58 <osMailFree>
	  dataSEND = osMailGet(QueueUARTSndHandle, osWaitForever);
 8000eda:	e7c3      	b.n	8000e64 <TaskUartSend_App+0x18>
 8000edc:	200025d8 	.word	0x200025d8
 8000ee0:	200024b8 	.word	0x200024b8

08000ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ef6:	f000 f9f1 	bl	80012dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //osMutexWait(MutexEncoderHandle, osWaitForever );
  tickCounter++;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f02:	6013      	str	r3, [r2, #0]
  //osMutexRelease(MutexEncoderHandle);
  /* USER CODE END Callback 1 */
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40001000 	.word	0x40001000
 8000f10:	200023dc 	.word	0x200023dc

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x44>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x44>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x44>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x44>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x44>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a24      	ldr	r2, [pc, #144]	; (800101c <HAL_TIM_Base_MspInit+0xb0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4812      	ldr	r0, [pc, #72]	; (8001024 <HAL_TIM_Base_MspInit+0xb8>)
 8000fda:	f000 fa81 	bl	80014e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	201b      	movs	r0, #27
 8000fe4:	f000 fa52 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fe8:	201b      	movs	r0, #27
 8000fea:	f000 fa6b 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fee:	e010      	b.n	8001012 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <HAL_TIM_Base_MspInit+0xbc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d10b      	bne.n	8001012 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_TIM_Base_MspInit+0xb4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40012c00 	.word	0x40012c00
 8001020:	40021000 	.word	0x40021000
 8001024:	48000800 	.word	0x48000800
 8001028:	40000400 	.word	0x40000400

0800102c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <HAL_TIM_MspPostInit+0x64>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d11c      	bne.n	8001088 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_MspPostInit+0x68>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_TIM_MspPostInit+0x68>)
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_MspPostInit+0x68>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001066:	2350      	movs	r3, #80	; 0x50
 8001068:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 fa2c 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40000400 	.word	0x40000400
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d128      	bne.n	800110c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_UART_MspInit+0x80>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ea:	230c      	movs	r3, #12
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fa:	2307      	movs	r3, #7
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f000 f9ea 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40004400 	.word	0x40004400
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f000 f9ab 	bl	800148c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001136:	2036      	movs	r0, #54	; 0x36
 8001138:	f000 f9c4 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_InitTick+0xa0>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_InitTick+0xa0>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	61d3      	str	r3, [r2, #28]
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_InitTick+0xa0>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001154:	f107 0210 	add.w	r2, r7, #16
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fcdc 	bl	8002b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001164:	f001 fc96 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8001168:	4603      	mov	r3, r0
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <HAL_InitTick+0xa4>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9b      	lsrs	r3, r3, #18
 8001178:	3b01      	subs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_InitTick+0xa8>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <HAL_InitTick+0xac>)
 8001180:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_InitTick+0xa8>)
 8001184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001188:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_InitTick+0xa8>)
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_InitTick+0xa8>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_InitTick+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_InitTick+0xa8>)
 800119e:	f001 ff0d 	bl	8002fbc <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d104      	bne.n	80011b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <HAL_InitTick+0xa8>)
 80011aa:	f001 ff5f 	bl	800306c <HAL_TIM_Base_Start_IT>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3730      	adds	r7, #48	; 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	200025dc 	.word	0x200025dc
 80011c8:	40001000 	.word	0x40001000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <TIM1_CC_IRQHandler+0x10>)
 8001206:	f002 fb4f 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000246c 	.word	0x2000246c

08001214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001218:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800121c:	f000 fb1a 	bl	8001854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM6_DAC_IRQHandler+0x10>)
 800122a:	f002 fb3d 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200025dc 	.word	0x200025dc

08001238 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f007 f8e7 	bl	800845c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7fe ffc1 	bl	8000214 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012a0:	08008614 	.word	0x08008614
  ldr r2, =_sbss
 80012a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012a8:	2000262c 	.word	0x2000262c

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x28>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x28>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f8d8 	bl	8001476 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff28 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fe2a 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	20002628 	.word	0x20002628

08001304 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;  
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20002628 	.word	0x20002628

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4c 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149e:	f7ff ff61 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f7ff ffb1 	bl	8001410 <NVIC_EncodePriority>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff80 	bl	80013bc <__NVIC_SetPriority>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff54 	bl	8001380 <__NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e160      	b.n	80017b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8152 	beq.w	80017ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d00b      	beq.n	8001528 <HAL_GPIO_Init+0x48>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151c:	2b11      	cmp	r3, #17
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0201 	and.w	r2, r3, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0xea>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	6939      	ldr	r1, [r7, #16]
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0203 	and.w	r2, r3, #3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80ac 	beq.w	80017ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001654:	4b5e      	ldr	r3, [pc, #376]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a5d      	ldr	r2, [pc, #372]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b5b      	ldr	r3, [pc, #364]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800166c:	4a59      	ldr	r2, [pc, #356]	; (80017d4 <HAL_GPIO_Init+0x2f4>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001696:	d025      	beq.n	80016e4 <HAL_GPIO_Init+0x204>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <HAL_GPIO_Init+0x2f8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d01f      	beq.n	80016e0 <HAL_GPIO_Init+0x200>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4e      	ldr	r2, [pc, #312]	; (80017dc <HAL_GPIO_Init+0x2fc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d019      	beq.n	80016dc <HAL_GPIO_Init+0x1fc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <HAL_GPIO_Init+0x300>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_GPIO_Init+0x1f8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1f4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <HAL_GPIO_Init+0x308>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1f0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <HAL_GPIO_Init+0x30c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1ec>
 80016c8:	2306      	movs	r3, #6
 80016ca:	e00c      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016cc:	2307      	movs	r3, #7
 80016ce:	e00a      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d0:	2305      	movs	r3, #5
 80016d2:	e008      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d8:	2303      	movs	r3, #3
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x206>
 80016e4:	2300      	movs	r3, #0
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f6:	4937      	ldr	r1, [pc, #220]	; (80017d4 <HAL_GPIO_Init+0x2f4>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001704:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_GPIO_Init+0x310>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001728:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_GPIO_Init+0x310>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_GPIO_Init+0x310>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_GPIO_Init+0x310>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_GPIO_Init+0x310>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <HAL_GPIO_Init+0x310>)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_GPIO_Init+0x310>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_GPIO_Init+0x310>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f47f ae97 	bne.w	80014f0 <HAL_GPIO_Init+0x10>
  }
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48001400 	.word	0x48001400
 80017ec:	48001800 	.word	0x48001800
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001840:	e002      	b.n	8001848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f88c 	bl	8000990 <HAL_GPIO_EXTI_Callback>
  }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800188a:	af00      	add	r7, sp, #0
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f000 bf01 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8160 	beq.w	8001b6e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018ae:	4bae      	ldr	r3, [pc, #696]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d00c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ba:	4bab      	ldr	r3, [pc, #684]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d159      	bne.n	800197a <HAL_RCC_OscConfig+0xf6>
 80018c6:	4ba8      	ldr	r3, [pc, #672]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d152      	bne.n	800197a <HAL_RCC_OscConfig+0xf6>
 80018d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x82>
 8001900:	4b99      	ldr	r3, [pc, #612]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0xae>
 8001906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800191a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001922:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800192e:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001936:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800193a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800193e:	fa92 f2a2 	rbit	r2, r2
 8001942:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001946:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f042 0220 	orr.w	r2, r2, #32
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f002 021f 	and.w	r2, r2, #31
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8102 	beq.w	8001b6c <HAL_RCC_OscConfig+0x2e8>
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 80fc 	bne.w	8001b6c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f000 be93 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x110>
 8001986:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e030      	b.n	80019f6 <HAL_RCC_OscConfig+0x172>
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x134>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a71      	ldr	r2, [pc, #452]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01e      	b.n	80019f6 <HAL_RCC_OscConfig+0x172>
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x15a>
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a67      	ldr	r2, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a64      	ldr	r2, [pc, #400]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e00b      	b.n	80019f6 <HAL_RCC_OscConfig+0x172>
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a61      	ldr	r2, [pc, #388]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a5e      	ldr	r2, [pc, #376]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d059      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff fc80 	bl	8001304 <HAL_GetTick>
 8001a04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fc7b 	bl	8001304 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d902      	bls.n	8001a20 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	f000 be40 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8001a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a24:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001a34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <HAL_RCC_OscConfig+0x1ce>
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x1fa>
 8001a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a6e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a82:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a86:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a8a:	fa92 f2a2 	rbit	r2, r2
 8001a8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a96:	fab2 f282 	clz	r2, r2
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	f042 0220 	orr.w	r2, r2, #32
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f002 021f 	and.w	r2, r2, #31
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0ab      	beq.n	8001a0a <HAL_RCC_OscConfig+0x186>
 8001ab2:	e05c      	b.n	8001b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc26 	bl	8001304 <HAL_GetTick>
 8001ab8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abe:	f7ff fc21 	bl	8001304 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d902      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f000 bde6 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8001ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ae8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_RCC_OscConfig+0x282>
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x2ae>
 8001b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_RCC_OscConfig+0x2e4>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b36:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b3a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b3e:	fa92 f2a2 	rbit	r2, r2
 8001b42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001b46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b4a:	fab2 f282 	clz	r2, r2
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f042 0220 	orr.w	r2, r2, #32
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f002 021f 	and.w	r2, r2, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ab      	bne.n	8001abe <HAL_RCC_OscConfig+0x23a>
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_OscConfig+0x2ea>
 8001b68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 8170 	beq.w	8001e5e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b7e:	4bd0      	ldr	r3, [pc, #832]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b8a:	4bcd      	ldr	r3, [pc, #820]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d16d      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3ee>
 8001b96:	4bca      	ldr	r3, [pc, #808]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba2:	d166      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3ee>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001bb6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x350>
 8001bce:	4bbc      	ldr	r3, [pc, #752]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x378>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bf8:	4bb1      	ldr	r3, [pc, #708]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c02:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001c0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3ba>
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d002      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f000 bd31 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4ba0      	ldr	r3, [pc, #640]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	21f8      	movs	r1, #248	; 0xf8
 8001c4e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001c56:	fa91 f1a1 	rbit	r1, r1
 8001c5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001c5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c62:	fab1 f181 	clz	r1, r1
 8001c66:	b2c9      	uxtb	r1, r1
 8001c68:	408b      	lsls	r3, r1
 8001c6a:	4995      	ldr	r1, [pc, #596]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c70:	e0f5      	b.n	8001e5e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 8085 	beq.w	8001d88 <HAL_RCC_OscConfig+0x504>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fb2b 	bl	8001304 <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb26 	bl	8001304 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d902      	bls.n	8001cca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f000 bceb 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001cdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_OscConfig+0x476>
 8001cf4:	4b72      	ldr	r3, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	e013      	b.n	8001d22 <HAL_RCC_OscConfig+0x49e>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d1e:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2202      	movs	r2, #2
 8001d24:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001d34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0af      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	21f8      	movs	r1, #248	; 0xf8
 8001d64:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001d6c:	fa91 f1a1 	rbit	r1, r1
 8001d70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001d74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d78:	fab1 f181 	clz	r1, r1
 8001d7c:	b2c9      	uxtb	r1, r1
 8001d7e:	408b      	lsls	r3, r1
 8001d80:	494f      	ldr	r1, [pc, #316]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
 8001d86:	e06a      	b.n	8001e5e <HAL_RCC_OscConfig+0x5da>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	461a      	mov	r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff faa6 	bl	8001304 <HAL_GetTick>
 8001db8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff faa1 	bl	8001304 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	f000 bc66 	b.w	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001de6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x580>
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e013      	b.n	8001e2c <HAL_RCC_OscConfig+0x5a8>
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_OscConfig+0x63c>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e36:	fa92 f2a2 	rbit	r2, r2
 8001e3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001e3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1af      	bne.n	8001dbe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80da 	beq.w	8002022 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d069      	beq.n	8001f4c <HAL_RCC_OscConfig+0x6c8>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x640>)
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fa2f 	bl	8001304 <HAL_GetTick>
 8001ea6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e00d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fa2a 	bl	8001304 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d905      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e3ef      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	10908120 	.word	0x10908120
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fa93 f2a3 	rbit	r2, r3
 8001eee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0c:	4ba4      	ldr	r3, [pc, #656]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8001f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f14:	2102      	movs	r1, #2
 8001f16:	6019      	str	r1, [r3, #0]
 8001f18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f1a3 	rbit	r1, r3
 8001f22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f26:	6019      	str	r1, [r3, #0]
  return result;
 8001f28:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0b0      	beq.n	8001eac <HAL_RCC_OscConfig+0x628>
 8001f4a:	e06a      	b.n	8002022 <HAL_RCC_OscConfig+0x79e>
 8001f4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f62:	601a      	str	r2, [r3, #0]
  return result;
 8001f64:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x920>)
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f9c1 	bl	8001304 <HAL_GetTick>
 8001f82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f86:	e009      	b.n	8001f9c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f9bc 	bl	8001304 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e381      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8001f9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fe2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8001fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fec:	2102      	movs	r1, #2
 8001fee:	6019      	str	r1, [r3, #0]
 8001ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f1a3 	rbit	r1, r3
 8001ffa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ffe:	6019      	str	r1, [r3, #0]
  return result;
 8002000:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1b2      	bne.n	8001f88 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8157 	beq.w	80022e0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d112      	bne.n	800206a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b56      	ldr	r3, [pc, #344]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a55      	ldr	r2, [pc, #340]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <HAL_RCC_OscConfig+0x924>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d11a      	bne.n	80020ac <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002076:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <HAL_RCC_OscConfig+0x924>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a4b      	ldr	r2, [pc, #300]	; (80021a8 <HAL_RCC_OscConfig+0x924>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7ff f93f 	bl	8001304 <HAL_GetTick>
 8002086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208c:	f7ff f93a 	bl	8001304 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e2ff      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_OscConfig+0x924>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ef      	beq.n	800208c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x840>
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	e02f      	b.n	8002124 <HAL_RCC_OscConfig+0x8a0>
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x864>
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a30      	ldr	r2, [pc, #192]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0x8a0>
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x888>
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0x8a0>
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06a      	beq.n	8002204 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff f8e9 	bl	8001304 <HAL_GetTick>
 8002132:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff f8e4 	bl	8001304 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e2a7      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8002150:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800216c:	2202      	movs	r2, #2
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800217e:	601a      	str	r2, [r3, #0]
  return result;
 8002180:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002184:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x928>
 800219a:	4b01      	ldr	r3, [pc, #4]	; (80021a0 <HAL_RCC_OscConfig+0x91c>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	e013      	b.n	80021c8 <HAL_RCC_OscConfig+0x944>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	10908120 	.word	0x10908120
 80021a8:	40007000 	.word	0x40007000
 80021ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021b0:	2202      	movs	r2, #2
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	4bc0      	ldr	r3, [pc, #768]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80021cc:	2102      	movs	r1, #2
 80021ce:	6011      	str	r1, [r2, #0]
 80021d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	fa92 f1a2 	rbit	r1, r2
 80021da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021de:	6011      	str	r1, [r2, #0]
  return result;
 80021e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d09a      	beq.n	8002138 <HAL_RCC_OscConfig+0x8b4>
 8002202:	e063      	b.n	80022cc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff f87e 	bl	8001304 <HAL_GetTick>
 8002208:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff f879 	bl	8001304 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e23c      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8002226:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fa93 f2a3 	rbit	r2, r3
 8002238:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002242:	2202      	movs	r2, #2
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002254:	601a      	str	r2, [r3, #0]
  return result;
 8002256:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800225a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x9f2>
 8002270:	4b95      	ldr	r3, [pc, #596]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	e00d      	b.n	8002292 <HAL_RCC_OscConfig+0xa0e>
 8002276:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800227a:	2202      	movs	r2, #2
 800227c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002296:	2102      	movs	r1, #2
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	fa92 f1a2 	rbit	r1, r2
 80022a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022a8:	6011      	str	r1, [r2, #0]
  return result;
 80022aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1a0      	bne.n	800220e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022cc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b7c      	ldr	r3, [pc, #496]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4a7b      	ldr	r2, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 81d9 	beq.w	800269e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	f000 81a6 	beq.w	8002646 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b02      	cmp	r3, #2
 8002302:	f040 811e 	bne.w	8002542 <HAL_RCC_OscConfig+0xcbe>
 8002306:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800230a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800231e:	601a      	str	r2, [r3, #0]
  return result;
 8002320:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002324:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	461a      	mov	r2, r3
 8002338:	2300      	movs	r3, #0
 800233a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe ffe2 	bl	8001304 <HAL_GetTick>
 8002340:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	e009      	b.n	800235a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe ffdd 	bl	8001304 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1a2      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 800235a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800235e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002372:	601a      	str	r2, [r3, #0]
  return result;
 8002374:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002378:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d102      	bne.n	8002394 <HAL_RCC_OscConfig+0xb10>
 800238e:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e01b      	b.n	80023cc <HAL_RCC_OscConfig+0xb48>
 8002394:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023d4:	6011      	str	r1, [r2, #0]
 80023d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	fa92 f1a2 	rbit	r1, r2
 80023e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023e4:	6011      	str	r1, [r2, #0]
  return result;
 80023e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f002 021f 	and.w	r2, r2, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d19e      	bne.n	8002346 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f023 020f 	bic.w	r2, r3, #15
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	492c      	ldr	r1, [pc, #176]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 8002418:	4313      	orrs	r3, r2
 800241a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a19      	ldr	r1, [r3, #32]
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	430b      	orrs	r3, r1
 8002432:	4925      	ldr	r1, [pc, #148]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800243c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002456:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	461a      	mov	r2, r3
 800246a:	2301      	movs	r3, #1
 800246c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe ff49 	bl	8001304 <HAL_GetTick>
 8002472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002476:	e009      	b.n	800248c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe ff44 	bl	8001304 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e109      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 800248c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024a4:	601a      	str	r2, [r3, #0]
  return result;
 80024a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0xc48>
 80024c0:	4b01      	ldr	r3, [pc, #4]	; (80024c8 <HAL_RCC_OscConfig+0xc44>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	e01e      	b.n	8002504 <HAL_RCC_OscConfig+0xc80>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0xe28>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002508:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fa92 f1a2 	rbit	r1, r2
 8002518:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800251c:	6011      	str	r1, [r2, #0]
  return result;
 800251e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	fab2 f282 	clz	r2, r2
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d09b      	beq.n	8002478 <HAL_RCC_OscConfig+0xbf4>
 8002540:	e0ad      	b.n	800269e <HAL_RCC_OscConfig+0xe1a>
 8002542:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002546:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800255a:	601a      	str	r2, [r3, #0]
  return result;
 800255c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002560:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fec4 	bl	8001304 <HAL_GetTick>
 800257c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e009      	b.n	8002596 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe febf 	bl	8001304 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e084      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
 8002596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ae:	601a      	str	r2, [r3, #0]
  return result;
 80025b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_OscConfig+0xd4c>
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_RCC_OscConfig+0xe28>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	e01b      	b.n	8002608 <HAL_RCC_OscConfig+0xd84>
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f107 0320 	add.w	r3, r7, #32
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f107 0318 	add.w	r3, r7, #24
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_RCC_OscConfig+0xe28>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f107 0214 	add.w	r2, r7, #20
 800260c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002610:	6011      	str	r1, [r2, #0]
 8002612:	f107 0214 	add.w	r2, r7, #20
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	fa92 f1a2 	rbit	r1, r2
 800261c:	f107 0210 	add.w	r2, r7, #16
 8002620:	6011      	str	r1, [r2, #0]
  return result;
 8002622:	f107 0210 	add.w	r2, r7, #16
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	fab2 f282 	clz	r2, r2
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	f042 0220 	orr.w	r2, r2, #32
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	f002 021f 	and.w	r2, r2, #31
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d19e      	bne.n	8002582 <HAL_RCC_OscConfig+0xcfe>
 8002644:	e02b      	b.n	800269e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e025      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_RCC_OscConfig+0xe28>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_RCC_OscConfig+0xe28>)
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002664:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002668:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	429a      	cmp	r2, r3
 8002674:	d111      	bne.n	800269a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002676:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800267a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002684:	429a      	cmp	r2, r3
 8002686:	d108      	bne.n	800269a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b09e      	sub	sp, #120	; 0x78
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e162      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b8d      	ldr	r3, [pc, #564]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	498b      	ldr	r1, [pc, #556]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e14a      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	497f      	ldr	r1, [pc, #508]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80dc 	beq.w	80028dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d13c      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xf6>
 800272c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002730:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800273a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <HAL_RCC_ClockConfig+0xa6>
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	e00f      	b.n	8002776 <HAL_RCC_ClockConfig+0xc6>
 8002756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	667b      	str	r3, [r7, #100]	; 0x64
 8002764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002768:	663b      	str	r3, [r7, #96]	; 0x60
 800276a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800277a:	65ba      	str	r2, [r7, #88]	; 0x58
 800277c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d17b      	bne.n	800289a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0f3      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d13c      	bne.n	8002828 <HAL_RCC_ClockConfig+0x178>
 80027ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x128>
 80027d2:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_ClockConfig+0x148>
 80027d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
 80027e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ea:	643b      	str	r3, [r7, #64]	; 0x40
 80027ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80027fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f002 021f 	and.w	r2, r2, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d13a      	bne.n	800289a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b2      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
 8002828:	2302      	movs	r3, #2
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1a0>
 800284a:	4b31      	ldr	r3, [pc, #196]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e00d      	b.n	800286c <HAL_RCC_ClockConfig+0x1bc>
 8002850:	2302      	movs	r3, #2
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
 800285c:	2302      	movs	r3, #2
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2202      	movs	r2, #2
 800286e:	61ba      	str	r2, [r7, #24]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	617a      	str	r2, [r7, #20]
  return result;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e079      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	491a      	ldr	r1, [pc, #104]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fd2a 	bl	8001304 <HAL_GetTick>
 80028b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fd26 	bl	8001304 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e061      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d214      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4906      	ldr	r1, [pc, #24]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e040      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	491a      	ldr	r1, [pc, #104]	; (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4912      	ldr	r1, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002952:	f000 f829 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002956:	4601      	mov	r1, r0
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002960:	22f0      	movs	r2, #240	; 0xf0
 8002962:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	60fa      	str	r2, [r7, #12]
  return result;
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	40d3      	lsrs	r3, r2
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x2ec>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	fa21 f303 	lsr.w	r3, r1, r3
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fbc8 	bl	800111c <HAL_InitTick>
  
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3778      	adds	r7, #120	; 0x78
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	080085d4 	.word	0x080085d4
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b08b      	sub	sp, #44	; 0x2c
 80029ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x30>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x36>
 80029d6:	e03f      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029da:	623b      	str	r3, [r7, #32]
      break;
 80029dc:	e03f      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	607a      	str	r2, [r7, #4]
  return result;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	40d3      	lsrs	r3, r2
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	60fa      	str	r2, [r7, #12]
  return result;
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	40d3      	lsrs	r3, r2
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a30:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	e007      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a42:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	623b      	str	r3, [r7, #32]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a5a:	623b      	str	r3, [r7, #32]
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	372c      	adds	r7, #44	; 0x2c
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	080085ec 	.word	0x080085ec
 8002a78:	080085fc 	.word	0x080085fc

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a9a:	f7ff ffef 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002aac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	fa92 f2a2 	rbit	r2, r2
 8002ab4:	603a      	str	r2, [r7, #0]
  return result;
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	fab2 f282 	clz	r2, r2
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	40d3      	lsrs	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	080085e4 	.word	0x080085e4

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ade:	f7ff ffcd 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002aec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002af0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	603a      	str	r2, [r7, #0]
  return result;
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	40d3      	lsrs	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	080085e4 	.word	0x080085e4

08002b1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	220f      	movs	r2, #15
 8002b2a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCC_GetClockConfig+0x60>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0207 	and.w	r2, r3, #7
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b092      	sub	sp, #72	; 0x48
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80d4 	beq.w	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba4:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10e      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	61d3      	str	r3, [r2, #28]
 8002bbc:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fb8d 	bl	8001304 <HAL_GetTick>
 8002bea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe fb89 	bl	8001304 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1d6      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0c:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8084 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d07c      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04b      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fb39 	bl	8001304 <HAL_GetTick>
 8002c92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe fb35 	bl	8001304 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e180      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cac:	2302      	movs	r3, #2
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	61fb      	str	r3, [r7, #28]
  return result;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d108      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cda:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	e00d      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	10908100 	.word	0x10908100
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	4ba0      	ldr	r3, [pc, #640]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	613a      	str	r2, [r7, #16]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	fa92 f2a2 	rbit	r2, r2
 8002d06:	60fa      	str	r2, [r7, #12]
  return result;
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0b7      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d26:	4b95      	ldr	r3, [pc, #596]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4992      	ldr	r1, [pc, #584]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b8e      	ldr	r3, [pc, #568]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a8d      	ldr	r2, [pc, #564]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d58:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f023 0203 	bic.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4985      	ldr	r1, [pc, #532]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	497e      	ldr	r1, [pc, #504]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d94:	4b79      	ldr	r3, [pc, #484]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	4976      	ldr	r1, [pc, #472]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db2:	4b72      	ldr	r3, [pc, #456]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	496f      	ldr	r1, [pc, #444]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	4967      	ldr	r1, [pc, #412]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f023 0220 	bic.w	r2, r3, #32
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4960      	ldr	r1, [pc, #384]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	4958      	ldr	r1, [pc, #352]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4951      	ldr	r1, [pc, #324]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	4949      	ldr	r1, [pc, #292]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4942      	ldr	r1, [pc, #264]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	493a      	ldr	r1, [pc, #232]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	4933      	ldr	r1, [pc, #204]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	492b      	ldr	r1, [pc, #172]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4924      	ldr	r1, [pc, #144]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	491c      	ldr	r1, [pc, #112]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	4915      	ldr	r1, [pc, #84]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	490d      	ldr	r1, [pc, #52]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	4906      	ldr	r1, [pc, #24]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00c      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f88:	490b      	ldr	r1, [pc, #44]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3748      	adds	r7, #72	; 0x48
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e049      	b.n	8003062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd ffc2 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f001 f834 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d001      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04f      	b.n	8003124 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	; (8003130 <HAL_TIM_Base_Start_IT+0xc4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d018      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_TIM_Base_Start_IT+0xc8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_TIM_Base_Start_IT+0xcc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_TIM_Base_Start_IT+0xd0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_TIM_Base_Start_IT+0xd4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_TIM_Base_Start_IT+0xd8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d115      	bne.n	800310e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_TIM_Base_Start_IT+0xdc>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d015      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0xb4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fa:	d011      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	e008      	b.n	8003120 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e000      	b.n	8003122 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40013400 	.word	0x40013400
 8003140:	40014000 	.word	0x40014000
 8003144:	40015000 	.word	0x40015000
 8003148:	00010007 	.word	0x00010007

0800314c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e049      	b.n	80031f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f841 	bl	80031fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 ff6c 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x24>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e03c      	b.n	80032ae <HAL_TIM_PWM_Start+0x9e>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b04      	cmp	r3, #4
 8003238:	d109      	bne.n	800324e <HAL_TIM_PWM_Start+0x3e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e02f      	b.n	80032ae <HAL_TIM_PWM_Start+0x9e>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d109      	bne.n	8003268 <HAL_TIM_PWM_Start+0x58>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e022      	b.n	80032ae <HAL_TIM_PWM_Start+0x9e>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d109      	bne.n	8003282 <HAL_TIM_PWM_Start+0x72>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e015      	b.n	80032ae <HAL_TIM_PWM_Start+0x9e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b10      	cmp	r3, #16
 8003286:	d109      	bne.n	800329c <HAL_TIM_PWM_Start+0x8c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e008      	b.n	80032ae <HAL_TIM_PWM_Start+0x9e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0a1      	b.n	80033fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0xb6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	e023      	b.n	800330e <HAL_TIM_PWM_Start+0xfe>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0xc6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	e01b      	b.n	800330e <HAL_TIM_PWM_Start+0xfe>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xd6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e4:	e013      	b.n	800330e <HAL_TIM_PWM_Start+0xfe>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Start+0xe6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f4:	e00b      	b.n	800330e <HAL_TIM_PWM_Start+0xfe>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_PWM_Start+0xf6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	e003      	b.n	800330e <HAL_TIM_PWM_Start+0xfe>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2201      	movs	r2, #1
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fc08 	bl	8004b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_TIM_PWM_Start+0x1f4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d018      	beq.n	8003358 <HAL_TIM_PWM_Start+0x148>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a37      	ldr	r2, [pc, #220]	; (8003408 <HAL_TIM_PWM_Start+0x1f8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_TIM_PWM_Start+0x148>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a35      	ldr	r2, [pc, #212]	; (800340c <HAL_TIM_PWM_Start+0x1fc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00e      	beq.n	8003358 <HAL_TIM_PWM_Start+0x148>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a34      	ldr	r2, [pc, #208]	; (8003410 <HAL_TIM_PWM_Start+0x200>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_TIM_PWM_Start+0x148>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a32      	ldr	r2, [pc, #200]	; (8003414 <HAL_TIM_PWM_Start+0x204>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_PWM_Start+0x148>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a31      	ldr	r2, [pc, #196]	; (8003418 <HAL_TIM_PWM_Start+0x208>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_TIM_PWM_Start+0x14c>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_TIM_PWM_Start+0x14e>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <HAL_TIM_PWM_Start+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x1a8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x1a8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a24      	ldr	r2, [pc, #144]	; (800341c <HAL_TIM_PWM_Start+0x20c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x1a8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_TIM_PWM_Start+0x210>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x1a8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_TIM_PWM_Start+0x1f8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x1a8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a18      	ldr	r2, [pc, #96]	; (800340c <HAL_TIM_PWM_Start+0x1fc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x1a8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_TIM_PWM_Start+0x208>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d115      	bne.n	80033e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_TIM_PWM_Start+0x214>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d015      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x1e6>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d011      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	e008      	b.n	80033f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800
 8003418:	40015000 	.word	0x40015000
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	00010007 	.word	0x00010007

08003428 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fb76 	bl	8004b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a40      	ldr	r2, [pc, #256]	; (8003548 <HAL_TIM_PWM_Stop+0x120>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_TIM_PWM_Stop+0x54>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a3f      	ldr	r2, [pc, #252]	; (800354c <HAL_TIM_PWM_Stop+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_TIM_PWM_Stop+0x54>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a3d      	ldr	r2, [pc, #244]	; (8003550 <HAL_TIM_PWM_Stop+0x128>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_PWM_Stop+0x54>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a3c      	ldr	r2, [pc, #240]	; (8003554 <HAL_TIM_PWM_Stop+0x12c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_PWM_Stop+0x54>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3a      	ldr	r2, [pc, #232]	; (8003558 <HAL_TIM_PWM_Stop+0x130>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_PWM_Stop+0x54>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a39      	ldr	r2, [pc, #228]	; (800355c <HAL_TIM_PWM_Stop+0x134>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_TIM_PWM_Stop+0x58>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_TIM_PWM_Stop+0x5a>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d017      	beq.n	80034b6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <HAL_TIM_PWM_Stop+0x8e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	f240 4344 	movw	r3, #1092	; 0x444
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <HAL_TIM_PWM_Stop+0x8e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_TIM_PWM_Stop+0xbe>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	f240 4344 	movw	r3, #1092	; 0x444
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_TIM_PWM_Stop+0xbe>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_PWM_Stop+0xce>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f4:	e023      	b.n	800353e <HAL_TIM_PWM_Stop+0x116>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Stop+0xde>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	e01b      	b.n	800353e <HAL_TIM_PWM_Stop+0x116>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Stop+0xee>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Stop+0x116>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Stop+0xfe>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003524:	e00b      	b.n	800353e <HAL_TIM_PWM_Stop+0x116>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b10      	cmp	r3, #16
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Stop+0x10e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003534:	e003      	b.n	800353e <HAL_TIM_PWM_Stop+0x116>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40013400 	.word	0x40013400
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	40015000 	.word	0x40015000

08003560 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e049      	b.n	8003606 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f841 	bl	800360e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fd62 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <HAL_TIM_IC_Start_IT+0x1a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e023      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x62>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d104      	bne.n	800364e <HAL_TIM_IC_Start_IT+0x2a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e01b      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x62>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Start_IT+0x3a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e013      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x62>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Start_IT+0x4a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e00b      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x62>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b10      	cmp	r3, #16
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Start_IT+0x5a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e003      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003684:	b2db      	uxtb	r3, r3
 8003686:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <HAL_TIM_IC_Start_IT+0x74>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e013      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x9c>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d104      	bne.n	80036a8 <HAL_TIM_IC_Start_IT+0x84>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e00b      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x9c>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d104      	bne.n	80036b8 <HAL_TIM_IC_Start_IT+0x94>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e003      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x9c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0d8      	b.n	8003884 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_IC_Start_IT+0xbe>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	e023      	b.n	800372a <HAL_TIM_IC_Start_IT+0x106>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_IC_Start_IT+0xce>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f0:	e01b      	b.n	800372a <HAL_TIM_IC_Start_IT+0x106>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_IC_Start_IT+0xde>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003700:	e013      	b.n	800372a <HAL_TIM_IC_Start_IT+0x106>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b0c      	cmp	r3, #12
 8003706:	d104      	bne.n	8003712 <HAL_TIM_IC_Start_IT+0xee>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003710:	e00b      	b.n	800372a <HAL_TIM_IC_Start_IT+0x106>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b10      	cmp	r3, #16
 8003716:	d104      	bne.n	8003722 <HAL_TIM_IC_Start_IT+0xfe>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003720:	e003      	b.n	800372a <HAL_TIM_IC_Start_IT+0x106>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <HAL_TIM_IC_Start_IT+0x116>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003738:	e013      	b.n	8003762 <HAL_TIM_IC_Start_IT+0x13e>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d104      	bne.n	800374a <HAL_TIM_IC_Start_IT+0x126>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003748:	e00b      	b.n	8003762 <HAL_TIM_IC_Start_IT+0x13e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d104      	bne.n	800375a <HAL_TIM_IC_Start_IT+0x136>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003758:	e003      	b.n	8003762 <HAL_TIM_IC_Start_IT+0x13e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d841      	bhi.n	80037ec <HAL_TIM_IC_Start_IT+0x1c8>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <HAL_TIM_IC_Start_IT+0x14c>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	080037a5 	.word	0x080037a5
 8003774:	080037ed 	.word	0x080037ed
 8003778:	080037ed 	.word	0x080037ed
 800377c:	080037ed 	.word	0x080037ed
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037ed 	.word	0x080037ed
 8003788:	080037ed 	.word	0x080037ed
 800378c:	080037ed 	.word	0x080037ed
 8003790:	080037c9 	.word	0x080037c9
 8003794:	080037ed 	.word	0x080037ed
 8003798:	080037ed 	.word	0x080037ed
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	080037db 	.word	0x080037db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0202 	orr.w	r2, r2, #2
 80037b2:	60da      	str	r2, [r3, #12]
      break;
 80037b4:	e01b      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0204 	orr.w	r2, r2, #4
 80037c4:	60da      	str	r2, [r3, #12]
      break;
 80037c6:	e012      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	60da      	str	r2, [r3, #12]
      break;
 80037d8:	e009      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0210 	orr.w	r2, r2, #16
 80037e8:	60da      	str	r2, [r3, #12]
      break;
 80037ea:	e000      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80037ec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2201      	movs	r2, #1
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f998 	bl	8004b2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a22      	ldr	r2, [pc, #136]	; (800388c <HAL_TIM_IC_Start_IT+0x268>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01d      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x21e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d018      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x21e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_TIM_IC_Start_IT+0x26c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x21e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_TIM_IC_Start_IT+0x270>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x21e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <HAL_TIM_IC_Start_IT+0x274>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x21e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_TIM_IC_Start_IT+0x278>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x21e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_TIM_IC_Start_IT+0x27c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d115      	bne.n	800386e <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_TIM_IC_Start_IT+0x280>)
 800384a:	4013      	ands	r3, r2
 800384c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d015      	beq.n	8003880 <HAL_TIM_IC_Start_IT+0x25c>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d011      	beq.n	8003880 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	e008      	b.n	8003880 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e000      	b.n	8003882 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40013400 	.word	0x40013400
 800389c:	40014000 	.word	0x40014000
 80038a0:	40015000 	.word	0x40015000
 80038a4:	00010007 	.word	0x00010007

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0202 	mvn.w	r2, #2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fc ffb0 	bl	8000850 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fb9a 	bl	800402c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fba1 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0204 	mvn.w	r2, #4
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fc ff86 	bl	8000850 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fb70 	bl	800402c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fb77 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0208 	mvn.w	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fc ff5c 	bl	8000850 <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fb46 	bl	800402c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fb4d 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0210 	mvn.w	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fc ff32 	bl	8000850 <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fb1c 	bl	800402c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fb23 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0201 	mvn.w	r2, #1
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fa5c 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f001 f926 	bl	8004ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f001 f919 	bl	8004cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fad1 	bl	8004054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d10e      	bne.n	8003ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0220 	mvn.w	r2, #32
 8003ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f001 f8d9 	bl	8004c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e082      	b.n	8003c06 <HAL_TIM_IC_ConfigChannel+0x120>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f000 fe47 	bl	80047b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020c 	bic.w	r2, r2, #12
 8003b30:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6999      	ldr	r1, [r3, #24]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	e05a      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11c      	bne.n	8003b86 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 fec5 	bl	80048ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b6e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
 8003b84:	e03a      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f000 ff12 	bl	80049c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 020c 	bic.w	r2, r2, #12
 8003bae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69d9      	ldr	r1, [r3, #28]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e01b      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f000 ff32 	bl	8004a3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003be6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69d9      	ldr	r1, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0fd      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b14      	cmp	r3, #20
 8003c36:	f200 80f0 	bhi.w	8003e1a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003e1b 	.word	0x08003e1b
 8003c48:	08003e1b 	.word	0x08003e1b
 8003c4c:	08003e1b 	.word	0x08003e1b
 8003c50:	08003cd5 	.word	0x08003cd5
 8003c54:	08003e1b 	.word	0x08003e1b
 8003c58:	08003e1b 	.word	0x08003e1b
 8003c5c:	08003e1b 	.word	0x08003e1b
 8003c60:	08003d17 	.word	0x08003d17
 8003c64:	08003e1b 	.word	0x08003e1b
 8003c68:	08003e1b 	.word	0x08003e1b
 8003c6c:	08003e1b 	.word	0x08003e1b
 8003c70:	08003d57 	.word	0x08003d57
 8003c74:	08003e1b 	.word	0x08003e1b
 8003c78:	08003e1b 	.word	0x08003e1b
 8003c7c:	08003e1b 	.word	0x08003e1b
 8003c80:	08003d99 	.word	0x08003d99
 8003c84:	08003e1b 	.word	0x08003e1b
 8003c88:	08003e1b 	.word	0x08003e1b
 8003c8c:	08003e1b 	.word	0x08003e1b
 8003c90:	08003dd9 	.word	0x08003dd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa82 	bl	80041a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	619a      	str	r2, [r3, #24]
      break;
 8003cd2:	e0a3      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fafc 	bl	80042d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	021a      	lsls	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	619a      	str	r2, [r3, #24]
      break;
 8003d14:	e082      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fb6f 	bl	8004400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0208 	orr.w	r2, r2, #8
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0204 	bic.w	r2, r2, #4
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	61da      	str	r2, [r3, #28]
      break;
 8003d54:	e062      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fbe1 	bl	8004524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	61da      	str	r2, [r3, #28]
      break;
 8003d96:	e041      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fc30 	bl	8004604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0208 	orr.w	r2, r2, #8
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0204 	bic.w	r2, r2, #4
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dd6:	e021      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fc7a 	bl	80046d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	021a      	lsls	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e18:	e000      	b.n	8003e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003e1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop

08003e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_TIM_ConfigClockSource+0x18>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e0a8      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x16a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d067      	beq.n	8003f54 <HAL_TIM_ConfigClockSource+0x124>
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d80b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x70>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d073      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0x144>
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d802      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x66>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d06f      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e94:	e078      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d06c      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0x144>
 8003e9a:	2b30      	cmp	r3, #48	; 0x30
 8003e9c:	d06a      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003e9e:	e073      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ea0:	2b70      	cmp	r3, #112	; 0x70
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0x90>
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d804      	bhi.n	8003eb2 <HAL_TIM_ConfigClockSource+0x82>
 8003ea8:	2b50      	cmp	r3, #80	; 0x50
 8003eaa:	d033      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xe4>
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d041      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003eb0:	e06a      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d066      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x156>
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d017      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003ebe:	e063      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6899      	ldr	r1, [r3, #8]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f000 fe0c 	bl	8004aec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	609a      	str	r2, [r3, #8]
      break;
 8003eec:	e04c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f000 fdf5 	bl	8004aec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e039      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	461a      	mov	r2, r3
 8003f22:	f000 fcb3 	bl	800488c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2150      	movs	r1, #80	; 0x50
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fdc2 	bl	8004ab6 <TIM_ITRx_SetConfig>
      break;
 8003f32:	e029      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f000 fd0f 	bl	8004964 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2160      	movs	r1, #96	; 0x60
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fdb2 	bl	8004ab6 <TIM_ITRx_SetConfig>
      break;
 8003f52:	e019      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	461a      	mov	r2, r3
 8003f62:	f000 fc93 	bl	800488c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2140      	movs	r1, #64	; 0x40
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fda2 	bl	8004ab6 <TIM_ITRx_SetConfig>
      break;
 8003f72:	e009      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 fd99 	bl	8004ab6 <TIM_ITRx_SetConfig>
        break;
 8003f84:	e000      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d831      	bhi.n	800401c <HAL_TIM_ReadCapturedValue+0x78>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	0800401d 	.word	0x0800401d
 8003fc8:	0800401d 	.word	0x0800401d
 8003fcc:	0800401d 	.word	0x0800401d
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	0800401d 	.word	0x0800401d
 8003fd8:	0800401d 	.word	0x0800401d
 8003fdc:	0800401d 	.word	0x0800401d
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	0800401d 	.word	0x0800401d
 8003fe8:	0800401d 	.word	0x0800401d
 8003fec:	0800401d 	.word	0x0800401d
 8003ff0:	08004013 	.word	0x08004013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	60fb      	str	r3, [r7, #12]

      break;
 8003ffc:	e00f      	b.n	800401e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	60fb      	str	r3, [r7, #12]

      break;
 8004006:	e00a      	b.n	800401e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	60fb      	str	r3, [r7, #12]

      break;
 8004010:	e005      	b.n	800401e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	60fb      	str	r3, [r7, #12]

      break;
 800401a:	e000      	b.n	800401e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800401c:	bf00      	nop
  }

  return tmpreg;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a42      	ldr	r2, [pc, #264]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d00f      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <TIM_Base_SetConfig+0x120>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3e      	ldr	r2, [pc, #248]	; (800418c <TIM_Base_SetConfig+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <TIM_Base_SetConfig+0x128>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d108      	bne.n	80040ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a31      	ldr	r2, [pc, #196]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <TIM_Base_SetConfig+0x120>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2d      	ldr	r2, [pc, #180]	; (800418c <TIM_Base_SetConfig+0x124>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2c      	ldr	r2, [pc, #176]	; (8004190 <TIM_Base_SetConfig+0x128>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2b      	ldr	r2, [pc, #172]	; (800419c <TIM_Base_SetConfig+0x134>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <TIM_Base_SetConfig+0x138>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a25      	ldr	r2, [pc, #148]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <TIM_Base_SetConfig+0x100>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a13      	ldr	r2, [pc, #76]	; (8004190 <TIM_Base_SetConfig+0x128>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00f      	beq.n	8004168 <TIM_Base_SetConfig+0x100>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a13      	ldr	r2, [pc, #76]	; (8004198 <TIM_Base_SetConfig+0x130>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00b      	beq.n	8004168 <TIM_Base_SetConfig+0x100>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <TIM_Base_SetConfig+0x134>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <TIM_Base_SetConfig+0x100>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <TIM_Base_SetConfig+0x138>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0x100>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40013400 	.word	0x40013400
 8004194:	40015000 	.word	0x40015000
 8004198:	40014000 	.word	0x40014000
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800

080041a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f023 0302 	bic.w	r3, r3, #2
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <TIM_OC1_SetConfig+0x11c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_OC1_SetConfig+0x88>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <TIM_OC1_SetConfig+0x120>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_OC1_SetConfig+0x88>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <TIM_OC1_SetConfig+0x124>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_OC1_SetConfig+0x88>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <TIM_OC1_SetConfig+0x128>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC1_SetConfig+0x88>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <TIM_OC1_SetConfig+0x12c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC1_SetConfig+0x88>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <TIM_OC1_SetConfig+0x130>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10c      	bne.n	8004246 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0308 	bic.w	r3, r3, #8
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <TIM_OC1_SetConfig+0x11c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <TIM_OC1_SetConfig+0xd2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <TIM_OC1_SetConfig+0x120>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00f      	beq.n	8004276 <TIM_OC1_SetConfig+0xd2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <TIM_OC1_SetConfig+0x124>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_OC1_SetConfig+0xd2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <TIM_OC1_SetConfig+0x128>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_OC1_SetConfig+0xd2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <TIM_OC1_SetConfig+0x12c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC1_SetConfig+0xd2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <TIM_OC1_SetConfig+0x130>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	621a      	str	r2, [r3, #32]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800
 80042d4:	40015000 	.word	0x40015000

080042d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0210 	bic.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0320 	bic.w	r3, r3, #32
 8004326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <TIM_OC2_SetConfig+0x110>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d007      	beq.n	800434c <TIM_OC2_SetConfig+0x74>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <TIM_OC2_SetConfig+0x114>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC2_SetConfig+0x74>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <TIM_OC2_SetConfig+0x118>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10d      	bne.n	8004368 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <TIM_OC2_SetConfig+0x110>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <TIM_OC2_SetConfig+0xc0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <TIM_OC2_SetConfig+0x114>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00f      	beq.n	8004398 <TIM_OC2_SetConfig+0xc0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <TIM_OC2_SetConfig+0x11c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <TIM_OC2_SetConfig+0xc0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <TIM_OC2_SetConfig+0x120>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <TIM_OC2_SetConfig+0xc0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <TIM_OC2_SetConfig+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_OC2_SetConfig+0xc0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <TIM_OC2_SetConfig+0x118>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d113      	bne.n	80043c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40013400 	.word	0x40013400
 80043f0:	40015000 	.word	0x40015000
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2b      	ldr	r2, [pc, #172]	; (800450c <TIM_OC3_SetConfig+0x10c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_OC3_SetConfig+0x72>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <TIM_OC3_SetConfig+0x110>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_OC3_SetConfig+0x72>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a29      	ldr	r2, [pc, #164]	; (8004514 <TIM_OC3_SetConfig+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d10d      	bne.n	800448e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800448c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <TIM_OC3_SetConfig+0x10c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <TIM_OC3_SetConfig+0xbe>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <TIM_OC3_SetConfig+0x110>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00f      	beq.n	80044be <TIM_OC3_SetConfig+0xbe>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <TIM_OC3_SetConfig+0x118>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00b      	beq.n	80044be <TIM_OC3_SetConfig+0xbe>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1c      	ldr	r2, [pc, #112]	; (800451c <TIM_OC3_SetConfig+0x11c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <TIM_OC3_SetConfig+0xbe>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <TIM_OC3_SetConfig+0x120>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_OC3_SetConfig+0xbe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <TIM_OC3_SetConfig+0x114>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d113      	bne.n	80044e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40015000 	.word	0x40015000
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <TIM_OC4_SetConfig+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <TIM_OC4_SetConfig+0x8c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <TIM_OC4_SetConfig+0xcc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00f      	beq.n	80045b0 <TIM_OC4_SetConfig+0x8c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <TIM_OC4_SetConfig+0xd0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_OC4_SetConfig+0x8c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <TIM_OC4_SetConfig+0xd4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_OC4_SetConfig+0x8c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <TIM_OC4_SetConfig+0xd8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC4_SetConfig+0x8c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <TIM_OC4_SetConfig+0xdc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d109      	bne.n	80045c4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800
 8004600:	40015000 	.word	0x40015000

08004604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <TIM_OC5_SetConfig+0xbc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_OC5_SetConfig+0x82>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <TIM_OC5_SetConfig+0xc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_OC5_SetConfig+0x82>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <TIM_OC5_SetConfig+0xc4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_OC5_SetConfig+0x82>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a16      	ldr	r2, [pc, #88]	; (80046cc <TIM_OC5_SetConfig+0xc8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_OC5_SetConfig+0x82>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <TIM_OC5_SetConfig+0xcc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_OC5_SetConfig+0x82>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <TIM_OC5_SetConfig+0xd0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d109      	bne.n	800469a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800
 80046d4:	40015000 	.word	0x40015000

080046d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800471e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <TIM_OC6_SetConfig+0xc0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_OC6_SetConfig+0x84>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a19      	ldr	r2, [pc, #100]	; (800479c <TIM_OC6_SetConfig+0xc4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_OC6_SetConfig+0x84>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <TIM_OC6_SetConfig+0xc8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_OC6_SetConfig+0x84>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <TIM_OC6_SetConfig+0xcc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_OC6_SetConfig+0x84>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <TIM_OC6_SetConfig+0xd0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_OC6_SetConfig+0x84>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a15      	ldr	r2, [pc, #84]	; (80047ac <TIM_OC6_SetConfig+0xd4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d109      	bne.n	8004770 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40013400 	.word	0x40013400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800
 80047ac:	40015000 	.word	0x40015000

080047b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a26      	ldr	r2, [pc, #152]	; (8004874 <TIM_TI1_SetConfig+0xc4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d017      	beq.n	800480e <TIM_TI1_SetConfig+0x5e>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d013      	beq.n	800480e <TIM_TI1_SetConfig+0x5e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a23      	ldr	r2, [pc, #140]	; (8004878 <TIM_TI1_SetConfig+0xc8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <TIM_TI1_SetConfig+0x5e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a22      	ldr	r2, [pc, #136]	; (800487c <TIM_TI1_SetConfig+0xcc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_TI1_SetConfig+0x5e>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a21      	ldr	r2, [pc, #132]	; (8004880 <TIM_TI1_SetConfig+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_TI1_SetConfig+0x5e>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a20      	ldr	r2, [pc, #128]	; (8004884 <TIM_TI1_SetConfig+0xd4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_TI1_SetConfig+0x5e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <TIM_TI1_SetConfig+0xd8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <TIM_TI1_SetConfig+0x62>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <TIM_TI1_SetConfig+0x64>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e003      	b.n	8004832 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	b2db      	uxtb	r3, r3
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 030a 	and.w	r3, r3, #10
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40013400 	.word	0x40013400
 8004884:	40014000 	.word	0x40014000
 8004888:	40015000 	.word	0x40015000

0800488c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0201 	bic.w	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 030a 	bic.w	r3, r3, #10
 80048c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b087      	sub	sp, #28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f023 0210 	bic.w	r2, r3, #16
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	b29b      	uxth	r3, r3
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800493c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f023 0210 	bic.w	r2, r3, #16
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800498e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	031b      	lsls	r3, r3, #12
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	621a      	str	r2, [r3, #32]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 0303 	bic.w	r3, r3, #3
 80049f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	031b      	lsls	r3, r3, #12
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	031b      	lsls	r3, r3, #12
 8004a94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f043 0307 	orr.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	021a      	lsls	r2, r3, #8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2201      	movs	r2, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	401a      	ands	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e06d      	b.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01d      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d018      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a16      	ldr	r2, [pc, #88]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40013400 	.word	0x40013400
 8004c80:	40015000 	.word	0x40015000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40014000 	.word	0x40014000

08004c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e040      	b.n	8004d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc f9d2 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8c0 	bl	8004e90 <UART_SetConfig>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e022      	b.n	8004d60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa88 	bl	8005238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb0f 	bl	800537c <UART_CheckIdleState>
 8004d5e:	4603      	mov	r3, r0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	f040 8082 	bne.w	8004e86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_Transmit+0x26>
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07a      	b.n	8004e88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Transmit+0x38>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e073      	b.n	8004e88 <HAL_UART_Transmit+0x120>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2221      	movs	r2, #33	; 0x21
 8004db4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fc faa5 	bl	8001304 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x80>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004df8:	e02d      	b.n	8004e56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fb02 	bl	800540e <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e039      	b.n	8004e88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e26:	b292      	uxth	r2, r2
 8004e28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e008      	b.n	8004e44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1cb      	bne.n	8004dfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2140      	movs	r1, #64	; 0x40
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 face 	bl	800540e <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e005      	b.n	8004e88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4baa      	ldr	r3, [pc, #680]	; (8005164 <UART_SetConfig+0x2d4>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6979      	ldr	r1, [r7, #20]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a98      	ldr	r2, [pc, #608]	; (8005168 <UART_SetConfig+0x2d8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d121      	bne.n	8004f50 <UART_SetConfig+0xc0>
 8004f0c:	4b97      	ldr	r3, [pc, #604]	; (800516c <UART_SetConfig+0x2dc>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d817      	bhi.n	8004f48 <UART_SetConfig+0xb8>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x90>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f31 	.word	0x08004f31
 8004f24:	08004f3d 	.word	0x08004f3d
 8004f28:	08004f43 	.word	0x08004f43
 8004f2c:	08004f37 	.word	0x08004f37
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e0b2      	b.n	800509c <UART_SetConfig+0x20c>
 8004f36:	2302      	movs	r3, #2
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e0af      	b.n	800509c <UART_SetConfig+0x20c>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e0ac      	b.n	800509c <UART_SetConfig+0x20c>
 8004f42:	2308      	movs	r3, #8
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e0a9      	b.n	800509c <UART_SetConfig+0x20c>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	bf00      	nop
 8004f4e:	e0a5      	b.n	800509c <UART_SetConfig+0x20c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a86      	ldr	r2, [pc, #536]	; (8005170 <UART_SetConfig+0x2e0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d123      	bne.n	8004fa2 <UART_SetConfig+0x112>
 8004f5a:	4b84      	ldr	r3, [pc, #528]	; (800516c <UART_SetConfig+0x2dc>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f66:	d012      	beq.n	8004f8e <UART_SetConfig+0xfe>
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d802      	bhi.n	8004f74 <UART_SetConfig+0xe4>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <UART_SetConfig+0xf2>
 8004f72:	e012      	b.n	8004f9a <UART_SetConfig+0x10a>
 8004f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f78:	d00c      	beq.n	8004f94 <UART_SetConfig+0x104>
 8004f7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f7e:	d003      	beq.n	8004f88 <UART_SetConfig+0xf8>
 8004f80:	e00b      	b.n	8004f9a <UART_SetConfig+0x10a>
 8004f82:	2300      	movs	r3, #0
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e089      	b.n	800509c <UART_SetConfig+0x20c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e086      	b.n	800509c <UART_SetConfig+0x20c>
 8004f8e:	2304      	movs	r3, #4
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e083      	b.n	800509c <UART_SetConfig+0x20c>
 8004f94:	2308      	movs	r3, #8
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e080      	b.n	800509c <UART_SetConfig+0x20c>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	bf00      	nop
 8004fa0:	e07c      	b.n	800509c <UART_SetConfig+0x20c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a73      	ldr	r2, [pc, #460]	; (8005174 <UART_SetConfig+0x2e4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d123      	bne.n	8004ff4 <UART_SetConfig+0x164>
 8004fac:	4b6f      	ldr	r3, [pc, #444]	; (800516c <UART_SetConfig+0x2dc>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fb8:	d012      	beq.n	8004fe0 <UART_SetConfig+0x150>
 8004fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fbe:	d802      	bhi.n	8004fc6 <UART_SetConfig+0x136>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <UART_SetConfig+0x144>
 8004fc4:	e012      	b.n	8004fec <UART_SetConfig+0x15c>
 8004fc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fca:	d00c      	beq.n	8004fe6 <UART_SetConfig+0x156>
 8004fcc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fd0:	d003      	beq.n	8004fda <UART_SetConfig+0x14a>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x15c>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e060      	b.n	800509c <UART_SetConfig+0x20c>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e05d      	b.n	800509c <UART_SetConfig+0x20c>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e05a      	b.n	800509c <UART_SetConfig+0x20c>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e057      	b.n	800509c <UART_SetConfig+0x20c>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	bf00      	nop
 8004ff2:	e053      	b.n	800509c <UART_SetConfig+0x20c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a5f      	ldr	r2, [pc, #380]	; (8005178 <UART_SetConfig+0x2e8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d123      	bne.n	8005046 <UART_SetConfig+0x1b6>
 8004ffe:	4b5b      	ldr	r3, [pc, #364]	; (800516c <UART_SetConfig+0x2dc>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500a:	d012      	beq.n	8005032 <UART_SetConfig+0x1a2>
 800500c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005010:	d802      	bhi.n	8005018 <UART_SetConfig+0x188>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <UART_SetConfig+0x196>
 8005016:	e012      	b.n	800503e <UART_SetConfig+0x1ae>
 8005018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501c:	d00c      	beq.n	8005038 <UART_SetConfig+0x1a8>
 800501e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005022:	d003      	beq.n	800502c <UART_SetConfig+0x19c>
 8005024:	e00b      	b.n	800503e <UART_SetConfig+0x1ae>
 8005026:	2300      	movs	r3, #0
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e037      	b.n	800509c <UART_SetConfig+0x20c>
 800502c:	2302      	movs	r3, #2
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e034      	b.n	800509c <UART_SetConfig+0x20c>
 8005032:	2304      	movs	r3, #4
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e031      	b.n	800509c <UART_SetConfig+0x20c>
 8005038:	2308      	movs	r3, #8
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e02e      	b.n	800509c <UART_SetConfig+0x20c>
 800503e:	2310      	movs	r3, #16
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	bf00      	nop
 8005044:	e02a      	b.n	800509c <UART_SetConfig+0x20c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4c      	ldr	r2, [pc, #304]	; (800517c <UART_SetConfig+0x2ec>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d123      	bne.n	8005098 <UART_SetConfig+0x208>
 8005050:	4b46      	ldr	r3, [pc, #280]	; (800516c <UART_SetConfig+0x2dc>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505c:	d012      	beq.n	8005084 <UART_SetConfig+0x1f4>
 800505e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005062:	d802      	bhi.n	800506a <UART_SetConfig+0x1da>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <UART_SetConfig+0x1e8>
 8005068:	e012      	b.n	8005090 <UART_SetConfig+0x200>
 800506a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506e:	d00c      	beq.n	800508a <UART_SetConfig+0x1fa>
 8005070:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005074:	d003      	beq.n	800507e <UART_SetConfig+0x1ee>
 8005076:	e00b      	b.n	8005090 <UART_SetConfig+0x200>
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e00e      	b.n	800509c <UART_SetConfig+0x20c>
 800507e:	2302      	movs	r3, #2
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e00b      	b.n	800509c <UART_SetConfig+0x20c>
 8005084:	2304      	movs	r3, #4
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e008      	b.n	800509c <UART_SetConfig+0x20c>
 800508a:	2308      	movs	r3, #8
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e005      	b.n	800509c <UART_SetConfig+0x20c>
 8005090:	2310      	movs	r3, #16
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	bf00      	nop
 8005096:	e001      	b.n	800509c <UART_SetConfig+0x20c>
 8005098:	2310      	movs	r3, #16
 800509a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a4:	d16e      	bne.n	8005184 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d828      	bhi.n	80050fe <UART_SetConfig+0x26e>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x224>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fd fcdc 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e013      	b.n	8005108 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fd fcfa 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 80050e4:	61b8      	str	r0, [r7, #24]
        break;
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <UART_SetConfig+0x2f0>)
 80050ea:	61bb      	str	r3, [r7, #24]
        break;
 80050ec:	e00c      	b.n	8005108 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7fd fc5b 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80050f2:	61b8      	str	r0, [r7, #24]
        break;
 80050f4:	e008      	b.n	8005108 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fa:	61bb      	str	r3, [r7, #24]
        break;
 80050fc:	e004      	b.n	8005108 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77bb      	strb	r3, [r7, #30]
        break;
 8005106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8086 	beq.w	800521c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	005a      	lsls	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d916      	bls.n	800515c <UART_SetConfig+0x2cc>
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d212      	bcs.n	800515c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f023 030f 	bic.w	r3, r3, #15
 800513e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	b29a      	uxth	r2, r3
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	4313      	orrs	r3, r2
 8005150:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	89fa      	ldrh	r2, [r7, #14]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	e05f      	b.n	800521c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	77bb      	strb	r3, [r7, #30]
 8005160:	e05c      	b.n	800521c <UART_SetConfig+0x38c>
 8005162:	bf00      	nop
 8005164:	efff69f3 	.word	0xefff69f3
 8005168:	40013800 	.word	0x40013800
 800516c:	40021000 	.word	0x40021000
 8005170:	40004400 	.word	0x40004400
 8005174:	40004800 	.word	0x40004800
 8005178:	40004c00 	.word	0x40004c00
 800517c:	40005000 	.word	0x40005000
 8005180:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005184:	7ffb      	ldrb	r3, [r7, #31]
 8005186:	2b08      	cmp	r3, #8
 8005188:	d827      	bhi.n	80051da <UART_SetConfig+0x34a>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x300>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051db 	.word	0x080051db
 80051a0:	080051cb 	.word	0x080051cb
 80051a4:	080051db 	.word	0x080051db
 80051a8:	080051db 	.word	0x080051db
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fd fc6e 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 80051b8:	61b8      	str	r0, [r7, #24]
        break;
 80051ba:	e013      	b.n	80051e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fd fc8c 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 80051c0:	61b8      	str	r0, [r7, #24]
        break;
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <UART_SetConfig+0x3a4>)
 80051c6:	61bb      	str	r3, [r7, #24]
        break;
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fd fbed 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80051ce:	61b8      	str	r0, [r7, #24]
        break;
 80051d0:	e008      	b.n	80051e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d6:	61bb      	str	r3, [r7, #24]
        break;
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	77bb      	strb	r3, [r7, #30]
        break;
 80051e2:	bf00      	nop
    }

    if (pclk != 0U)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d018      	beq.n	800521c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	085a      	lsrs	r2, r3, #1
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b0f      	cmp	r3, #15
 8005204:	d908      	bls.n	8005218 <UART_SetConfig+0x388>
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d204      	bcs.n	8005218 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	e001      	b.n	800521c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005228:	7fbb      	ldrb	r3, [r7, #30]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	007a1200 	.word	0x007a1200

08005238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01a      	beq.n	800534e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005336:	d10a      	bne.n	800534e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]
  }
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800538c:	f7fb ffba 	bl	8001304 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b08      	cmp	r3, #8
 800539e:	d10e      	bne.n	80053be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f82d 	bl	800540e <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e023      	b.n	8005406 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d10e      	bne.n	80053ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f817 	bl	800540e <UART_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e00d      	b.n	8005406 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541e:	e05e      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d05a      	beq.n	80054de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005428:	f7fb ff6c 	bl	8001304 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	429a      	cmp	r2, r3
 8005436:	d302      	bcc.n	800543e <UART_WaitOnFlagUntilTimeout+0x30>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d11b      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800544c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e043      	b.n	80054fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02c      	beq.n	80054de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005492:	d124      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e00f      	b.n	80054fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d091      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005518:	2b84      	cmp	r3, #132	; 0x84
 800551a:	d005      	beq.n	8005528 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800551c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	3303      	adds	r3, #3
 8005526:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005528:	68fb      	ldr	r3, [r7, #12]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553c:	f3ef 8305 	mrs	r3, IPSR
 8005540:	607b      	str	r3, [r7, #4]
  return(result);
 8005542:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800555e:	f001 fd25 	bl	8006fac <vTaskStartScheduler>
  
  return osOK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}

08005568 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556a:	b089      	sub	sp, #36	; 0x24
 800556c:	af04      	add	r7, sp, #16
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d020      	beq.n	80055bc <osThreadCreate+0x54>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01c      	beq.n	80055bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685c      	ldr	r4, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691e      	ldr	r6, [r3, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ffb6 	bl	8005506 <makeFreeRtosPriority>
 800559a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055a4:	9202      	str	r2, [sp, #8]
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	9100      	str	r1, [sp, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	4632      	mov	r2, r6
 80055ae:	4629      	mov	r1, r5
 80055b0:	4620      	mov	r0, r4
 80055b2:	f001 fb40 	bl	8006c36 <xTaskCreateStatic>
 80055b6:	4603      	mov	r3, r0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e01c      	b.n	80055f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685c      	ldr	r4, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055c8:	b29e      	uxth	r6, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff98 	bl	8005506 <makeFreeRtosPriority>
 80055d6:	4602      	mov	r2, r0
 80055d8:	f107 030c 	add.w	r3, r7, #12
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	9200      	str	r2, [sp, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	4632      	mov	r2, r6
 80055e4:	4629      	mov	r1, r5
 80055e6:	4620      	mov	r0, r4
 80055e8:	f001 fb7e 	bl	8006ce8 <xTaskCreate>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d001      	beq.n	80055f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e000      	b.n	80055f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005600 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <osDelay+0x16>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	e000      	b.n	8005618 <osDelay+0x18>
 8005616:	2301      	movs	r3, #1
 8005618:	4618      	mov	r0, r3
 800561a:	f001 fc93 	bl	8006f44 <vTaskDelay>
  
  return osOK;
 800561e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4619      	mov	r1, r3
 800563e:	2001      	movs	r0, #1
 8005640:	f000 fd3c 	bl	80060bc <xQueueCreateMutexStatic>
 8005644:	4603      	mov	r3, r0
 8005646:	e003      	b.n	8005650 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005648:	2001      	movs	r0, #1
 800564a:	f000 fd1f 	bl	800608c <xQueueCreateMutex>
 800564e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af02      	add	r7, sp, #8
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10b      	bne.n	8005688 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	2303      	movs	r3, #3
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	2200      	movs	r2, #0
 800567c:	2100      	movs	r1, #0
 800567e:	2001      	movs	r0, #1
 8005680:	f000 fc1c 	bl	8005ebc <xQueueGenericCreateStatic>
 8005684:	4603      	mov	r3, r0
 8005686:	e016      	b.n	80056b6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	e014      	b.n	80056b6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d110      	bne.n	80056b4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005692:	2203      	movs	r2, #3
 8005694:	2100      	movs	r1, #0
 8005696:	2001      	movs	r0, #1
 8005698:	f000 fc82 	bl	8005fa0 <xQueueGenericCreate>
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <osSemaphoreCreate+0x58>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fd22 	bl	80060f4 <xQueueGenericSend>
      return sema;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	e000      	b.n	80056b6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80056b4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	e03a      	b.n	800574e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d103      	bne.n	80056ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e009      	b.n	8005700 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d006      	beq.n	8005700 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <osSemaphoreWait+0x40>
      ticks = 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005700:	f7ff ff19 	bl	8005536 <inHandlerMode>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	461a      	mov	r2, r3
 8005710:	2100      	movs	r1, #0
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 f8ea 	bl	80068ec <xQueueReceiveFromISR>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <osSemaphoreWait+0x62>
      return osErrorOS;
 800571e:	23ff      	movs	r3, #255	; 0xff
 8005720:	e015      	b.n	800574e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d011      	beq.n	800574c <osSemaphoreWait+0x8c>
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <osSemaphoreWait+0x98>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	e008      	b.n	800574c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 ffcd 	bl	80066dc <xQueueSemaphoreTake>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005748:	23ff      	movs	r3, #255	; 0xff
 800574a:	e000      	b.n	800574e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800576c:	f7ff fee3 	bl	8005536 <inHandlerMode>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005776:	f107 0308 	add.w	r3, r7, #8
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fe47 	bl	8006410 <xQueueGiveFromISR>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005788:	23ff      	movs	r3, #255	; 0xff
 800578a:	e017      	b.n	80057bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <osSemaphoreRelease+0x5e>
 8005792:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <osSemaphoreRelease+0x68>)
 8005794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	e00a      	b.n	80057ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80057a4:	2300      	movs	r3, #0
 80057a6:	2200      	movs	r2, #0
 80057a8:	2100      	movs	r1, #0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fca2 	bl	80060f4 <xQueueGenericSend>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d001      	beq.n	80057ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80057b6:	23ff      	movs	r3, #255	; 0xff
 80057b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80057ba:	68fb      	ldr	r3, [r7, #12]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	3303      	adds	r3, #3
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80057dc:	2014      	movs	r0, #20
 80057de:	f002 fc67 	bl	80080b0 <pvPortMalloc>
 80057e2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d046      	beq.n	8005878 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f002 fc54 	bl	80080b0 <pvPortMalloc>
 8005808:	4602      	mov	r2, r0
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d02b      	beq.n	800586e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	4618      	mov	r0, r3
 8005822:	f002 fc45 	bl	80080b0 <pvPortMalloc>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d011      	beq.n	8005858 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005834:	2300      	movs	r3, #0
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	e008      	b.n	800584c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4413      	add	r3, r2
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	429a      	cmp	r2, r3
 8005854:	d3f1      	bcc.n	800583a <osPoolCreate+0x72>
 8005856:	e00f      	b.n	8005878 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	f002 fce9 	bl	8008234 <vPortFree>
        vPortFree(thePool);
 8005862:	6978      	ldr	r0, [r7, #20]
 8005864:	f002 fce6 	bl	8008234 <vPortFree>
        thePool = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e004      	b.n	8005878 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800586e:	6978      	ldr	r0, [r7, #20]
 8005870:	f002 fce0 	bl	8008234 <vPortFree>
      thePool = NULL;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8005878:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8005892:	f7ff fe50 	bl	8005536 <inHandlerMode>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00e      	beq.n	80058ba <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800589c:	f3ef 8211 	mrs	r2, BASEPRI
 80058a0:	f04f 0320 	mov.w	r3, #32
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	617a      	str	r2, [r7, #20]
 80058b2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058b4:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	e001      	b.n	80058be <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80058ba:	f002 fadf 	bl	8007e7c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e029      	b.n	8005918 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
 80058d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058d4:	fb02 f201 	mul.w	r2, r2, r1
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	4413      	add	r3, r2
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d113      	bne.n	8005912 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	4413      	add	r3, r2
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	fb02 f303 	mul.w	r3, r2, r3
 8005906:	440b      	add	r3, r1
 8005908:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	611a      	str	r2, [r3, #16]
      break;
 8005910:	e007      	b.n	8005922 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3d0      	bcc.n	80058c4 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8005922:	f7ff fe08 	bl	8005536 <inHandlerMode>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	e001      	b.n	800593c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8005938:	f002 face 	bl	8007ed8 <vPortExitCritical>
  }
  
  return p;
 800593c:	6a3b      	ldr	r3, [r7, #32]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <osPoolFree+0x14>
    return osErrorParameter;
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	e030      	b.n	80059bc <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <osPoolFree+0x1e>
    return osErrorParameter;
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	e02b      	b.n	80059bc <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d201      	bcs.n	8005972 <osPoolFree+0x2c>
    return osErrorParameter;
 800596e:	2380      	movs	r3, #128	; 0x80
 8005970:	e024      	b.n	80059bc <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	fbb3 f1f2 	udiv	r1, r3, r2
 8005986:	fb02 f201 	mul.w	r2, r2, r1
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <osPoolFree+0x4e>
    return osErrorParameter;
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	e013      	b.n	80059bc <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d301      	bcc.n	80059ae <osPoolFree+0x68>
    return osErrorParameter;
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	e006      	b.n	80059bc <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80059c8:	b590      	push	{r4, r7, lr}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d012      	beq.n	8005a00 <osMessageCreate+0x38>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68dc      	ldr	r4, [r3, #12]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4623      	mov	r3, r4
 80059f8:	f000 fa60 	bl	8005ebc <xQueueGenericCreateStatic>
 80059fc:	4603      	mov	r3, r0
 80059fe:	e008      	b.n	8005a12 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f000 fac8 	bl	8005fa0 <xQueueGenericCreate>
 8005a10:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd90      	pop	{r4, r7, pc}

08005a1a <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005a1a:	b590      	push	{r4, r7, lr}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689c      	ldr	r4, [r3, #8]
 8005a38:	200c      	movs	r0, #12
 8005a3a:	f002 fb39 	bl	80080b0 <pvPortMalloc>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <osMailCreate+0x36>
    return NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e038      	b.n	8005ac2 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	681c      	ldr	r4, [r3, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2104      	movs	r1, #4
 8005a68:	f000 fa9a 	bl	8005fa0 <xQueueGenericCreate>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fbd6 	bl	8008234 <vPortFree>
    return NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e01a      	b.n	8005ac2 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	681c      	ldr	r4, [r3, #0]
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fe96 	bl	80057c8 <osPoolCreate>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d107      	bne.n	8005abc <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f002 fbbe 	bl	8008234 <vPortFree>
    return NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e002      	b.n	8005ac2 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd90      	pop	{r4, r7, pc}

08005aca <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <osMailAlloc+0x14>
    return NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e006      	b.n	8005aec <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fecd 	bl	8005882 <osPoolAlloc>
 8005ae8:	60f8      	str	r0, [r7, #12]
  
  return p;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <osMailPut+0x14>
    return osErrorParameter;
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	e02c      	b.n	8005b62 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005b0c:	f7ff fd13 	bl	8005536 <inHandlerMode>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6858      	ldr	r0, [r3, #4]
 8005b1a:	f107 020c 	add.w	r2, r7, #12
 8005b1e:	4639      	mov	r1, r7
 8005b20:	2300      	movs	r3, #0
 8005b22:	f000 fbe1 	bl	80062e8 <xQueueGenericSendFromISR>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d001      	beq.n	8005b30 <osMailPut+0x3c>
      return osErrorOS;
 8005b2c:	23ff      	movs	r3, #255	; 0xff
 8005b2e:	e018      	b.n	8005b62 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d014      	beq.n	8005b60 <osMailPut+0x6c>
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <osMailPut+0x78>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	e00b      	b.n	8005b60 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6858      	ldr	r0, [r3, #4]
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2200      	movs	r2, #0
 8005b52:	f000 facf 	bl	80060f4 <xQueueGenericSend>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d001      	beq.n	8005b60 <osMailPut+0x6c>
      return osErrorOS;
 8005b5c:	23ff      	movs	r3, #255	; 0xff
 8005b5e:	e000      	b.n	8005b62 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b08b      	sub	sp, #44	; 0x2c
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	617b      	str	r3, [r7, #20]
    return event;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	461c      	mov	r4, r3
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b9a:	e056      	b.n	8005c4a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d103      	bne.n	8005bb4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	e009      	b.n	8005bc8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d006      	beq.n	8005bc8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <osMailGet+0x58>
      ticks = 1;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005bc8:	f7ff fcb5 	bl	8005536 <inHandlerMode>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01d      	beq.n	8005c0e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6858      	ldr	r0, [r3, #4]
 8005bd6:	f107 0220 	add.w	r2, r7, #32
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	f000 fe83 	bl	80068ec <xQueueReceiveFromISR>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d102      	bne.n	8005bf2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005bec:	2320      	movs	r3, #32
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e001      	b.n	8005bf6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01e      	beq.n	8005c3a <osMailGet+0xca>
 8005bfc:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <osMailGet+0xe4>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	e015      	b.n	8005c3a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6858      	ldr	r0, [r3, #4]
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	3304      	adds	r3, #4
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f000 fc82 	bl	8006524 <xQueueReceive>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8005c26:	2320      	movs	r3, #32
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e006      	b.n	8005c3a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <osMailGet+0xc6>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <osMailGet+0xc8>
 8005c36:	2340      	movs	r3, #64	; 0x40
 8005c38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	461c      	mov	r4, r3
 8005c3e:	f107 0314 	add.w	r3, r7, #20
 8005c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	372c      	adds	r7, #44	; 0x2c
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd90      	pop	{r4, r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <osMailFree+0x14>
    return osErrorParameter;
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	e006      	b.n	8005c7a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fe67 	bl	8005946 <osPoolFree>
 8005c78:	4603      	mov	r3, r0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f103 0208 	add.w	r2, r3, #8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f103 0208 	add.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f103 0208 	add.w	r2, r3, #8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d103      	bne.n	8005d44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e00c      	b.n	8005d5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3308      	adds	r3, #8
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e002      	b.n	8005d52 <vListInsert+0x2e>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d2f6      	bcs.n	8005d4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6892      	ldr	r2, [r2, #8]
 8005dac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6852      	ldr	r2, [r2, #4]
 8005db6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d103      	bne.n	8005dca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1e5a      	subs	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <xQueueGenericReset+0x28>
	__asm volatile
 8005e00:	f04f 0320 	mov.w	r3, #32
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	e7fe      	b.n	8005e12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005e14:	f002 f832 	bl	8007e7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	3b01      	subs	r3, #1
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	441a      	add	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	22ff      	movs	r2, #255	; 0xff
 8005e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	22ff      	movs	r2, #255	; 0xff
 8005e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d114      	bne.n	8005e94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01a      	beq.n	8005ea8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3310      	adds	r3, #16
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fada 	bl	8007430 <xTaskRemoveFromEventList>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <xQueueGenericReset+0xcc>)
 8005e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	e009      	b.n	8005ea8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3310      	adds	r3, #16
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fef2 	bl	8005c82 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff feed 	bl	8005c82 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ea8:	f002 f816 	bl	8007ed8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005eac:	2301      	movs	r3, #1
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08e      	sub	sp, #56	; 0x38
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <xQueueGenericCreateStatic+0x28>
 8005ed0:	f04f 0320 	mov.w	r3, #32
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	e7fe      	b.n	8005ee2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <xQueueGenericCreateStatic+0x42>
 8005eea:	f04f 0320 	mov.w	r3, #32
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <xQueueGenericCreateStatic+0x4e>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <xQueueGenericCreateStatic+0x52>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericCreateStatic+0x54>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <xQueueGenericCreateStatic+0x6c>
 8005f14:	f04f 0320 	mov.w	r3, #32
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
 8005f26:	e7fe      	b.n	8005f26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <xQueueGenericCreateStatic+0x78>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <xQueueGenericCreateStatic+0x7c>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <xQueueGenericCreateStatic+0x7e>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <xQueueGenericCreateStatic+0x96>
 8005f3e:	f04f 0320 	mov.w	r3, #32
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e7fe      	b.n	8005f50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f52:	2348      	movs	r3, #72	; 0x48
 8005f54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b48      	cmp	r3, #72	; 0x48
 8005f5a:	d009      	beq.n	8005f70 <xQueueGenericCreateStatic+0xb4>
 8005f5c:	f04f 0320 	mov.w	r3, #32
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e7fe      	b.n	8005f6e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f842 	bl	800601a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3730      	adds	r7, #48	; 0x30
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <xQueueGenericCreate+0x28>
 8005fb4:	f04f 0320 	mov.w	r3, #32
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	e004      	b.n	8005fde <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3348      	adds	r3, #72	; 0x48
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f002 f864 	bl	80080b0 <pvPortMalloc>
 8005fe8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00f      	beq.n	8006010 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	3348      	adds	r3, #72	; 0x48
 8005ff4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ffe:	79fa      	ldrb	r2, [r7, #7]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f805 	bl	800601a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006010:	69bb      	ldr	r3, [r7, #24]
	}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e002      	b.n	800603c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006048:	2101      	movs	r1, #1
 800604a:	69b8      	ldr	r0, [r7, #24]
 800604c:	f7ff fece 	bl	8005dec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006078:	2300      	movs	r3, #0
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f838 	bl	80060f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006096:	2301      	movs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6939      	ldr	r1, [r7, #16]
 80060a4:	6978      	ldr	r0, [r7, #20]
 80060a6:	f7ff ff7b 	bl	8005fa0 <xQueueGenericCreate>
 80060aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff ffd3 	bl	8006058 <prvInitialiseMutex>

		return pxNewQueue;
 80060b2:	68fb      	ldr	r3, [r7, #12]
	}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	4603      	mov	r3, r0
 80060c4:	6039      	str	r1, [r7, #0]
 80060c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	6939      	ldr	r1, [r7, #16]
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7ff feee 	bl	8005ebc <xQueueGenericCreateStatic>
 80060e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ffb8 	bl	8006058 <prvInitialiseMutex>

		return pxNewQueue;
 80060e8:	68fb      	ldr	r3, [r7, #12]
	}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08e      	sub	sp, #56	; 0x38
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006102:	2300      	movs	r3, #0
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <xQueueGenericSend+0x30>
 8006110:	f04f 0320 	mov.w	r3, #32
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
 8006122:	e7fe      	b.n	8006122 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <xQueueGenericSend+0x3e>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <xQueueGenericSend+0x42>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <xQueueGenericSend+0x44>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d109      	bne.n	8006150 <xQueueGenericSend+0x5c>
 800613c:	f04f 0320 	mov.w	r3, #32
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
 800614e:	e7fe      	b.n	800614e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d103      	bne.n	800615e <xQueueGenericSend+0x6a>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <xQueueGenericSend+0x6e>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <xQueueGenericSend+0x70>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <xQueueGenericSend+0x88>
 8006168:	f04f 0320 	mov.w	r3, #32
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	e7fe      	b.n	800617a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800617c:	f001 fb14 	bl	80077a8 <xTaskGetSchedulerState>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <xQueueGenericSend+0x98>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <xQueueGenericSend+0x9c>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <xQueueGenericSend+0x9e>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <xQueueGenericSend+0xb6>
 8006196:	f04f 0320 	mov.w	r3, #32
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	e7fe      	b.n	80061a8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061aa:	f001 fe67 	bl	8007e7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <xQueueGenericSend+0xcc>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d129      	bne.n	8006214 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061c6:	f000 fc26 	bl	8006a16 <prvCopyDataToQueue>
 80061ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d010      	beq.n	80061f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 f929 	bl	8007430 <xTaskRemoveFromEventList>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d013      	beq.n	800620c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061e4:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <xQueueGenericSend+0x1f0>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	e00a      	b.n	800620c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061fc:	4b39      	ldr	r3, [pc, #228]	; (80062e4 <xQueueGenericSend+0x1f0>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800620c:	f001 fe64 	bl	8007ed8 <vPortExitCritical>
				return pdPASS;
 8006210:	2301      	movs	r3, #1
 8006212:	e063      	b.n	80062dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800621a:	f001 fe5d 	bl	8007ed8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800621e:	2300      	movs	r3, #0
 8006220:	e05c      	b.n	80062dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006228:	f107 0314 	add.w	r3, r7, #20
 800622c:	4618      	mov	r0, r3
 800622e:	f001 f961 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006236:	f001 fe4f 	bl	8007ed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800623a:	f000 ff15 	bl	8007068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800623e:	f001 fe1d 	bl	8007e7c <vPortEnterCritical>
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006248:	b25b      	sxtb	r3, r3
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d103      	bne.n	8006258 <xQueueGenericSend+0x164>
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800625e:	b25b      	sxtb	r3, r3
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d103      	bne.n	800626e <xQueueGenericSend+0x17a>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800626e:	f001 fe33 	bl	8007ed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006272:	1d3a      	adds	r2, r7, #4
 8006274:	f107 0314 	add.w	r3, r7, #20
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f001 f950 	bl	8007520 <xTaskCheckForTimeOut>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d124      	bne.n	80062d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006288:	f000 fcbd 	bl	8006c06 <prvIsQueueFull>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d018      	beq.n	80062c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	3310      	adds	r3, #16
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f001 f8a4 	bl	80073e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a2:	f000 fc48 	bl	8006b36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062a6:	f000 feed 	bl	8007084 <xTaskResumeAll>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f47f af7c 	bne.w	80061aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <xQueueGenericSend+0x1f0>)
 80062b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	e772      	b.n	80061aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c6:	f000 fc36 	bl	8006b36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ca:	f000 fedb 	bl	8007084 <xTaskResumeAll>
 80062ce:	e76c      	b.n	80061aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d2:	f000 fc30 	bl	8006b36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062d6:	f000 fed5 	bl	8007084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062da:	2300      	movs	r3, #0
		}
	}
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3738      	adds	r7, #56	; 0x38
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	; 0x38
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <xQueueGenericSendFromISR+0x2c>
 8006300:	f04f 0320 	mov.w	r3, #32
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
 8006312:	e7fe      	b.n	8006312 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <xQueueGenericSendFromISR+0x3a>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <xQueueGenericSendFromISR+0x3e>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <xQueueGenericSendFromISR+0x40>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <xQueueGenericSendFromISR+0x58>
 800632c:	f04f 0320 	mov.w	r3, #32
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	e7fe      	b.n	800633e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d103      	bne.n	800634e <xQueueGenericSendFromISR+0x66>
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <xQueueGenericSendFromISR+0x6a>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <xQueueGenericSendFromISR+0x6c>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <xQueueGenericSendFromISR+0x84>
 8006358:	f04f 0320 	mov.w	r3, #32
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	e7fe      	b.n	800636a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800636c:	f001 fe62 	bl	8008034 <vPortValidateInterruptPriority>
	__asm volatile
 8006370:	f3ef 8211 	mrs	r2, BASEPRI
 8006374:	f04f 0320 	mov.w	r3, #32
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	61ba      	str	r2, [r7, #24]
 8006386:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006388:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006394:	429a      	cmp	r2, r3
 8006396:	d302      	bcc.n	800639e <xQueueGenericSendFromISR+0xb6>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d12c      	bne.n	80063f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ae:	f000 fb32 	bl	8006a16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d112      	bne.n	80063e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f831 	bl	8007430 <xTaskRemoveFromEventList>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00e      	beq.n	80063f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e007      	b.n	80063f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063e6:	3301      	adds	r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	b25a      	sxtb	r2, r3
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063f2:	2301      	movs	r3, #1
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80063f6:	e001      	b.n	80063fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006408:	4618      	mov	r0, r3
 800640a:	3738      	adds	r7, #56	; 0x38
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08e      	sub	sp, #56	; 0x38
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006424:	f04f 0320 	mov.w	r3, #32
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	e7fe      	b.n	8006436 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <xQueueGiveFromISR+0x44>
 8006440:	f04f 0320 	mov.w	r3, #32
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e7fe      	b.n	8006452 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <xQueueGiveFromISR+0x54>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <xQueueGiveFromISR+0x58>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <xQueueGiveFromISR+0x5a>
 8006468:	2300      	movs	r3, #0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <xQueueGiveFromISR+0x72>
 800646e:	f04f 0320 	mov.w	r3, #32
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e7fe      	b.n	8006480 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006482:	f001 fdd7 	bl	8008034 <vPortValidateInterruptPriority>
	__asm volatile
 8006486:	f3ef 8211 	mrs	r2, BASEPRI
 800648a:	f04f 0320 	mov.w	r3, #32
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	617a      	str	r2, [r7, #20]
 800649c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800649e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d22b      	bcs.n	800650a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d112      	bne.n	80064f4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	3324      	adds	r3, #36	; 0x24
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 ffa8 	bl	8007430 <xTaskRemoveFromEventList>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e007      	b.n	8006504 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f8:	3301      	adds	r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	b25a      	sxtb	r2, r3
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006504:	2301      	movs	r3, #1
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
 8006508:	e001      	b.n	800650e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800650a:	2300      	movs	r3, #0
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800651a:	4618      	mov	r0, r3
 800651c:	3738      	adds	r7, #56	; 0x38
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08c      	sub	sp, #48	; 0x30
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006530:	2300      	movs	r3, #0
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <xQueueReceive+0x2e>
	__asm volatile
 800653e:	f04f 0320 	mov.w	r3, #32
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	e7fe      	b.n	8006550 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <xQueueReceive+0x3c>
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <xQueueReceive+0x40>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <xQueueReceive+0x42>
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <xQueueReceive+0x5a>
 800656a:	f04f 0320 	mov.w	r3, #32
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e7fe      	b.n	800657c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657e:	f001 f913 	bl	80077a8 <xTaskGetSchedulerState>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <xQueueReceive+0x6a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <xQueueReceive+0x6e>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <xQueueReceive+0x70>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <xQueueReceive+0x88>
 8006598:	f04f 0320 	mov.w	r3, #32
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	e7fe      	b.n	80065aa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ac:	f001 fc66 	bl	8007e7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01f      	beq.n	80065fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c0:	f000 fa93 	bl	8006aea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	1e5a      	subs	r2, r3, #1
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	3310      	adds	r3, #16
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 ff29 	bl	8007430 <xTaskRemoveFromEventList>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065e4:	4b3c      	ldr	r3, [pc, #240]	; (80066d8 <xQueueReceive+0x1b4>)
 80065e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065f4:	f001 fc70 	bl	8007ed8 <vPortExitCritical>
				return pdPASS;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e069      	b.n	80066d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006602:	f001 fc69 	bl	8007ed8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006606:	2300      	movs	r3, #0
 8006608:	e062      	b.n	80066d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006610:	f107 0310 	add.w	r3, r7, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f000 ff6d 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800661e:	f001 fc5b 	bl	8007ed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006622:	f000 fd21 	bl	8007068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006626:	f001 fc29 	bl	8007e7c <vPortEnterCritical>
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006630:	b25b      	sxtb	r3, r3
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d103      	bne.n	8006640 <xQueueReceive+0x11c>
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006646:	b25b      	sxtb	r3, r3
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d103      	bne.n	8006656 <xQueueReceive+0x132>
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006656:	f001 fc3f 	bl	8007ed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800665a:	1d3a      	adds	r2, r7, #4
 800665c:	f107 0310 	add.w	r3, r7, #16
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f000 ff5c 	bl	8007520 <xTaskCheckForTimeOut>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d123      	bne.n	80066b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006670:	f000 fab3 	bl	8006bda <prvIsQueueEmpty>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d017      	beq.n	80066aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	3324      	adds	r3, #36	; 0x24
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f000 feb0 	bl	80073e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668a:	f000 fa54 	bl	8006b36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800668e:	f000 fcf9 	bl	8007084 <xTaskResumeAll>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d189      	bne.n	80065ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <xQueueReceive+0x1b4>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	e780      	b.n	80065ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f000 fa43 	bl	8006b36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b0:	f000 fce8 	bl	8007084 <xTaskResumeAll>
 80066b4:	e77a      	b.n	80065ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b8:	f000 fa3d 	bl	8006b36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066bc:	f000 fce2 	bl	8007084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c2:	f000 fa8a 	bl	8006bda <prvIsQueueEmpty>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f43f af6f 	beq.w	80065ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3730      	adds	r7, #48	; 0x30
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08e      	sub	sp, #56	; 0x38
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <xQueueSemaphoreTake+0x30>
 80066f8:	f04f 0320 	mov.w	r3, #32
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	623b      	str	r3, [r7, #32]
 800670a:	e7fe      	b.n	800670a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <xQueueSemaphoreTake+0x4c>
 8006714:	f04f 0320 	mov.w	r3, #32
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	e7fe      	b.n	8006726 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006728:	f001 f83e 	bl	80077a8 <xTaskGetSchedulerState>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <xQueueSemaphoreTake+0x5c>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <xQueueSemaphoreTake+0x60>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <xQueueSemaphoreTake+0x62>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <xQueueSemaphoreTake+0x7a>
 8006742:	f04f 0320 	mov.w	r3, #32
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e7fe      	b.n	8006754 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006756:	f001 fb91 	bl	8007e7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d024      	beq.n	80067b0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	1e5a      	subs	r2, r3, #1
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006776:	f001 f9dd 	bl	8007b34 <pvTaskIncrementMutexHeldCount>
 800677a:	4602      	mov	r2, r0
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00f      	beq.n	80067a8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	3310      	adds	r3, #16
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fe4f 	bl	8007430 <xTaskRemoveFromEventList>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006798:	4b53      	ldr	r3, [pc, #332]	; (80068e8 <xQueueSemaphoreTake+0x20c>)
 800679a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067a8:	f001 fb96 	bl	8007ed8 <vPortExitCritical>
				return pdPASS;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e096      	b.n	80068de <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d110      	bne.n	80067d8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <xQueueSemaphoreTake+0xf4>
 80067bc:	f04f 0320 	mov.w	r3, #32
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e7fe      	b.n	80067ce <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067d0:	f001 fb82 	bl	8007ed8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e082      	b.n	80068de <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067de:	f107 030c 	add.w	r3, r7, #12
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe86 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067ec:	f001 fb74 	bl	8007ed8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067f0:	f000 fc3a 	bl	8007068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067f4:	f001 fb42 	bl	8007e7c <vPortEnterCritical>
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fe:	b25b      	sxtb	r3, r3
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d103      	bne.n	800680e <xQueueSemaphoreTake+0x132>
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006814:	b25b      	sxtb	r3, r3
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d103      	bne.n	8006824 <xQueueSemaphoreTake+0x148>
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006824:	f001 fb58 	bl	8007ed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006828:	463a      	mov	r2, r7
 800682a:	f107 030c 	add.w	r3, r7, #12
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fe75 	bl	8007520 <xTaskCheckForTimeOut>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d132      	bne.n	80068a2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800683c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800683e:	f000 f9cc 	bl	8006bda <prvIsQueueEmpty>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d026      	beq.n	8006896 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006850:	f001 fb14 	bl	8007e7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 ffc3 	bl	80077e4 <xTaskPriorityInherit>
 800685e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006860:	f001 fb3a 	bl	8007ed8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	3324      	adds	r3, #36	; 0x24
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fdbb 	bl	80073e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006874:	f000 f95f 	bl	8006b36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006878:	f000 fc04 	bl	8007084 <xTaskResumeAll>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	f47f af69 	bne.w	8006756 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006884:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <xQueueSemaphoreTake+0x20c>)
 8006886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	e75f      	b.n	8006756 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006898:	f000 f94d 	bl	8006b36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800689c:	f000 fbf2 	bl	8007084 <xTaskResumeAll>
 80068a0:	e759      	b.n	8006756 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80068a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068a4:	f000 f947 	bl	8006b36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068a8:	f000 fbec 	bl	8007084 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068ae:	f000 f994 	bl	8006bda <prvIsQueueEmpty>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f43f af4e 	beq.w	8006756 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00d      	beq.n	80068dc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80068c0:	f001 fadc 	bl	8007e7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80068c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c6:	f000 f88e 	bl	80069e6 <prvGetDisinheritPriorityAfterTimeout>
 80068ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f890 	bl	80079f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068d8:	f001 fafe 	bl	8007ed8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3738      	adds	r7, #56	; 0x38
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08e      	sub	sp, #56	; 0x38
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <xQueueReceiveFromISR+0x2a>
 8006902:	f04f 0320 	mov.w	r3, #32
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	623b      	str	r3, [r7, #32]
 8006914:	e7fe      	b.n	8006914 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <xQueueReceiveFromISR+0x38>
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <xQueueReceiveFromISR+0x3c>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <xQueueReceiveFromISR+0x3e>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <xQueueReceiveFromISR+0x56>
 800692e:	f04f 0320 	mov.w	r3, #32
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e7fe      	b.n	8006940 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006942:	f001 fb77 	bl	8008034 <vPortValidateInterruptPriority>
	__asm volatile
 8006946:	f3ef 8211 	mrs	r2, BASEPRI
 800694a:	f04f 0320 	mov.w	r3, #32
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	61ba      	str	r2, [r7, #24]
 800695c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800695e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d02f      	beq.n	80069ce <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697c:	f000 f8b5 	bl	8006aea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	1e5a      	subs	r2, r3, #1
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d112      	bne.n	80069b8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d016      	beq.n	80069c8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	3310      	adds	r3, #16
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fd46 	bl	8007430 <xTaskRemoveFromEventList>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e007      	b.n	80069c8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80069b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069bc:	3301      	adds	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	b25a      	sxtb	r2, r3
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80069c8:	2301      	movs	r3, #1
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
 80069cc:	e001      	b.n	80069d2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3738      	adds	r7, #56	; 0x38
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80069e6:	b480      	push	{r7}
 80069e8:	b085      	sub	sp, #20
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1c3 0307 	rsb	r3, r3, #7
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e001      	b.n	8006a08 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a08:	68fb      	ldr	r3, [r7, #12]
	}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10d      	bne.n	8006a50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d14d      	bne.n	8006ad8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 ff55 	bl	80078f0 <xTaskPriorityDisinherit>
 8006a46:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	e043      	b.n	8006ad8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d119      	bne.n	8006a8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6898      	ldr	r0, [r3, #8]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	461a      	mov	r2, r3
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	f001 fd1f 	bl	80084a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	441a      	add	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d32b      	bcc.n	8006ad8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
 8006a88:	e026      	b.n	8006ad8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68d8      	ldr	r0, [r3, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	461a      	mov	r2, r3
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	f001 fd05 	bl	80084a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	425b      	negs	r3, r3
 8006aa4:	441a      	add	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d207      	bcs.n	8006ac6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	425b      	negs	r3, r3
 8006ac0:	441a      	add	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d105      	bne.n	8006ad8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ae0:	697b      	ldr	r3, [r7, #20]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d018      	beq.n	8006b2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	441a      	add	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d303      	bcc.n	8006b1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68d9      	ldr	r1, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	461a      	mov	r2, r3
 8006b28:	6838      	ldr	r0, [r7, #0]
 8006b2a:	f001 fcbb 	bl	80084a4 <memcpy>
	}
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b3e:	f001 f99d 	bl	8007e7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b4a:	e011      	b.n	8006b70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3324      	adds	r3, #36	; 0x24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fc69 	bl	8007430 <xTaskRemoveFromEventList>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b64:	f000 fd3c 	bl	80075e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dce9      	bgt.n	8006b4c <prvUnlockQueue+0x16>
 8006b78:	e000      	b.n	8006b7c <prvUnlockQueue+0x46>
					break;
 8006b7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b84:	f001 f9a8 	bl	8007ed8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b88:	f001 f978 	bl	8007e7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b94:	e011      	b.n	8006bba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d012      	beq.n	8006bc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3310      	adds	r3, #16
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fc44 	bl	8007430 <xTaskRemoveFromEventList>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bae:	f000 fd17 	bl	80075e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dce9      	bgt.n	8006b96 <prvUnlockQueue+0x60>
 8006bc2:	e000      	b.n	8006bc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	22ff      	movs	r2, #255	; 0xff
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006bce:	f001 f983 	bl	8007ed8 <vPortExitCritical>
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006be2:	f001 f94b 	bl	8007e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e001      	b.n	8006bf8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bf8:	f001 f96e 	bl	8007ed8 <vPortExitCritical>

	return xReturn;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c0e:	f001 f935 	bl	8007e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d102      	bne.n	8006c24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e001      	b.n	8006c28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c28:	f001 f956 	bl	8007ed8 <vPortExitCritical>

	return xReturn;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b08e      	sub	sp, #56	; 0x38
 8006c3a:	af04      	add	r7, sp, #16
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <xTaskCreateStatic+0x28>
	__asm volatile
 8006c4a:	f04f 0320 	mov.w	r3, #32
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	623b      	str	r3, [r7, #32]
 8006c5c:	e7fe      	b.n	8006c5c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d109      	bne.n	8006c78 <xTaskCreateStatic+0x42>
 8006c64:	f04f 0320 	mov.w	r3, #32
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	e7fe      	b.n	8006c76 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c78:	235c      	movs	r3, #92	; 0x5c
 8006c7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b5c      	cmp	r3, #92	; 0x5c
 8006c80:	d009      	beq.n	8006c96 <xTaskCreateStatic+0x60>
 8006c82:	f04f 0320 	mov.w	r3, #32
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	e7fe      	b.n	8006c94 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01e      	beq.n	8006cda <xTaskCreateStatic+0xa4>
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01b      	beq.n	8006cda <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9303      	str	r3, [sp, #12]
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	9302      	str	r3, [sp, #8]
 8006cbc:	f107 0314 	add.w	r3, r7, #20
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f850 	bl	8006d72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cd4:	f000 f8cc 	bl	8006e70 <prvAddNewTaskToReadyList>
 8006cd8:	e001      	b.n	8006cde <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cde:	697b      	ldr	r3, [r7, #20]
	}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3728      	adds	r7, #40	; 0x28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f9d7 	bl	80080b0 <pvPortMalloc>
 8006d02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00e      	beq.n	8006d28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006d0a:	205c      	movs	r0, #92	; 0x5c
 8006d0c:	f001 f9d0 	bl	80080b0 <pvPortMalloc>
 8006d10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1e:	e005      	b.n	8006d2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d20:	6978      	ldr	r0, [r7, #20]
 8006d22:	f001 fa87 	bl	8008234 <vPortFree>
 8006d26:	e001      	b.n	8006d2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d017      	beq.n	8006d62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9303      	str	r3, [sp, #12]
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	9302      	str	r3, [sp, #8]
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f80e 	bl	8006d72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d56:	69f8      	ldr	r0, [r7, #28]
 8006d58:	f000 f88a 	bl	8006e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	e002      	b.n	8006d68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295
 8006d66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d68:	69bb      	ldr	r3, [r7, #24]
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b088      	sub	sp, #32
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f023 0307 	bic.w	r3, r3, #7
 8006d98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <prvInitialiseNewTask+0x46>
 8006da4:	f04f 0320 	mov.w	r3, #32
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	e7fe      	b.n	8006db6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	e012      	b.n	8006de4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	7819      	ldrb	r1, [r3, #0]
 8006dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	3334      	adds	r3, #52	; 0x34
 8006dce:	460a      	mov	r2, r1
 8006dd0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b17      	cmp	r3, #23
 8006de8:	d9e9      	bls.n	8006dbe <prvInitialiseNewTask+0x4c>
 8006dea:	e000      	b.n	8006dee <prvInitialiseNewTask+0x7c>
		{
			break;
 8006dec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	d901      	bls.n	8006e00 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dfc:	2306      	movs	r3, #6
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	2200      	movs	r2, #0
 8006e10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	3304      	adds	r3, #4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe ff53 	bl	8005cc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	3318      	adds	r3, #24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe ff4e 	bl	8005cc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	f1c3 0207 	rsb	r2, r3, #7
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	2200      	movs	r2, #0
 8006e40:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	69b8      	ldr	r0, [r7, #24]
 8006e50:	f000 feea 	bl	8007c28 <pxPortInitialiseStack>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e66:	bf00      	nop
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e78:	f001 f800 	bl	8007e7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e7c:	4b2a      	ldr	r3, [pc, #168]	; (8006f28 <prvAddNewTaskToReadyList+0xb8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	4a29      	ldr	r2, [pc, #164]	; (8006f28 <prvAddNewTaskToReadyList+0xb8>)
 8006e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e86:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <prvAddNewTaskToReadyList+0xbc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e8e:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <prvAddNewTaskToReadyList+0xbc>)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e94:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <prvAddNewTaskToReadyList+0xb8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d110      	bne.n	8006ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e9c:	f000 fbc4 	bl	8007628 <prvInitialiseTaskLists>
 8006ea0:	e00d      	b.n	8006ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ea2:	4b23      	ldr	r3, [pc, #140]	; (8006f30 <prvAddNewTaskToReadyList+0xc0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eaa:	4b20      	ldr	r3, [pc, #128]	; (8006f2c <prvAddNewTaskToReadyList+0xbc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d802      	bhi.n	8006ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006eb8:	4a1c      	ldr	r2, [pc, #112]	; (8006f2c <prvAddNewTaskToReadyList+0xbc>)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ebe:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <prvAddNewTaskToReadyList+0xc4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <prvAddNewTaskToReadyList+0xc4>)
 8006ec6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	2201      	movs	r2, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <prvAddNewTaskToReadyList+0xc8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <prvAddNewTaskToReadyList+0xc8>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <prvAddNewTaskToReadyList+0xcc>)
 8006ee8:	441a      	add	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe fef3 	bl	8005cdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ef6:	f000 ffef 	bl	8007ed8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <prvAddNewTaskToReadyList+0xc0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <prvAddNewTaskToReadyList+0xbc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d207      	bcs.n	8006f20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <prvAddNewTaskToReadyList+0xd0>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000388 	.word	0x20000388
 8006f2c:	20000288 	.word	0x20000288
 8006f30:	20000394 	.word	0x20000394
 8006f34:	200003a4 	.word	0x200003a4
 8006f38:	20000390 	.word	0x20000390
 8006f3c:	2000028c 	.word	0x2000028c
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <vTaskDelay+0x60>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <vTaskDelay+0x2e>
 8006f5e:	f04f 0320 	mov.w	r3, #32
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	e7fe      	b.n	8006f70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006f72:	f000 f879 	bl	8007068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f76:	2100      	movs	r1, #0
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fdef 	bl	8007b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f7e:	f000 f881 	bl	8007084 <xTaskResumeAll>
 8006f82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d107      	bne.n	8006f9a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <vTaskDelay+0x64>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200003b0 	.word	0x200003b0
 8006fa8:	e000ed04 	.word	0xe000ed04

08006fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fba:	463a      	mov	r2, r7
 8006fbc:	1d39      	adds	r1, r7, #4
 8006fbe:	f107 0308 	add.w	r3, r7, #8
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7f9 f90c 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	9202      	str	r2, [sp, #8]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	460a      	mov	r2, r1
 8006fda:	491d      	ldr	r1, [pc, #116]	; (8007050 <vTaskStartScheduler+0xa4>)
 8006fdc:	481d      	ldr	r0, [pc, #116]	; (8007054 <vTaskStartScheduler+0xa8>)
 8006fde:	f7ff fe2a 	bl	8006c36 <xTaskCreateStatic>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <vTaskStartScheduler+0xac>)
 8006fe6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <vTaskStartScheduler+0xac>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e001      	b.n	8006ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d115      	bne.n	800702c <vTaskStartScheduler+0x80>
 8007000:	f04f 0320 	mov.w	r3, #32
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <vTaskStartScheduler+0xb0>)
 8007014:	f04f 32ff 	mov.w	r2, #4294967295
 8007018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <vTaskStartScheduler+0xb4>)
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007020:	4b10      	ldr	r3, [pc, #64]	; (8007064 <vTaskStartScheduler+0xb8>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007026:	f000 fe8b 	bl	8007d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800702a:	e00d      	b.n	8007048 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d109      	bne.n	8007048 <vTaskStartScheduler+0x9c>
 8007034:	f04f 0320 	mov.w	r3, #32
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	e7fe      	b.n	8007046 <vTaskStartScheduler+0x9a>
}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	080085c0 	.word	0x080085c0
 8007054:	080075f9 	.word	0x080075f9
 8007058:	200003ac 	.word	0x200003ac
 800705c:	200003a8 	.word	0x200003a8
 8007060:	20000394 	.word	0x20000394
 8007064:	2000038c 	.word	0x2000038c

08007068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <vTaskSuspendAll+0x18>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	4a03      	ldr	r2, [pc, #12]	; (8007080 <vTaskSuspendAll+0x18>)
 8007074:	6013      	str	r3, [r2, #0]
}
 8007076:	bf00      	nop
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	200003b0 	.word	0x200003b0

08007084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007092:	4b41      	ldr	r3, [pc, #260]	; (8007198 <xTaskResumeAll+0x114>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <xTaskResumeAll+0x2a>
 800709a:	f04f 0320 	mov.w	r3, #32
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	e7fe      	b.n	80070ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070ae:	f000 fee5 	bl	8007e7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070b2:	4b39      	ldr	r3, [pc, #228]	; (8007198 <xTaskResumeAll+0x114>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4a37      	ldr	r2, [pc, #220]	; (8007198 <xTaskResumeAll+0x114>)
 80070ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070bc:	4b36      	ldr	r3, [pc, #216]	; (8007198 <xTaskResumeAll+0x114>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d161      	bne.n	8007188 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070c4:	4b35      	ldr	r3, [pc, #212]	; (800719c <xTaskResumeAll+0x118>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d05d      	beq.n	8007188 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070cc:	e02e      	b.n	800712c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070ce:	4b34      	ldr	r3, [pc, #208]	; (80071a0 <xTaskResumeAll+0x11c>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3318      	adds	r3, #24
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fe5b 	bl	8005d96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fe56 	bl	8005d96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	2201      	movs	r2, #1
 80070f0:	409a      	lsls	r2, r3
 80070f2:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <xTaskResumeAll+0x120>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	4a2a      	ldr	r2, [pc, #168]	; (80071a4 <xTaskResumeAll+0x120>)
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <xTaskResumeAll+0x124>)
 800710a:	441a      	add	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3304      	adds	r3, #4
 8007110:	4619      	mov	r1, r3
 8007112:	4610      	mov	r0, r2
 8007114:	f7fe fde2 	bl	8005cdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	4b23      	ldr	r3, [pc, #140]	; (80071ac <xTaskResumeAll+0x128>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007126:	4b22      	ldr	r3, [pc, #136]	; (80071b0 <xTaskResumeAll+0x12c>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800712c:	4b1c      	ldr	r3, [pc, #112]	; (80071a0 <xTaskResumeAll+0x11c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1cc      	bne.n	80070ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800713a:	f000 fb0f 	bl	800775c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800713e:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <xTaskResumeAll+0x130>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d010      	beq.n	800716c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800714a:	f000 f837 	bl	80071bc <xTaskIncrementTick>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <xTaskResumeAll+0x12c>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3b01      	subs	r3, #1
 800715e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f1      	bne.n	800714a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <xTaskResumeAll+0x130>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800716c:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <xTaskResumeAll+0x12c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d009      	beq.n	8007188 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007178:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <xTaskResumeAll+0x134>)
 800717a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007188:	f000 fea6 	bl	8007ed8 <vPortExitCritical>

	return xAlreadyYielded;
 800718c:	68bb      	ldr	r3, [r7, #8]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	200003b0 	.word	0x200003b0
 800719c:	20000388 	.word	0x20000388
 80071a0:	20000348 	.word	0x20000348
 80071a4:	20000390 	.word	0x20000390
 80071a8:	2000028c 	.word	0x2000028c
 80071ac:	20000288 	.word	0x20000288
 80071b0:	2000039c 	.word	0x2000039c
 80071b4:	20000398 	.word	0x20000398
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c6:	4b50      	ldr	r3, [pc, #320]	; (8007308 <xTaskIncrementTick+0x14c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 808c 	bne.w	80072e8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071d0:	4b4e      	ldr	r3, [pc, #312]	; (800730c <xTaskIncrementTick+0x150>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071d8:	4a4c      	ldr	r2, [pc, #304]	; (800730c <xTaskIncrementTick+0x150>)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11f      	bne.n	8007224 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80071e4:	4b4a      	ldr	r3, [pc, #296]	; (8007310 <xTaskIncrementTick+0x154>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <xTaskIncrementTick+0x46>
 80071ee:	f04f 0320 	mov.w	r3, #32
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	e7fe      	b.n	8007200 <xTaskIncrementTick+0x44>
 8007202:	4b43      	ldr	r3, [pc, #268]	; (8007310 <xTaskIncrementTick+0x154>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	4b42      	ldr	r3, [pc, #264]	; (8007314 <xTaskIncrementTick+0x158>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a40      	ldr	r2, [pc, #256]	; (8007310 <xTaskIncrementTick+0x154>)
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4a40      	ldr	r2, [pc, #256]	; (8007314 <xTaskIncrementTick+0x158>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b40      	ldr	r3, [pc, #256]	; (8007318 <xTaskIncrementTick+0x15c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a3e      	ldr	r2, [pc, #248]	; (8007318 <xTaskIncrementTick+0x15c>)
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	f000 fa9c 	bl	800775c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007224:	4b3d      	ldr	r3, [pc, #244]	; (800731c <xTaskIncrementTick+0x160>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d34d      	bcc.n	80072ca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722e:	4b38      	ldr	r3, [pc, #224]	; (8007310 <xTaskIncrementTick+0x154>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <xTaskIncrementTick+0x80>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <xTaskIncrementTick+0x82>
 800723c:	2300      	movs	r3, #0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007242:	4b36      	ldr	r3, [pc, #216]	; (800731c <xTaskIncrementTick+0x160>)
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	601a      	str	r2, [r3, #0]
					break;
 800724a:	e03e      	b.n	80072ca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800724c:	4b30      	ldr	r3, [pc, #192]	; (8007310 <xTaskIncrementTick+0x154>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d203      	bcs.n	800726c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007264:	4a2d      	ldr	r2, [pc, #180]	; (800731c <xTaskIncrementTick+0x160>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
						break;
 800726a:	e02e      	b.n	80072ca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fd90 	bl	8005d96 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3318      	adds	r3, #24
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fd87 	bl	8005d96 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	4b23      	ldr	r3, [pc, #140]	; (8007320 <xTaskIncrementTick+0x164>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4313      	orrs	r3, r2
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <xTaskIncrementTick+0x164>)
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <xTaskIncrementTick+0x168>)
 80072a8:	441a      	add	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7fe fd13 	bl	8005cdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <xTaskIncrementTick+0x16c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d3b4      	bcc.n	800722e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c8:	e7b1      	b.n	800722e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <xTaskIncrementTick+0x16c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4914      	ldr	r1, [pc, #80]	; (8007324 <xTaskIncrementTick+0x168>)
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d907      	bls.n	80072f2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e004      	b.n	80072f2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072e8:	4b10      	ldr	r3, [pc, #64]	; (800732c <xTaskIncrementTick+0x170>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	4a0f      	ldr	r2, [pc, #60]	; (800732c <xTaskIncrementTick+0x170>)
 80072f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <xTaskIncrementTick+0x174>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072fe:	697b      	ldr	r3, [r7, #20]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200003b0 	.word	0x200003b0
 800730c:	2000038c 	.word	0x2000038c
 8007310:	20000340 	.word	0x20000340
 8007314:	20000344 	.word	0x20000344
 8007318:	200003a0 	.word	0x200003a0
 800731c:	200003a8 	.word	0x200003a8
 8007320:	20000390 	.word	0x20000390
 8007324:	2000028c 	.word	0x2000028c
 8007328:	20000288 	.word	0x20000288
 800732c:	20000398 	.word	0x20000398
 8007330:	2000039c 	.word	0x2000039c

08007334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800733a:	4b26      	ldr	r3, [pc, #152]	; (80073d4 <vTaskSwitchContext+0xa0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007342:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <vTaskSwitchContext+0xa4>)
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007348:	e03e      	b.n	80073c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <vTaskSwitchContext+0xa4>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007350:	4b22      	ldr	r3, [pc, #136]	; (80073dc <vTaskSwitchContext+0xa8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	fab3 f383 	clz	r3, r3
 800735c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	f1c3 031f 	rsb	r3, r3, #31
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	491e      	ldr	r1, [pc, #120]	; (80073e0 <vTaskSwitchContext+0xac>)
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <vTaskSwitchContext+0x5a>
	__asm volatile
 800737a:	f04f 0320 	mov.w	r3, #32
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	607b      	str	r3, [r7, #4]
 800738c:	e7fe      	b.n	800738c <vTaskSwitchContext+0x58>
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <vTaskSwitchContext+0xac>)
 800739a:	4413      	add	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	3308      	adds	r3, #8
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d104      	bne.n	80073be <vTaskSwitchContext+0x8a>
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4a07      	ldr	r2, [pc, #28]	; (80073e4 <vTaskSwitchContext+0xb0>)
 80073c6:	6013      	str	r3, [r2, #0]
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	200003b0 	.word	0x200003b0
 80073d8:	2000039c 	.word	0x2000039c
 80073dc:	20000390 	.word	0x20000390
 80073e0:	2000028c 	.word	0x2000028c
 80073e4:	20000288 	.word	0x20000288

080073e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <vTaskPlaceOnEventList+0x24>
 80073f8:	f04f 0320 	mov.w	r3, #32
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e7fe      	b.n	800740a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <vTaskPlaceOnEventList+0x44>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3318      	adds	r3, #24
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fe fc85 	bl	8005d24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800741a:	2101      	movs	r1, #1
 800741c:	6838      	ldr	r0, [r7, #0]
 800741e:	f000 fb9d 	bl	8007b5c <prvAddCurrentTaskToDelayedList>
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000288 	.word	0x20000288

08007430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <xTaskRemoveFromEventList+0x2a>
 8007446:	f04f 0320 	mov.w	r3, #32
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	e7fe      	b.n	8007458 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3318      	adds	r3, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fc99 	bl	8005d96 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <xTaskRemoveFromEventList+0xac>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d11c      	bne.n	80074a6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	3304      	adds	r3, #4
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fc90 	bl	8005d96 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	2201      	movs	r2, #1
 800747c:	409a      	lsls	r2, r3
 800747e:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <xTaskRemoveFromEventList+0xb0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <xTaskRemoveFromEventList+0xb0>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4a13      	ldr	r2, [pc, #76]	; (80074e4 <xTaskRemoveFromEventList+0xb4>)
 8007496:	441a      	add	r2, r3
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fe fc1c 	bl	8005cdc <vListInsertEnd>
 80074a4:	e005      	b.n	80074b2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	3318      	adds	r3, #24
 80074aa:	4619      	mov	r1, r3
 80074ac:	480e      	ldr	r0, [pc, #56]	; (80074e8 <xTaskRemoveFromEventList+0xb8>)
 80074ae:	f7fe fc15 	bl	8005cdc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <xTaskRemoveFromEventList+0xbc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d905      	bls.n	80074cc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <xTaskRemoveFromEventList+0xc0>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e001      	b.n	80074d0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80074d0:	697b      	ldr	r3, [r7, #20]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200003b0 	.word	0x200003b0
 80074e0:	20000390 	.word	0x20000390
 80074e4:	2000028c 	.word	0x2000028c
 80074e8:	20000348 	.word	0x20000348
 80074ec:	20000288 	.word	0x20000288
 80074f0:	2000039c 	.word	0x2000039c

080074f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <vTaskInternalSetTimeOutState+0x24>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <vTaskInternalSetTimeOutState+0x28>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	200003a0 	.word	0x200003a0
 800751c:	2000038c 	.word	0x2000038c

08007520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <xTaskCheckForTimeOut+0x24>
 8007530:	f04f 0320 	mov.w	r3, #32
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	e7fe      	b.n	8007542 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <xTaskCheckForTimeOut+0x3e>
 800754a:	f04f 0320 	mov.w	r3, #32
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e7fe      	b.n	800755c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800755e:	f000 fc8d 	bl	8007e7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007562:	4b1d      	ldr	r3, [pc, #116]	; (80075d8 <xTaskCheckForTimeOut+0xb8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d102      	bne.n	8007582 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800757c:	2300      	movs	r3, #0
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	e023      	b.n	80075ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b15      	ldr	r3, [pc, #84]	; (80075dc <xTaskCheckForTimeOut+0xbc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d007      	beq.n	800759e <xTaskCheckForTimeOut+0x7e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	e015      	b.n	80075ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d20b      	bcs.n	80075c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ff9d 	bl	80074f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	e004      	b.n	80075ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075c6:	2301      	movs	r3, #1
 80075c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075ca:	f000 fc85 	bl	8007ed8 <vPortExitCritical>

	return xReturn;
 80075ce:	69fb      	ldr	r3, [r7, #28]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3720      	adds	r7, #32
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	2000038c 	.word	0x2000038c
 80075dc:	200003a0 	.word	0x200003a0

080075e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075e4:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <vTaskMissedYield+0x14>)
 80075e6:	2201      	movs	r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	2000039c 	.word	0x2000039c

080075f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007600:	f000 f852 	bl	80076a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007604:	4b06      	ldr	r3, [pc, #24]	; (8007620 <prvIdleTask+0x28>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d9f9      	bls.n	8007600 <prvIdleTask+0x8>
			{
				taskYIELD();
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <prvIdleTask+0x2c>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800761c:	e7f0      	b.n	8007600 <prvIdleTask+0x8>
 800761e:	bf00      	nop
 8007620:	2000028c 	.word	0x2000028c
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
 8007632:	e00c      	b.n	800764e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4a12      	ldr	r2, [pc, #72]	; (8007688 <prvInitialiseTaskLists+0x60>)
 8007640:	4413      	add	r3, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fb1d 	bl	8005c82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3301      	adds	r3, #1
 800764c:	607b      	str	r3, [r7, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b06      	cmp	r3, #6
 8007652:	d9ef      	bls.n	8007634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007654:	480d      	ldr	r0, [pc, #52]	; (800768c <prvInitialiseTaskLists+0x64>)
 8007656:	f7fe fb14 	bl	8005c82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800765a:	480d      	ldr	r0, [pc, #52]	; (8007690 <prvInitialiseTaskLists+0x68>)
 800765c:	f7fe fb11 	bl	8005c82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007660:	480c      	ldr	r0, [pc, #48]	; (8007694 <prvInitialiseTaskLists+0x6c>)
 8007662:	f7fe fb0e 	bl	8005c82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007666:	480c      	ldr	r0, [pc, #48]	; (8007698 <prvInitialiseTaskLists+0x70>)
 8007668:	f7fe fb0b 	bl	8005c82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800766c:	480b      	ldr	r0, [pc, #44]	; (800769c <prvInitialiseTaskLists+0x74>)
 800766e:	f7fe fb08 	bl	8005c82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007672:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <prvInitialiseTaskLists+0x78>)
 8007674:	4a05      	ldr	r2, [pc, #20]	; (800768c <prvInitialiseTaskLists+0x64>)
 8007676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <prvInitialiseTaskLists+0x7c>)
 800767a:	4a05      	ldr	r2, [pc, #20]	; (8007690 <prvInitialiseTaskLists+0x68>)
 800767c:	601a      	str	r2, [r3, #0]
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	2000028c 	.word	0x2000028c
 800768c:	20000318 	.word	0x20000318
 8007690:	2000032c 	.word	0x2000032c
 8007694:	20000348 	.word	0x20000348
 8007698:	2000035c 	.word	0x2000035c
 800769c:	20000374 	.word	0x20000374
 80076a0:	20000340 	.word	0x20000340
 80076a4:	20000344 	.word	0x20000344

080076a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076ae:	e019      	b.n	80076e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076b0:	f000 fbe4 	bl	8007e7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <prvCheckTasksWaitingTermination+0x4c>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fb68 	bl	8005d96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076c6:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <prvCheckTasksWaitingTermination+0x50>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	4a0a      	ldr	r2, [pc, #40]	; (80076f8 <prvCheckTasksWaitingTermination+0x50>)
 80076ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <prvCheckTasksWaitingTermination+0x54>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	4a09      	ldr	r2, [pc, #36]	; (80076fc <prvCheckTasksWaitingTermination+0x54>)
 80076d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076da:	f000 fbfd 	bl	8007ed8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f80e 	bl	8007700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <prvCheckTasksWaitingTermination+0x54>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e1      	bne.n	80076b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	2000035c 	.word	0x2000035c
 80076f8:	20000388 	.word	0x20000388
 80076fc:	20000370 	.word	0x20000370

08007700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fd8c 	bl	8008234 <vPortFree>
				vPortFree( pxTCB );
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fd89 	bl	8008234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007722:	e017      	b.n	8007754 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800772a:	2b01      	cmp	r3, #1
 800772c:	d103      	bne.n	8007736 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fd80 	bl	8008234 <vPortFree>
	}
 8007734:	e00e      	b.n	8007754 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800773c:	2b02      	cmp	r3, #2
 800773e:	d009      	beq.n	8007754 <prvDeleteTCB+0x54>
 8007740:	f04f 0320 	mov.w	r3, #32
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e7fe      	b.n	8007752 <prvDeleteTCB+0x52>
	}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <prvResetNextTaskUnblockTime+0x44>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <prvResetNextTaskUnblockTime+0x14>
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <prvResetNextTaskUnblockTime+0x16>
 8007770:	2300      	movs	r3, #0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <prvResetNextTaskUnblockTime+0x48>)
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800777e:	e008      	b.n	8007792 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <prvResetNextTaskUnblockTime+0x44>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	4a05      	ldr	r2, [pc, #20]	; (80077a4 <prvResetNextTaskUnblockTime+0x48>)
 8007790:	6013      	str	r3, [r2, #0]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000340 	.word	0x20000340
 80077a4:	200003a8 	.word	0x200003a8

080077a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077ae:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <xTaskGetSchedulerState+0x34>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077b6:	2301      	movs	r3, #1
 80077b8:	607b      	str	r3, [r7, #4]
 80077ba:	e008      	b.n	80077ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077bc:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <xTaskGetSchedulerState+0x38>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077c4:	2302      	movs	r3, #2
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	e001      	b.n	80077ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077ca:	2300      	movs	r3, #0
 80077cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077ce:	687b      	ldr	r3, [r7, #4]
	}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	20000394 	.word	0x20000394
 80077e0:	200003b0 	.word	0x200003b0

080077e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d06e      	beq.n	80078d8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fe:	4b39      	ldr	r3, [pc, #228]	; (80078e4 <xTaskPriorityInherit+0x100>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	429a      	cmp	r2, r3
 8007806:	d25e      	bcs.n	80078c6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	db06      	blt.n	800781e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007810:	4b34      	ldr	r3, [pc, #208]	; (80078e4 <xTaskPriorityInherit+0x100>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	f1c3 0207 	rsb	r2, r3, #7
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6959      	ldr	r1, [r3, #20]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a2e      	ldr	r2, [pc, #184]	; (80078e8 <xTaskPriorityInherit+0x104>)
 8007830:	4413      	add	r3, r2
 8007832:	4299      	cmp	r1, r3
 8007834:	d101      	bne.n	800783a <xTaskPriorityInherit+0x56>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <xTaskPriorityInherit+0x58>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d03a      	beq.n	80078b6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3304      	adds	r3, #4
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe faa6 	bl	8005d96 <uxListRemove>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d115      	bne.n	800787c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007854:	4924      	ldr	r1, [pc, #144]	; (80078e8 <xTaskPriorityInherit+0x104>)
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <xTaskPriorityInherit+0x98>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	2201      	movs	r2, #1
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	43da      	mvns	r2, r3
 8007872:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <xTaskPriorityInherit+0x108>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4013      	ands	r3, r2
 8007878:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <xTaskPriorityInherit+0x108>)
 800787a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800787c:	4b19      	ldr	r3, [pc, #100]	; (80078e4 <xTaskPriorityInherit+0x100>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	2201      	movs	r2, #1
 800788c:	409a      	lsls	r2, r3
 800788e:	4b17      	ldr	r3, [pc, #92]	; (80078ec <xTaskPriorityInherit+0x108>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4313      	orrs	r3, r2
 8007894:	4a15      	ldr	r2, [pc, #84]	; (80078ec <xTaskPriorityInherit+0x108>)
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4a10      	ldr	r2, [pc, #64]	; (80078e8 <xTaskPriorityInherit+0x104>)
 80078a6:	441a      	add	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fa14 	bl	8005cdc <vListInsertEnd>
 80078b4:	e004      	b.n	80078c0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <xTaskPriorityInherit+0x100>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e008      	b.n	80078d8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <xTaskPriorityInherit+0x100>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d201      	bcs.n	80078d8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078d8:	68fb      	ldr	r3, [r7, #12]
	}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000288 	.word	0x20000288
 80078e8:	2000028c 	.word	0x2000028c
 80078ec:	20000390 	.word	0x20000390

080078f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d06c      	beq.n	80079e0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007906:	4b39      	ldr	r3, [pc, #228]	; (80079ec <xTaskPriorityDisinherit+0xfc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	d009      	beq.n	8007924 <xTaskPriorityDisinherit+0x34>
 8007910:	f04f 0320 	mov.w	r3, #32
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	e7fe      	b.n	8007922 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <xTaskPriorityDisinherit+0x50>
 800792c:	f04f 0320 	mov.w	r3, #32
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60bb      	str	r3, [r7, #8]
 800793e:	e7fe      	b.n	800793e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007944:	1e5a      	subs	r2, r3, #1
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	429a      	cmp	r2, r3
 8007954:	d044      	beq.n	80079e0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795a:	2b00      	cmp	r3, #0
 800795c:	d140      	bne.n	80079e0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fa17 	bl	8005d96 <uxListRemove>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d115      	bne.n	800799a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	491f      	ldr	r1, [pc, #124]	; (80079f0 <xTaskPriorityDisinherit+0x100>)
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <xTaskPriorityDisinherit+0xaa>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43da      	mvns	r2, r3
 8007990:	4b18      	ldr	r3, [pc, #96]	; (80079f4 <xTaskPriorityDisinherit+0x104>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4013      	ands	r3, r2
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <xTaskPriorityDisinherit+0x104>)
 8007998:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	f1c3 0207 	rsb	r2, r3, #7
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	2201      	movs	r2, #1
 80079b4:	409a      	lsls	r2, r3
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <xTaskPriorityDisinherit+0x104>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <xTaskPriorityDisinherit+0x104>)
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <xTaskPriorityDisinherit+0x100>)
 80079ce:	441a      	add	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7fe f980 	bl	8005cdc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e0:	697b      	ldr	r3, [r7, #20]
	}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000288 	.word	0x20000288
 80079f0:	2000028c 	.word	0x2000028c
 80079f4:	20000390 	.word	0x20000390

080079f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 8086 	beq.w	8007b1e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007a1a:	f04f 0320 	mov.w	r3, #32
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e7fe      	b.n	8007a2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d902      	bls.n	8007a3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e002      	b.n	8007a44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	69fa      	ldr	r2, [r7, #28]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d067      	beq.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d162      	bne.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a58:	4b33      	ldr	r3, [pc, #204]	; (8007b28 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d109      	bne.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007a62:	f04f 0320 	mov.w	r3, #32
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60bb      	str	r3, [r7, #8]
 8007a74:	e7fe      	b.n	8007a74 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	db04      	blt.n	8007a94 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	f1c3 0207 	rsb	r2, r3, #7
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	6959      	ldr	r1, [r3, #20]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4a22      	ldr	r2, [pc, #136]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007aa4:	4413      	add	r3, r2
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	d101      	bne.n	8007aae <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d034      	beq.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe f96c 	bl	8005d96 <uxListRemove>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d115      	bne.n	8007af0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac8:	4918      	ldr	r1, [pc, #96]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	2201      	movs	r2, #1
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	43da      	mvns	r2, r3
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4013      	ands	r3, r2
 8007aec:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007aee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	2201      	movs	r2, #1
 8007af6:	409a      	lsls	r2, r3
 8007af8:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	4a0c      	ldr	r2, [pc, #48]	; (8007b30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a07      	ldr	r2, [pc, #28]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007b10:	441a      	add	r2, r3
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe f8df 	bl	8005cdc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b1e:	bf00      	nop
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000288 	.word	0x20000288
 8007b2c:	2000028c 	.word	0x2000028c
 8007b30:	20000390 	.word	0x20000390

08007b34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b38:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b46:	3201      	adds	r2, #1
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b4a:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
	}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000288 	.word	0x20000288

08007b5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b66:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6c:	4b28      	ldr	r3, [pc, #160]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe f90f 	bl	8005d96 <uxListRemove>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	2201      	movs	r2, #1
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	43da      	mvns	r2, r3
 8007b8c:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4013      	ands	r3, r2
 8007b92:	4a20      	ldr	r2, [pc, #128]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d10a      	bne.n	8007bb4 <prvAddCurrentTaskToDelayedList+0x58>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4619      	mov	r1, r3
 8007bac:	481a      	ldr	r0, [pc, #104]	; (8007c18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007bae:	f7fe f895 	bl	8005cdc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bb2:	e026      	b.n	8007c02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4413      	add	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bbc:	4b14      	ldr	r3, [pc, #80]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d209      	bcs.n	8007be0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4610      	mov	r0, r2
 8007bda:	f7fe f8a3 	bl	8005d24 <vListInsert>
}
 8007bde:	e010      	b.n	8007c02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be0:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f7fe f899 	bl	8005d24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d202      	bcs.n	8007c02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	6013      	str	r3, [r2, #0]
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000038c 	.word	0x2000038c
 8007c10:	20000288 	.word	0x20000288
 8007c14:	20000390 	.word	0x20000390
 8007c18:	20000374 	.word	0x20000374
 8007c1c:	20000344 	.word	0x20000344
 8007c20:	20000340 	.word	0x20000340
 8007c24:	200003a8 	.word	0x200003a8

08007c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3b04      	subs	r3, #4
 8007c38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3b04      	subs	r3, #4
 8007c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f023 0201 	bic.w	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3b04      	subs	r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c58:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <pxPortInitialiseStack+0x64>)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3b14      	subs	r3, #20
 8007c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f06f 0202 	mvn.w	r2, #2
 8007c76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3b20      	subs	r3, #32
 8007c7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	08007c91 	.word	0x08007c91

08007c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c9a:	4b11      	ldr	r3, [pc, #68]	; (8007ce0 <prvTaskExitError+0x50>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d009      	beq.n	8007cb8 <prvTaskExitError+0x28>
 8007ca4:	f04f 0320 	mov.w	r3, #32
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	e7fe      	b.n	8007cb6 <prvTaskExitError+0x26>
 8007cb8:	f04f 0320 	mov.w	r3, #32
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cca:	bf00      	nop
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0fc      	beq.n	8007ccc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2000000c 	.word	0x2000000c
	...

08007cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <pxCurrentTCBConst2>)
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	f380 8809 	msr	PSP, r0
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	4770      	bx	lr
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst2>:
 8007d10:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d18:	4808      	ldr	r0, [pc, #32]	; (8007d3c <prvPortStartFirstTask+0x24>)
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f380 8808 	msr	MSP, r0
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8814 	msr	CONTROL, r0
 8007d2a:	b662      	cpsie	i
 8007d2c:	b661      	cpsie	f
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	df00      	svc	0
 8007d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d3a:	bf00      	nop
 8007d3c:	e000ed08 	.word	0xe000ed08

08007d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d46:	4b44      	ldr	r3, [pc, #272]	; (8007e58 <xPortStartScheduler+0x118>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a44      	ldr	r2, [pc, #272]	; (8007e5c <xPortStartScheduler+0x11c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d109      	bne.n	8007d64 <xPortStartScheduler+0x24>
 8007d50:	f04f 0320 	mov.w	r3, #32
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	e7fe      	b.n	8007d62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d64:	4b3c      	ldr	r3, [pc, #240]	; (8007e58 <xPortStartScheduler+0x118>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a3d      	ldr	r2, [pc, #244]	; (8007e60 <xPortStartScheduler+0x120>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d109      	bne.n	8007d82 <xPortStartScheduler+0x42>
 8007d6e:	f04f 0320 	mov.w	r3, #32
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e7fe      	b.n	8007d80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d82:	4b38      	ldr	r3, [pc, #224]	; (8007e64 <xPortStartScheduler+0x124>)
 8007d84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	22ff      	movs	r2, #255	; 0xff
 8007d92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	4b30      	ldr	r3, [pc, #192]	; (8007e68 <xPortStartScheduler+0x128>)
 8007da8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007daa:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007dac:	2207      	movs	r2, #7
 8007dae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007db0:	e009      	b.n	8007dc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007db2:	4b2e      	ldr	r3, [pc, #184]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	4a2c      	ldr	r2, [pc, #176]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007dba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dce:	2b80      	cmp	r3, #128	; 0x80
 8007dd0:	d0ef      	beq.n	8007db2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dd2:	4b26      	ldr	r3, [pc, #152]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1c3 0307 	rsb	r3, r3, #7
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d009      	beq.n	8007df2 <xPortStartScheduler+0xb2>
 8007dde:	f04f 0320 	mov.w	r3, #32
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60bb      	str	r3, [r7, #8]
 8007df0:	e7fe      	b.n	8007df0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007df2:	4b1e      	ldr	r3, [pc, #120]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007dfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dfc:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e04:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <xPortStartScheduler+0x12c>)
 8007e06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e10:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <xPortStartScheduler+0x130>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <xPortStartScheduler+0x130>)
 8007e16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e1c:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <xPortStartScheduler+0x130>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <xPortStartScheduler+0x130>)
 8007e22:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8007e26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e28:	f000 f8d6 	bl	8007fd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e2c:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <xPortStartScheduler+0x134>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e32:	f000 f8f5 	bl	8008020 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <xPortStartScheduler+0x138>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a0f      	ldr	r2, [pc, #60]	; (8007e78 <xPortStartScheduler+0x138>)
 8007e3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e42:	f7ff ff69 	bl	8007d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e46:	f7ff fa75 	bl	8007334 <vTaskSwitchContext>
	prvTaskExitError();
 8007e4a:	f7ff ff21 	bl	8007c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed00 	.word	0xe000ed00
 8007e5c:	410fc271 	.word	0x410fc271
 8007e60:	410fc270 	.word	0x410fc270
 8007e64:	e000e400 	.word	0xe000e400
 8007e68:	200003b4 	.word	0x200003b4
 8007e6c:	200003b8 	.word	0x200003b8
 8007e70:	e000ed20 	.word	0xe000ed20
 8007e74:	2000000c 	.word	0x2000000c
 8007e78:	e000ef34 	.word	0xe000ef34

08007e7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	f04f 0320 	mov.w	r3, #32
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e94:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <vPortEnterCritical+0x54>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4a0d      	ldr	r2, [pc, #52]	; (8007ed0 <vPortEnterCritical+0x54>)
 8007e9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <vPortEnterCritical+0x54>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d10e      	bne.n	8007ec4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <vPortEnterCritical+0x58>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <vPortEnterCritical+0x48>
 8007eb0:	f04f 0320 	mov.w	r3, #32
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	e7fe      	b.n	8007ec2 <vPortEnterCritical+0x46>
	}
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	2000000c 	.word	0x2000000c
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ede:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <vPortExitCritical+0x4c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <vPortExitCritical+0x22>
 8007ee6:	f04f 0320 	mov.w	r3, #32
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	e7fe      	b.n	8007ef8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <vPortExitCritical+0x4c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a08      	ldr	r2, [pc, #32]	; (8007f24 <vPortExitCritical+0x4c>)
 8007f02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f04:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <vPortExitCritical+0x4c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <vPortExitCritical+0x3e>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	2000000c 	.word	0x2000000c
	...

08007f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f30:	f3ef 8009 	mrs	r0, PSP
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <pxCurrentTCBConst>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f01e 0f10 	tst.w	lr, #16
 8007f40:	bf08      	it	eq
 8007f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	6010      	str	r0, [r2, #0]
 8007f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f50:	f04f 0020 	mov.w	r0, #32
 8007f54:	f380 8811 	msr	BASEPRI, r0
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f7ff f9e8 	bl	8007334 <vTaskSwitchContext>
 8007f64:	f04f 0000 	mov.w	r0, #0
 8007f68:	f380 8811 	msr	BASEPRI, r0
 8007f6c:	bc09      	pop	{r0, r3}
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	6808      	ldr	r0, [r1, #0]
 8007f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f76:	f01e 0f10 	tst.w	lr, #16
 8007f7a:	bf08      	it	eq
 8007f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f80:	f380 8809 	msr	PSP, r0
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst>:
 8007f90:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f9e:	f04f 0320 	mov.w	r3, #32
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fb0:	f7ff f904 	bl	80071bc <xTaskIncrementTick>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <SysTick_Handler+0x3c>)
 8007fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <vPortSetupTimerInterrupt+0x34>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fe2:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <vPortSetupTimerInterrupt+0x38>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <vPortSetupTimerInterrupt+0x3c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a0a      	ldr	r2, [pc, #40]	; (8008018 <vPortSetupTimerInterrupt+0x40>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	4a09      	ldr	r2, [pc, #36]	; (800801c <vPortSetupTimerInterrupt+0x44>)
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ffa:	4b04      	ldr	r3, [pc, #16]	; (800800c <vPortSetupTimerInterrupt+0x34>)
 8007ffc:	2207      	movs	r2, #7
 8007ffe:	601a      	str	r2, [r3, #0]
}
 8008000:	bf00      	nop
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	e000e010 	.word	0xe000e010
 8008010:	e000e018 	.word	0xe000e018
 8008014:	20000000 	.word	0x20000000
 8008018:	10624dd3 	.word	0x10624dd3
 800801c:	e000e014 	.word	0xe000e014

08008020 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008020:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008030 <vPortEnableVFP+0x10>
 8008024:	6801      	ldr	r1, [r0, #0]
 8008026:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800802a:	6001      	str	r1, [r0, #0]
 800802c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800802e:	bf00      	nop
 8008030:	e000ed88 	.word	0xe000ed88

08008034 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800803a:	f3ef 8305 	mrs	r3, IPSR
 800803e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b0f      	cmp	r3, #15
 8008044:	d913      	bls.n	800806e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <vPortValidateInterruptPriority+0x6c>)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008050:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <vPortValidateInterruptPriority+0x70>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	7afa      	ldrb	r2, [r7, #11]
 8008056:	429a      	cmp	r2, r3
 8008058:	d209      	bcs.n	800806e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800805a:	f04f 0320 	mov.w	r3, #32
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	607b      	str	r3, [r7, #4]
 800806c:	e7fe      	b.n	800806c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800806e:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <vPortValidateInterruptPriority+0x74>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <vPortValidateInterruptPriority+0x78>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d909      	bls.n	8008092 <vPortValidateInterruptPriority+0x5e>
 800807e:	f04f 0320 	mov.w	r3, #32
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	e7fe      	b.n	8008090 <vPortValidateInterruptPriority+0x5c>
	}
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	e000e3f0 	.word	0xe000e3f0
 80080a4:	200003b4 	.word	0x200003b4
 80080a8:	e000ed0c 	.word	0xe000ed0c
 80080ac:	200003b8 	.word	0x200003b8

080080b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080bc:	f7fe ffd4 	bl	8007068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080c0:	4b57      	ldr	r3, [pc, #348]	; (8008220 <pvPortMalloc+0x170>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080c8:	f000 f90c 	bl	80082e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080cc:	4b55      	ldr	r3, [pc, #340]	; (8008224 <pvPortMalloc+0x174>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4013      	ands	r3, r2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f040 808c 	bne.w	80081f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01c      	beq.n	800811a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80080e0:	2208      	movs	r2, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4413      	add	r3, r2
 80080e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d013      	beq.n	800811a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	3308      	adds	r3, #8
 80080fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <pvPortMalloc+0x6a>
 8008106:	f04f 0320 	mov.w	r3, #32
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	e7fe      	b.n	8008118 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d068      	beq.n	80081f2 <pvPortMalloc+0x142>
 8008120:	4b41      	ldr	r3, [pc, #260]	; (8008228 <pvPortMalloc+0x178>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	429a      	cmp	r2, r3
 8008128:	d863      	bhi.n	80081f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800812a:	4b40      	ldr	r3, [pc, #256]	; (800822c <pvPortMalloc+0x17c>)
 800812c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800812e:	4b3f      	ldr	r3, [pc, #252]	; (800822c <pvPortMalloc+0x17c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008134:	e004      	b.n	8008140 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d903      	bls.n	8008152 <pvPortMalloc+0xa2>
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f1      	bne.n	8008136 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008152:	4b33      	ldr	r3, [pc, #204]	; (8008220 <pvPortMalloc+0x170>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008158:	429a      	cmp	r2, r3
 800815a:	d04a      	beq.n	80081f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2208      	movs	r2, #8
 8008162:	4413      	add	r3, r2
 8008164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	1ad2      	subs	r2, r2, r3
 8008176:	2308      	movs	r3, #8
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	429a      	cmp	r2, r3
 800817c:	d91e      	bls.n	80081bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800817e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <pvPortMalloc+0xf4>
 8008190:	f04f 0320 	mov.w	r3, #32
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	613b      	str	r3, [r7, #16]
 80081a2:	e7fe      	b.n	80081a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081b6:	69b8      	ldr	r0, [r7, #24]
 80081b8:	f000 f8f6 	bl	80083a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <pvPortMalloc+0x178>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	4a18      	ldr	r2, [pc, #96]	; (8008228 <pvPortMalloc+0x178>)
 80081c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ca:	4b17      	ldr	r3, [pc, #92]	; (8008228 <pvPortMalloc+0x178>)
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4b18      	ldr	r3, [pc, #96]	; (8008230 <pvPortMalloc+0x180>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d203      	bcs.n	80081de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <pvPortMalloc+0x178>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <pvPortMalloc+0x180>)
 80081dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <pvPortMalloc+0x174>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081f2:	f7fe ff47 	bl	8007084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d009      	beq.n	8008214 <pvPortMalloc+0x164>
 8008200:	f04f 0320 	mov.w	r3, #32
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e7fe      	b.n	8008212 <pvPortMalloc+0x162>
	return pvReturn;
 8008214:	69fb      	ldr	r3, [r7, #28]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3728      	adds	r7, #40	; 0x28
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200023c4 	.word	0x200023c4
 8008224:	200023d0 	.word	0x200023d0
 8008228:	200023c8 	.word	0x200023c8
 800822c:	200023bc 	.word	0x200023bc
 8008230:	200023cc 	.word	0x200023cc

08008234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d046      	beq.n	80082d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008246:	2308      	movs	r3, #8
 8008248:	425b      	negs	r3, r3
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4413      	add	r3, r2
 800824e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <vPortFree+0xa8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4013      	ands	r3, r2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <vPortFree+0x42>
 8008262:	f04f 0320 	mov.w	r3, #32
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e7fe      	b.n	8008274 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <vPortFree+0x5e>
 800827e:	f04f 0320 	mov.w	r3, #32
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	e7fe      	b.n	8008290 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <vPortFree+0xa8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d019      	beq.n	80082d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d115      	bne.n	80082d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <vPortFree+0xa8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	401a      	ands	r2, r3
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082b8:	f7fe fed6 	bl	8007068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <vPortFree+0xac>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4413      	add	r3, r2
 80082c6:	4a06      	ldr	r2, [pc, #24]	; (80082e0 <vPortFree+0xac>)
 80082c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ca:	6938      	ldr	r0, [r7, #16]
 80082cc:	f000 f86c 	bl	80083a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082d0:	f7fe fed8 	bl	8007084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082d4:	bf00      	nop
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200023d0 	.word	0x200023d0
 80082e0:	200023c8 	.word	0x200023c8

080082e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082f0:	4b27      	ldr	r3, [pc, #156]	; (8008390 <prvHeapInit+0xac>)
 80082f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00c      	beq.n	8008318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3307      	adds	r3, #7
 8008302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0307 	bic.w	r3, r3, #7
 800830a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	4a1f      	ldr	r2, [pc, #124]	; (8008390 <prvHeapInit+0xac>)
 8008314:	4413      	add	r3, r2
 8008316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <prvHeapInit+0xb0>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <prvHeapInit+0xb0>)
 8008324:	2200      	movs	r2, #0
 8008326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	4413      	add	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008330:	2208      	movs	r2, #8
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0307 	bic.w	r3, r3, #7
 800833e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4a15      	ldr	r2, [pc, #84]	; (8008398 <prvHeapInit+0xb4>)
 8008344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008346:	4b14      	ldr	r3, [pc, #80]	; (8008398 <prvHeapInit+0xb4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800834e:	4b12      	ldr	r3, [pc, #72]	; (8008398 <prvHeapInit+0xb4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008364:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <prvHeapInit+0xb4>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4a0a      	ldr	r2, [pc, #40]	; (800839c <prvHeapInit+0xb8>)
 8008372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4a09      	ldr	r2, [pc, #36]	; (80083a0 <prvHeapInit+0xbc>)
 800837a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800837c:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <prvHeapInit+0xc0>)
 800837e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008382:	601a      	str	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	200003bc 	.word	0x200003bc
 8008394:	200023bc 	.word	0x200023bc
 8008398:	200023c4 	.word	0x200023c4
 800839c:	200023cc 	.word	0x200023cc
 80083a0:	200023c8 	.word	0x200023c8
 80083a4:	200023d0 	.word	0x200023d0

080083a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083b0:	4b28      	ldr	r3, [pc, #160]	; (8008454 <prvInsertBlockIntoFreeList+0xac>)
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e002      	b.n	80083bc <prvInsertBlockIntoFreeList+0x14>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d8f7      	bhi.n	80083b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	4413      	add	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d108      	bne.n	80083ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	441a      	add	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d118      	bne.n	8008430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <prvInsertBlockIntoFreeList+0xb0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d00d      	beq.n	8008426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	441a      	add	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	e008      	b.n	8008438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <prvInsertBlockIntoFreeList+0xb0>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	e003      	b.n	8008438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d002      	beq.n	8008446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	200023bc 	.word	0x200023bc
 8008458:	200023c4 	.word	0x200023c4

0800845c <__libc_init_array>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4e0d      	ldr	r6, [pc, #52]	; (8008494 <__libc_init_array+0x38>)
 8008460:	4c0d      	ldr	r4, [pc, #52]	; (8008498 <__libc_init_array+0x3c>)
 8008462:	1ba4      	subs	r4, r4, r6
 8008464:	10a4      	asrs	r4, r4, #2
 8008466:	2500      	movs	r5, #0
 8008468:	42a5      	cmp	r5, r4
 800846a:	d109      	bne.n	8008480 <__libc_init_array+0x24>
 800846c:	4e0b      	ldr	r6, [pc, #44]	; (800849c <__libc_init_array+0x40>)
 800846e:	4c0c      	ldr	r4, [pc, #48]	; (80084a0 <__libc_init_array+0x44>)
 8008470:	f000 f82c 	bl	80084cc <_init>
 8008474:	1ba4      	subs	r4, r4, r6
 8008476:	10a4      	asrs	r4, r4, #2
 8008478:	2500      	movs	r5, #0
 800847a:	42a5      	cmp	r5, r4
 800847c:	d105      	bne.n	800848a <__libc_init_array+0x2e>
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008484:	4798      	blx	r3
 8008486:	3501      	adds	r5, #1
 8008488:	e7ee      	b.n	8008468 <__libc_init_array+0xc>
 800848a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800848e:	4798      	blx	r3
 8008490:	3501      	adds	r5, #1
 8008492:	e7f2      	b.n	800847a <__libc_init_array+0x1e>
 8008494:	0800860c 	.word	0x0800860c
 8008498:	0800860c 	.word	0x0800860c
 800849c:	0800860c 	.word	0x0800860c
 80084a0:	08008610 	.word	0x08008610

080084a4 <memcpy>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	1e43      	subs	r3, r0, #1
 80084a8:	440a      	add	r2, r1
 80084aa:	4291      	cmp	r1, r2
 80084ac:	d100      	bne.n	80084b0 <memcpy+0xc>
 80084ae:	bd10      	pop	{r4, pc}
 80084b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b8:	e7f7      	b.n	80084aa <memcpy+0x6>

080084ba <memset>:
 80084ba:	4402      	add	r2, r0
 80084bc:	4603      	mov	r3, r0
 80084be:	4293      	cmp	r3, r2
 80084c0:	d100      	bne.n	80084c4 <memset+0xa>
 80084c2:	4770      	bx	lr
 80084c4:	f803 1b01 	strb.w	r1, [r3], #1
 80084c8:	e7f9      	b.n	80084be <memset+0x4>
	...

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
