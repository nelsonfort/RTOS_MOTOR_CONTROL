
RTOS_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c9c  08004c9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c9c  08004c9c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c9c  08004c9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  20000010  08004cb4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  08004cb4  00021028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f11  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000267b  00000000  00000000  00031f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  000345d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00035508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f21  00000000  00000000  00036318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d4be  00000000  00000000  00057239  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc9b1  00000000  00000000  000646f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001310a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec0  00000000  00000000  00131124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bfc 	.word	0x08004bfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004bfc 	.word	0x08004bfc

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fa3d 	bl	8000698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f841 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f883 	bl	800032c <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem1 */
  osSemaphoreDef(binSem1);
 8000226:	2300      	movs	r3, #0
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
 800022a:	2300      	movs	r3, #0
 800022c:	63fb      	str	r3, [r7, #60]	; 0x3c
  binSem1Handle = osSemaphoreCreate(osSemaphore(binSem1), 1);
 800022e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000232:	2101      	movs	r1, #1
 8000234:	4618      	mov	r0, r3
 8000236:	f002 f9c4 	bl	80025c2 <osSemaphoreCreate>
 800023a:	4602      	mov	r2, r0
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <main+0x7c>)
 800023e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <main+0x80>)
 8000242:	f107 041c 	add.w	r4, r7, #28
 8000246:	461d      	mov	r5, r3
 8000248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000254:	f107 031c 	add.w	r3, r7, #28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 f951 	bl	8002502 <osThreadCreate>
 8000260:	4602      	mov	r2, r0
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <main+0x84>)
 8000264:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <main+0x88>)
 8000268:	463c      	mov	r4, r7
 800026a:	461d      	mov	r5, r3
 800026c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000278:	463b      	mov	r3, r7
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f940 	bl	8002502 <osThreadCreate>
 8000282:	4602      	mov	r2, r0
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x8c>)
 8000286:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000288:	f002 f934 	bl	80024f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028c:	e7fe      	b.n	800028c <main+0x78>
 800028e:	bf00      	nop
 8000290:	20000fcc 	.word	0x20000fcc
 8000294:	08004c1c 	.word	0x08004c1c
 8000298:	20000fd0 	.word	0x20000fd0
 800029c:	08004c40 	.word	0x08004c40
 80002a0:	20000fd4 	.word	0x20000fd4

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f004 fc99 	bl	8004bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fca6 	bl	8000c3c <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002f6:	f000 f8e3 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2302      	movs	r3, #2
 8000300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2102      	movs	r1, #2
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fba7 	bl	8001a68 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000320:	f000 f8ce 	bl	80004c0 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3740      	adds	r7, #64	; 0x40
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a36      	ldr	r2, [pc, #216]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b34      	ldr	r3, [pc, #208]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000356:	613b      	str	r3, [r7, #16]
 8000358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035a:	4b31      	ldr	r3, [pc, #196]	; (8000420 <MX_GPIO_Init+0xf4>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a30      	ldr	r2, [pc, #192]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_GPIO_Init+0xf4>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a24      	ldr	r2, [pc, #144]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_GPIO_Init+0xf4>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003aa:	f000 fc17 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_GPIO_Init+0xf8>)
 80003b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	4619      	mov	r1, r3
 80003c2:	4819      	ldr	r0, [pc, #100]	; (8000428 <MX_GPIO_Init+0xfc>)
 80003c4:	f000 fa80 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003c8:	230c      	movs	r3, #12
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003cc:	2302      	movs	r3, #2
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2300      	movs	r3, #0
 80003d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003d8:	2307      	movs	r3, #7
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4619      	mov	r1, r3
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 fa6f 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003ea:	2320      	movs	r3, #32
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 0314 	add.w	r3, r7, #20
 80003fe:	4619      	mov	r1, r3
 8000400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000404:	f000 fa60 	bl	80008c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2102      	movs	r1, #2
 800040c:	2028      	movs	r0, #40	; 0x28
 800040e:	f000 fa31 	bl	8000874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000412:	2028      	movs	r0, #40	; 0x28
 8000414:	f000 fa4a 	bl	80008ac <HAL_NVIC_EnableIRQ>

}
 8000418:	bf00      	nop
 800041a:	3728      	adds	r7, #40	; 0x28
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	10210000 	.word	0x10210000
 8000428:	48000800 	.word	0x48000800

0800042c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
	if(B1_Pin == GPIO_Pin)
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043c:	d104      	bne.n	8000448 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(binSem1Handle);
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <HAL_GPIO_EXTI_Callback+0x24>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f002 f93e 	bl	80026c4 <osSemaphoreRelease>

	}
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000fcc 	.word	0x20000fcc

08000454 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2120      	movs	r1, #32
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fbba 	bl	8000bdc <HAL_GPIO_WritePin>
	osSemaphoreWait(binSem1Handle, osWaitForever);
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <Task1_App+0x24>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f04f 31ff 	mov.w	r1, #4294967295
 8000470:	4618      	mov	r0, r3
 8000472:	f002 f8d9 	bl	8002628 <osSemaphoreWait>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000476:	e7f1      	b.n	800045c <Task1_App+0x8>
 8000478:	20000fcc 	.word	0x20000fcc

0800047c <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2120      	movs	r1, #32
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 fba6 	bl	8000bdc <HAL_GPIO_WritePin>
	  osDelay(1300);
 8000490:	f240 5014 	movw	r0, #1300	; 0x514
 8000494:	f002 f881 	bl	800259a <osDelay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000498:	e7f4      	b.n	8000484 <Task2_App+0x8>
	...

0800049c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d101      	bne.n	80004b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ae:	f000 f909 	bl	80006c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40001000 	.word	0x40001000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_MspInit+0x44>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_MspInit+0x44>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_MspInit+0x44>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000528:	2200      	movs	r2, #0
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	2036      	movs	r0, #54	; 0x36
 800052e:	f000 f9a1 	bl	8000874 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000532:	2036      	movs	r0, #54	; 0x36
 8000534:	f000 f9ba 	bl	80008ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <HAL_InitTick+0xa0>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <HAL_InitTick+0xa0>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	61d3      	str	r3, [r2, #28]
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <HAL_InitTick+0xa0>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	f003 0310 	and.w	r3, r3, #16
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000550:	f107 0210 	add.w	r2, r7, #16
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fc98 	bl	8001e90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000560:	f001 fc74 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8000564:	4603      	mov	r3, r0
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <HAL_InitTick+0xa4>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	0c9b      	lsrs	r3, r3, #18
 8000574:	3b01      	subs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <HAL_InitTick+0xa8>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <HAL_InitTick+0xac>)
 800057c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <HAL_InitTick+0xa8>)
 8000580:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000584:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_InitTick+0xa8>)
 8000588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800058a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_InitTick+0xa8>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_InitTick+0xa8>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <HAL_InitTick+0xa8>)
 800059a:	f001 fcab 	bl	8001ef4 <HAL_TIM_Base_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d104      	bne.n	80005ae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <HAL_InitTick+0xa8>)
 80005a6:	f001 fd07 	bl	8001fb8 <HAL_TIM_Base_Start_IT>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3730      	adds	r7, #48	; 0x30
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	431bde83 	.word	0x431bde83
 80005c0:	20000fd8 	.word	0x20000fd8
 80005c4:	40001000 	.word	0x40001000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000600:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000604:	f000 fb02 	bl	8000c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <TIM6_DAC_IRQHandler+0x10>)
 8000612:	f001 fd41 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000fd8 	.word	0x20000fd8

08000620 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <SystemInit+0x20>)
 8000626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <SystemInit+0x20>)
 800062c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800067c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490e      	ldr	r1, [pc, #56]	; (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0b      	ldr	r4, [pc, #44]	; (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066e:	f7ff ffd7 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000672:	f004 fa8b 	bl	8004b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000676:	f7ff fdcd 	bl	8000214 <main>

0800067a <LoopForever>:

LoopForever:
    b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800067c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000688:	08004ca4 	.word	0x08004ca4
  ldr r2, =_sbss
 800068c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000690:	20001028 	.word	0x20001028

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>
	...

08000698 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_Init+0x28>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_Init+0x28>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 f8d8 	bl	800085e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff32 	bl	8000518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b4:	f7ff ff0c 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_IncTick+0x20>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x24>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_IncTick+0x24>)
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20001024 	.word	0x20001024

080006ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_GetTick+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20001024 	.word	0x20001024

08000704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_GetPriorityGrouping+0x18>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0307 	and.w	r3, r3, #7
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	2b00      	cmp	r3, #0
 8000778:	db0b      	blt.n	8000792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 021f 	and.w	r2, r3, #31
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <__NVIC_EnableIRQ+0x38>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	2001      	movs	r0, #1
 800078a:	fa00 f202 	lsl.w	r2, r0, r2
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ff4c 	bl	8000704 <__NVIC_SetPriorityGrouping>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000886:	f7ff ff61 	bl	800074c <__NVIC_GetPriorityGrouping>
 800088a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	6978      	ldr	r0, [r7, #20]
 8000892:	f7ff ffb1 	bl	80007f8 <NVIC_EncodePriority>
 8000896:	4602      	mov	r2, r0
 8000898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff80 	bl	80007a4 <__NVIC_SetPriority>
}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff54 	bl	8000768 <__NVIC_EnableIRQ>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d6:	e160      	b.n	8000b9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 8152 	beq.w	8000b94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d00b      	beq.n	8000910 <HAL_GPIO_Init+0x48>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d007      	beq.n	8000910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000904:	2b11      	cmp	r3, #17
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	f003 0201 	and.w	r2, r3, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0xea>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d123      	bne.n	80009fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	08da      	lsrs	r2, r3, #3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3208      	adds	r2, #8
 80009f4:	6939      	ldr	r1, [r7, #16]
 80009f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0203 	and.w	r2, r3, #3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 80ac 	beq.w	8000b94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a5d      	ldr	r2, [pc, #372]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a54:	4a59      	ldr	r2, [pc, #356]	; (8000bbc <HAL_GPIO_Init+0x2f4>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a7e:	d025      	beq.n	8000acc <HAL_GPIO_Init+0x204>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <HAL_GPIO_Init+0x2f8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d01f      	beq.n	8000ac8 <HAL_GPIO_Init+0x200>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a4e      	ldr	r2, [pc, #312]	; (8000bc4 <HAL_GPIO_Init+0x2fc>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d019      	beq.n	8000ac4 <HAL_GPIO_Init+0x1fc>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a4d      	ldr	r2, [pc, #308]	; (8000bc8 <HAL_GPIO_Init+0x300>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d013      	beq.n	8000ac0 <HAL_GPIO_Init+0x1f8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <HAL_GPIO_Init+0x304>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d00d      	beq.n	8000abc <HAL_GPIO_Init+0x1f4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <HAL_GPIO_Init+0x308>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d007      	beq.n	8000ab8 <HAL_GPIO_Init+0x1f0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <HAL_GPIO_Init+0x30c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d101      	bne.n	8000ab4 <HAL_GPIO_Init+0x1ec>
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	e00c      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	e00a      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ab8:	2305      	movs	r3, #5
 8000aba:	e008      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000acc:	2300      	movs	r3, #0
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ade:	4937      	ldr	r1, [pc, #220]	; (8000bbc <HAL_GPIO_Init+0x2f4>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b10:	4a31      	ldr	r2, [pc, #196]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b3a:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f ae97 	bne.w	80008d8 <HAL_GPIO_Init+0x10>
  }
}
 8000baa:	bf00      	nop
 8000bac:	371c      	adds	r7, #28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	48001000 	.word	0x48001000
 8000bd0:	48001400 	.word	0x48001400
 8000bd4:	48001800 	.word	0x48001800
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fbfe 	bl	800042c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010400 	.word	0x40010400

08000c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f000 bf01 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 8160 	beq.w	8000f26 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c66:	4bae      	ldr	r3, [pc, #696]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d00c      	beq.n	8000c8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c72:	4bab      	ldr	r3, [pc, #684]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d159      	bne.n	8000d32 <HAL_RCC_OscConfig+0xf6>
 8000c7e:	4ba8      	ldr	r3, [pc, #672]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8a:	d152      	bne.n	8000d32 <HAL_RCC_OscConfig+0xf6>
 8000c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ca0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d102      	bne.n	8000cbe <HAL_RCC_OscConfig+0x82>
 8000cb8:	4b99      	ldr	r3, [pc, #612]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	e015      	b.n	8000cea <HAL_RCC_OscConfig+0xae>
 8000cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ce6:	4b8e      	ldr	r3, [pc, #568]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000cf2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000cf6:	fa92 f2a2 	rbit	r2, r2
 8000cfa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000cfe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	f042 0220 	orr.w	r2, r2, #32
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	f002 021f 	and.w	r2, r2, #31
 8000d12:	2101      	movs	r1, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 8102 	beq.w	8000f24 <HAL_RCC_OscConfig+0x2e8>
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 80fc 	bne.w	8000f24 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f000 be93 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3c:	d106      	bne.n	8000d4c <HAL_RCC_OscConfig+0x110>
 8000d3e:	4b78      	ldr	r3, [pc, #480]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a77      	ldr	r2, [pc, #476]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e030      	b.n	8000dae <HAL_RCC_OscConfig+0x172>
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x134>
 8000d56:	4b72      	ldr	r3, [pc, #456]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a71      	ldr	r2, [pc, #452]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b6f      	ldr	r3, [pc, #444]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a6e      	ldr	r2, [pc, #440]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e01e      	b.n	8000dae <HAL_RCC_OscConfig+0x172>
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x15a>
 8000d7c:	4b68      	ldr	r3, [pc, #416]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a67      	ldr	r2, [pc, #412]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b65      	ldr	r3, [pc, #404]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e00b      	b.n	8000dae <HAL_RCC_OscConfig+0x172>
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a61      	ldr	r2, [pc, #388]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a5e      	ldr	r2, [pc, #376]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d059      	beq.n	8000e6c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc98 	bl	80006ec <HAL_GetTick>
 8000dbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc0:	e00a      	b.n	8000dd8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fc93 	bl	80006ec <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d902      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f000 be40 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8000dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ddc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000dec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d102      	bne.n	8000e0a <HAL_RCC_OscConfig+0x1ce>
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	e015      	b.n	8000e36 <HAL_RCC_OscConfig+0x1fa>
 8000e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e26:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e3a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e3e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e42:	fa92 f2a2 	rbit	r2, r2
 8000e46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000e4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	f042 0220 	orr.w	r2, r2, #32
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	f002 021f 	and.w	r2, r2, #31
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0ab      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x186>
 8000e6a:	e05c      	b.n	8000f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc3e 	bl	80006ec <HAL_GetTick>
 8000e70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e74:	e00a      	b.n	8000e8c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e76:	f7ff fc39 	bl	80006ec <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d902      	bls.n	8000e8c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f000 bde6 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8000e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e90:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000ea0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d102      	bne.n	8000ebe <HAL_RCC_OscConfig+0x282>
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x2ae>
 8000ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000eda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_RCC_OscConfig+0x2e4>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000ef2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ef6:	fa92 f2a2 	rbit	r2, r2
 8000efa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000efe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f02:	fab2 f282 	clz	r2, r2
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	f042 0220 	orr.w	r2, r2, #32
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	f002 021f 	and.w	r2, r2, #31
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1ab      	bne.n	8000e76 <HAL_RCC_OscConfig+0x23a>
 8000f1e:	e002      	b.n	8000f26 <HAL_RCC_OscConfig+0x2ea>
 8000f20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 8170 	beq.w	8001216 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f36:	4bd0      	ldr	r3, [pc, #832]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f42:	4bcd      	ldr	r3, [pc, #820]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d16d      	bne.n	800102a <HAL_RCC_OscConfig+0x3ee>
 8000f4e:	4bca      	ldr	r3, [pc, #808]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f5a:	d166      	bne.n	800102a <HAL_RCC_OscConfig+0x3ee>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	095b      	lsrs	r3, r3, #5
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <HAL_RCC_OscConfig+0x350>
 8000f86:	4bbc      	ldr	r3, [pc, #752]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	e013      	b.n	8000fb4 <HAL_RCC_OscConfig+0x378>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fa4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fb0:	4bb1      	ldr	r3, [pc, #708]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000fba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000fc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3ba>
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d002      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f000 bd31 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff6:	4ba0      	ldr	r3, [pc, #640]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	21f8      	movs	r1, #248	; 0xf8
 8001006:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800100e:	fa91 f1a1 	rbit	r1, r1
 8001012:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001016:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800101a:	fab1 f181 	clz	r1, r1
 800101e:	b2c9      	uxtb	r1, r1
 8001020:	408b      	lsls	r3, r1
 8001022:	4995      	ldr	r1, [pc, #596]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001028:	e0f5      	b.n	8001216 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8085 	beq.w	8001140 <HAL_RCC_OscConfig+0x504>
 8001036:	2301      	movs	r3, #1
 8001038:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001048:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001056:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	461a      	mov	r2, r3
 800105e:	2301      	movs	r3, #1
 8001060:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fb43 	bl	80006ec <HAL_GetTick>
 8001066:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	e00a      	b.n	8001082 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fb3e 	bl	80006ec <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d902      	bls.n	8001082 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	f000 bceb 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001094:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <HAL_RCC_OscConfig+0x476>
 80010ac:	4b72      	ldr	r3, [pc, #456]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	e013      	b.n	80010da <HAL_RCC_OscConfig+0x49e>
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010d6:	4b68      	ldr	r3, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	2202      	movs	r2, #2
 80010dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80010e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80010e4:	fa92 f2a2 	rbit	r2, r2
 80010e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80010ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f002 021f 	and.w	r2, r2, #31
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0af      	beq.n	800106c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	21f8      	movs	r1, #248	; 0xf8
 800111c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001124:	fa91 f1a1 	rbit	r1, r1
 8001128:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800112c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001130:	fab1 f181 	clz	r1, r1
 8001134:	b2c9      	uxtb	r1, r1
 8001136:	408b      	lsls	r3, r1
 8001138:	494f      	ldr	r1, [pc, #316]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
 800113e:	e06a      	b.n	8001216 <HAL_RCC_OscConfig+0x5da>
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	461a      	mov	r2, r3
 8001168:	2300      	movs	r3, #0
 800116a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fabe 	bl	80006ec <HAL_GetTick>
 8001170:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fab9 	bl	80006ec <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d902      	bls.n	800118c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	f000 bc66 	b.w	8001a58 <HAL_RCC_OscConfig+0xe1c>
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800119e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <HAL_RCC_OscConfig+0x580>
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	e013      	b.n	80011e4 <HAL_RCC_OscConfig+0x5a8>
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_RCC_OscConfig+0x63c>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2202      	movs	r2, #2
 80011e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80011ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80011ee:	fa92 f2a2 	rbit	r2, r2
 80011f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80011f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011fa:	fab2 f282 	clz	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f042 0220 	orr.w	r2, r2, #32
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	f002 021f 	and.w	r2, r2, #31
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1af      	bne.n	8001176 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80da 	beq.w	80013da <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d069      	beq.n	8001304 <HAL_RCC_OscConfig+0x6c8>
 8001230:	2301      	movs	r3, #1
 8001232:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001242:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_RCC_OscConfig+0x640>)
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	461a      	mov	r2, r3
 8001256:	2301      	movs	r3, #1
 8001258:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fa47 	bl	80006ec <HAL_GetTick>
 800125e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	e00d      	b.n	8001280 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fa42 	bl	80006ec <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d905      	bls.n	8001280 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e3ef      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8001278:	40021000 	.word	0x40021000
 800127c:	10908120 	.word	0x10908120
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800128a:	fa93 f2a3 	rbit	r2, r3
 800128e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	fa93 f2a3 	rbit	r2, r3
 80012a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012b0:	2202      	movs	r2, #2
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	fa93 f2a3 	rbit	r2, r3
 80012be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c4:	4ba4      	ldr	r3, [pc, #656]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80012c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012cc:	2102      	movs	r1, #2
 80012ce:	6019      	str	r1, [r3, #0]
 80012d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	fa93 f1a3 	rbit	r1, r3
 80012da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012de:	6019      	str	r1, [r3, #0]
  return result;
 80012e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0b0      	beq.n	8001264 <HAL_RCC_OscConfig+0x628>
 8001302:	e06a      	b.n	80013da <HAL_RCC_OscConfig+0x79e>
 8001304:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800131a:	601a      	str	r2, [r3, #0]
  return result;
 800131c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001320:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4b8c      	ldr	r3, [pc, #560]	; (800155c <HAL_RCC_OscConfig+0x920>)
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	461a      	mov	r2, r3
 8001332:	2300      	movs	r3, #0
 8001334:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff f9d9 	bl	80006ec <HAL_GetTick>
 800133a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133e:	e009      	b.n	8001354 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff f9d4 	bl	80006ec <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e381      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8001354:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001358:	2202      	movs	r2, #2
 800135a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fa93 f2a3 	rbit	r2, r3
 8001366:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001370:	2202      	movs	r2, #2
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f2a3 	rbit	r2, r3
 8001396:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800139a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a4:	2102      	movs	r1, #2
 80013a6:	6019      	str	r1, [r3, #0]
 80013a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f1a3 	rbit	r1, r3
 80013b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013b6:	6019      	str	r1, [r3, #0]
  return result;
 80013b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1b2      	bne.n	8001340 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8157 	beq.w	8001698 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f0:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d112      	bne.n	8001422 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	4a55      	ldr	r2, [pc, #340]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	61d3      	str	r3, [r2, #28]
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800141c:	2301      	movs	r3, #1
 800141e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <HAL_RCC_OscConfig+0x924>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11a      	bne.n	8001464 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_RCC_OscConfig+0x924>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a4b      	ldr	r2, [pc, #300]	; (8001560 <HAL_RCC_OscConfig+0x924>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff f957 	bl	80006ec <HAL_GetTick>
 800143e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001442:	e009      	b.n	8001458 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001444:	f7ff f952 	bl	80006ec <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e2ff      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x924>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0ef      	beq.n	8001444 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x840>
 800146e:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a39      	ldr	r2, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	e02f      	b.n	80014dc <HAL_RCC_OscConfig+0x8a0>
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x864>
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a33      	ldr	r2, [pc, #204]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a30      	ldr	r2, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001498:	f023 0304 	bic.w	r3, r3, #4
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0x8a0>
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x888>
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x8a0>
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d06a      	beq.n	80015bc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f901 	bl	80006ec <HAL_GetTick>
 80014ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff f8fc 	bl	80006ec <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e2a7      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8001508:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f2a3 	rbit	r2, r3
 800151a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001536:	601a      	str	r2, [r3, #0]
  return result;
 8001538:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800153c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	095b      	lsrs	r3, r3, #5
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d108      	bne.n	8001564 <HAL_RCC_OscConfig+0x928>
 8001552:	4b01      	ldr	r3, [pc, #4]	; (8001558 <HAL_RCC_OscConfig+0x91c>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	e013      	b.n	8001580 <HAL_RCC_OscConfig+0x944>
 8001558:	40021000 	.word	0x40021000
 800155c:	10908120 	.word	0x10908120
 8001560:	40007000 	.word	0x40007000
 8001564:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4bc0      	ldr	r3, [pc, #768]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001584:	2102      	movs	r1, #2
 8001586:	6011      	str	r1, [r2, #0]
 8001588:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	fa92 f1a2 	rbit	r1, r2
 8001592:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001596:	6011      	str	r1, [r2, #0]
  return result;
 8001598:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f002 021f 	and.w	r2, r2, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d09a      	beq.n	80014f0 <HAL_RCC_OscConfig+0x8b4>
 80015ba:	e063      	b.n	8001684 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff f896 	bl	80006ec <HAL_GetTick>
 80015c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff f891 	bl	80006ec <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e23c      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 80015de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800160c:	601a      	str	r2, [r3, #0]
  return result;
 800160e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001612:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x9f2>
 8001628:	4b95      	ldr	r3, [pc, #596]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	e00d      	b.n	800164a <HAL_RCC_OscConfig+0xa0e>
 800162e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001632:	2202      	movs	r2, #2
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	4b8e      	ldr	r3, [pc, #568]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800164e:	2102      	movs	r1, #2
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fa92 f1a2 	rbit	r1, r2
 800165c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001660:	6011      	str	r1, [r2, #0]
  return result;
 8001662:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1a0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001684:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 81d9 	beq.w	8001a56 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	f000 81a6 	beq.w	80019fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 811e 	bne.w	80018fa <HAL_RCC_OscConfig+0xcbe>
 80016be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f2a3 	rbit	r2, r3
 80016d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016d6:	601a      	str	r2, [r3, #0]
  return result;
 80016d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	461a      	mov	r2, r3
 80016f0:	2300      	movs	r3, #0
 80016f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7fe fffa 	bl	80006ec <HAL_GetTick>
 80016f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	e009      	b.n	8001712 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7fe fff5 	bl	80006ec <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1a2      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8001712:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800172a:	601a      	str	r2, [r3, #0]
  return result;
 800172c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0xb10>
 8001746:	4b4e      	ldr	r3, [pc, #312]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	e01b      	b.n	8001784 <HAL_RCC_OscConfig+0xb48>
 800174c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fa93 f2a3 	rbit	r2, r3
 8001760:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800176a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001788:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800178c:	6011      	str	r1, [r2, #0]
 800178e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	fa92 f1a2 	rbit	r1, r2
 8001798:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800179c:	6011      	str	r1, [r2, #0]
  return result;
 800179e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	fab2 f282 	clz	r2, r2
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f042 0220 	orr.w	r2, r2, #32
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f002 021f 	and.w	r2, r2, #31
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d19e      	bne.n	80016fe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f023 020f 	bic.w	r2, r3, #15
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	492c      	ldr	r1, [pc, #176]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a19      	ldr	r1, [r3, #32]
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	4925      	ldr	r1, [pc, #148]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001808:	601a      	str	r2, [r3, #0]
  return result;
 800180a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800180e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	461a      	mov	r2, r3
 8001822:	2301      	movs	r3, #1
 8001824:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7fe ff61 	bl	80006ec <HAL_GetTick>
 800182a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182e:	e009      	b.n	8001844 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7fe ff5c 	bl	80006ec <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e109      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 8001844:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800185c:	601a      	str	r2, [r3, #0]
  return result;
 800185e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001862:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0xc48>
 8001878:	4b01      	ldr	r3, [pc, #4]	; (8001880 <HAL_RCC_OscConfig+0xc44>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	e01e      	b.n	80018bc <HAL_RCC_OscConfig+0xc80>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0xe28>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fa92 f1a2 	rbit	r1, r2
 80018d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018d4:	6011      	str	r1, [r2, #0]
  return result;
 80018d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	fab2 f282 	clz	r2, r2
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f042 0220 	orr.w	r2, r2, #32
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f002 021f 	and.w	r2, r2, #31
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d09b      	beq.n	8001830 <HAL_RCC_OscConfig+0xbf4>
 80018f8:	e0ad      	b.n	8001a56 <HAL_RCC_OscConfig+0xe1a>
 80018fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001912:	601a      	str	r2, [r3, #0]
  return result;
 8001914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001918:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	2300      	movs	r3, #0
 800192e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe fedc 	bl	80006ec <HAL_GetTick>
 8001934:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	e009      	b.n	800194e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7fe fed7 	bl	80006ec <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e084      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001966:	601a      	str	r2, [r3, #0]
  return result;
 8001968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	095b      	lsrs	r3, r3, #5
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d102      	bne.n	8001988 <HAL_RCC_OscConfig+0xd4c>
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0xe28>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	e01b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd84>
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_RCC_OscConfig+0xe28>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f107 0214 	add.w	r2, r7, #20
 80019c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019c8:	6011      	str	r1, [r2, #0]
 80019ca:	f107 0214 	add.w	r2, r7, #20
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fa92 f1a2 	rbit	r1, r2
 80019d4:	f107 0210 	add.w	r2, r7, #16
 80019d8:	6011      	str	r1, [r2, #0]
  return result;
 80019da:	f107 0210 	add.w	r2, r7, #16
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d19e      	bne.n	800193a <HAL_RCC_OscConfig+0xcfe>
 80019fc:	e02b      	b.n	8001a56 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e025      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0xe28>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_RCC_OscConfig+0xe28>)
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a20:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d111      	bne.n	8001a52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d108      	bne.n	8001a52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a44:	f003 020f 	and.w	r2, r3, #15
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b09e      	sub	sp, #120	; 0x78
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e162      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	498b      	ldr	r1, [pc, #556]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e14a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	497f      	ldr	r1, [pc, #508]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80dc 	beq.w	8001c94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d13c      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xf6>
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xa6>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e00f      	b.n	8001b2e <HAL_RCC_ClockConfig+0xc6>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b20:	663b      	str	r3, [r7, #96]	; 0x60
 8001b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b32:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b36:	fa92 f2a2 	rbit	r2, r2
 8001b3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b3e:	fab2 f282 	clz	r2, r2
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f042 0220 	orr.w	r2, r2, #32
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f002 021f 	and.w	r2, r2, #31
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d17b      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0f3      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d13c      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x178>
 8001b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x128>
 8001b8a:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
 8001b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0220 	orr.w	r2, r2, #32
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d13a      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b2      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
 8001be0:	2302      	movs	r3, #2
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1a0>
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e00d      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1bc>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2202      	movs	r2, #2
 8001c26:	61ba      	str	r2, [r7, #24]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	617a      	str	r2, [r7, #20]
  return result;
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f042 0220 	orr.w	r2, r2, #32
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f002 021f 	and.w	r2, r2, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e079      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	491a      	ldr	r1, [pc, #104]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7fe fd42 	bl	80006ec <HAL_GetTick>
 8001c68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7fe fd3e 	bl	80006ec <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e061      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d214      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4906      	ldr	r1, [pc, #24]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e040      	b.n	8001d46 <HAL_RCC_ClockConfig+0x2de>
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_ClockConfig+0x2e8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	491a      	ldr	r1, [pc, #104]	; (8001d50 <HAL_RCC_ClockConfig+0x2e8>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x2e8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4912      	ldr	r1, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x2e8>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d0a:	f000 f829 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4601      	mov	r1, r0
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCC_ClockConfig+0x2e8>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d18:	22f0      	movs	r2, #240	; 0xf0
 8001d1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	fa92 f2a2 	rbit	r2, r2
 8001d22:	60fa      	str	r2, [r7, #12]
  return result;
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	40d3      	lsrs	r3, r2
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x2ec>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	fa21 f303 	lsr.w	r3, r1, r3
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_RCC_ClockConfig+0x2f0>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_RCC_ClockConfig+0x2f4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbea 	bl	8000518 <HAL_InitTick>
  
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3778      	adds	r7, #120	; 0x78
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08004c64 	.word	0x08004c64
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x30>
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x36>
 8001d8e:	e03f      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d92:	623b      	str	r3, [r7, #32]
      break;
 8001d94:	e03f      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001da0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	607a      	str	r2, [r7, #4]
  return result;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	40d3      	lsrs	r3, r2
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	60fa      	str	r2, [r7, #12]
  return result;
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	40d3      	lsrs	r3, r2
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	e007      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	623b      	str	r3, [r7, #32]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	372c      	adds	r7, #44	; 0x2c
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	007a1200 	.word	0x007a1200
 8001e2c:	08004c7c 	.word	0x08004c7c
 8001e30:	08004c8c 	.word	0x08004c8c

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000000 	.word	0x20000000

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e52:	f7ff ffef 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e56:	4601      	mov	r1, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	fa92 f2a2 	rbit	r2, r2
 8001e6c:	603a      	str	r2, [r7, #0]
  return result;
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	fab2 f282 	clz	r2, r2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	40d3      	lsrs	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004c74 	.word	0x08004c74

08001e90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_GetClockConfig+0x5c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCC_GetClockConfig+0x5c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_RCC_GetClockConfig+0x5c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCC_GetClockConfig+0x60>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0207 	and.w	r2, r3, #7
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e049      	b.n	8001f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f841 	bl	8001fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 f9f8 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d001      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e04f      	b.n	8002070 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_TIM_Base_Start_IT+0xc4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d018      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <HAL_TIM_Base_Start_IT+0xc8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_TIM_Base_Start_IT+0xcc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_TIM_Base_Start_IT+0xd0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_TIM_Base_Start_IT+0xd4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_TIM_Base_Start_IT+0xd8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d115      	bne.n	800205a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_TIM_Base_Start_IT+0xdc>)
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b06      	cmp	r3, #6
 800203e:	d015      	beq.n	800206c <HAL_TIM_Base_Start_IT+0xb4>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d011      	beq.n	800206c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002058:	e008      	b.n	800206c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e000      	b.n	800206e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800
 8002088:	40013400 	.word	0x40013400
 800208c:	40014000 	.word	0x40014000
 8002090:	40015000 	.word	0x40015000
 8002094:	00010007 	.word	0x00010007

08002098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0202 	mvn.w	r2, #2
 80020c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f905 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8f7 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f908 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d122      	bne.n	8002148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0204 	mvn.w	r2, #4
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8db 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8cd 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f8de 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b08      	cmp	r3, #8
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0208 	mvn.w	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2204      	movs	r2, #4
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8b1 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8a3 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8b4 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0210 	mvn.w	r2, #16
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2208      	movs	r2, #8
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f887 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f879 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f88a 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10e      	bne.n	800221c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0201 	mvn.w	r2, #1
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe f940 	bl	800049c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	2b80      	cmp	r3, #128	; 0x80
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b80      	cmp	r3, #128	; 0x80
 8002236:	d107      	bne.n	8002248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f918 	bl	8002478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002256:	d10e      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d107      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800226e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f90b 	bl	800248c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f838 	bl	8002312 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d10e      	bne.n	80022ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0220 	mvn.w	r2, #32
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8cb 	bl	8002464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a42      	ldr	r2, [pc, #264]	; (8002444 <TIM_Base_SetConfig+0x11c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d00f      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <TIM_Base_SetConfig+0x120>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00b      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3e      	ldr	r2, [pc, #248]	; (800244c <TIM_Base_SetConfig+0x124>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <TIM_Base_SetConfig+0x128>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <TIM_Base_SetConfig+0x11c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d01b      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <TIM_Base_SetConfig+0x120>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d017      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a2d      	ldr	r2, [pc, #180]	; (800244c <TIM_Base_SetConfig+0x124>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2c      	ldr	r2, [pc, #176]	; (8002450 <TIM_Base_SetConfig+0x128>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00f      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <TIM_Base_SetConfig+0x130>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2b      	ldr	r2, [pc, #172]	; (800245c <TIM_Base_SetConfig+0x134>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2a      	ldr	r2, [pc, #168]	; (8002460 <TIM_Base_SetConfig+0x138>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <TIM_Base_SetConfig+0x11c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <TIM_Base_SetConfig+0x100>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <TIM_Base_SetConfig+0x128>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00f      	beq.n	8002428 <TIM_Base_SetConfig+0x100>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <TIM_Base_SetConfig+0x130>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00b      	beq.n	8002428 <TIM_Base_SetConfig+0x100>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <TIM_Base_SetConfig+0x134>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d007      	beq.n	8002428 <TIM_Base_SetConfig+0x100>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <TIM_Base_SetConfig+0x138>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <TIM_Base_SetConfig+0x100>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	615a      	str	r2, [r3, #20]
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40013400 	.word	0x40013400
 8002454:	40015000 	.word	0x40015000
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800

08002464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	2b84      	cmp	r3, #132	; 0x84
 80024b4:	d005      	beq.n	80024c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	3303      	adds	r3, #3
 80024c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d6:	f3ef 8305 	mrs	r3, IPSR
 80024da:	607b      	str	r3, [r7, #4]
  return(result);
 80024dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024f8:	f001 f8f0 	bl	80036dc <vTaskStartScheduler>
  
  return osOK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}

08002502 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002504:	b089      	sub	sp, #36	; 0x24
 8002506:	af04      	add	r7, sp, #16
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <osThreadCreate+0x54>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685c      	ldr	r4, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681d      	ldr	r5, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691e      	ldr	r6, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffb6 	bl	80024a0 <makeFreeRtosPriority>
 8002534:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800253e:	9202      	str	r2, [sp, #8]
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9100      	str	r1, [sp, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4632      	mov	r2, r6
 8002548:	4629      	mov	r1, r5
 800254a:	4620      	mov	r0, r4
 800254c:	f000 ff0b 	bl	8003366 <xTaskCreateStatic>
 8002550:	4603      	mov	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e01c      	b.n	8002590 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685c      	ldr	r4, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002562:	b29e      	uxth	r6, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff98 	bl	80024a0 <makeFreeRtosPriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4632      	mov	r2, r6
 800257e:	4629      	mov	r1, r5
 8002580:	4620      	mov	r0, r4
 8002582:	f000 ff49 	bl	8003418 <xTaskCreate>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <osDelay+0x16>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	e000      	b.n	80025b2 <osDelay+0x18>
 80025b0:	2301      	movs	r3, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 f85e 	bl	8003674 <vTaskDelay>
  
  return osOK;
 80025b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10b      	bne.n	80025f2 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	2303      	movs	r3, #3
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	2200      	movs	r2, #0
 80025e6:	2100      	movs	r1, #0
 80025e8:	2001      	movs	r0, #1
 80025ea:	f000 f9bd 	bl	8002968 <xQueueGenericCreateStatic>
 80025ee:	4603      	mov	r3, r0
 80025f0:	e016      	b.n	8002620 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e014      	b.n	8002620 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d110      	bne.n	800261e <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80025fc:	2203      	movs	r2, #3
 80025fe:	2100      	movs	r1, #0
 8002600:	2001      	movs	r0, #1
 8002602:	f000 fa23 	bl	8002a4c <xQueueGenericCreate>
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <osSemaphoreCreate+0x58>
 800260e:	2300      	movs	r3, #0
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fa75 	bl	8002b04 <xQueueGenericSend>
      return sema;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	e000      	b.n	8002620 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800261e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	e03a      	b.n	80026b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d103      	bne.n	8002654 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e009      	b.n	8002668 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <osSemaphoreWait+0x40>
      ticks = 1;
 8002664:	2301      	movs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002668:	f7ff ff32 	bl	80024d0 <inHandlerMode>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d017      	beq.n	80026a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	461a      	mov	r2, r3
 8002678:	2100      	movs	r1, #0
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fcce 	bl	800301c <xQueueReceiveFromISR>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <osSemaphoreWait+0x62>
      return osErrorOS;
 8002686:	23ff      	movs	r3, #255	; 0xff
 8002688:	e015      	b.n	80026b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d011      	beq.n	80026b4 <osSemaphoreWait+0x8c>
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <osSemaphoreWait+0x98>)
 8002692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	e008      	b.n	80026b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fbb1 	bl	8002e0c <xQueueSemaphoreTake>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80026b0:	23ff      	movs	r3, #255	; 0xff
 80026b2:	e000      	b.n	80026b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80026d4:	f7ff fefc 	bl	80024d0 <inHandlerMode>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb07 	bl	8002cf8 <xQueueGiveFromISR>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d001      	beq.n	80026f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80026f0:	23ff      	movs	r3, #255	; 0xff
 80026f2:	e017      	b.n	8002724 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d013      	beq.n	8002722 <osSemaphoreRelease+0x5e>
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <osSemaphoreRelease+0x68>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	e00a      	b.n	8002722 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800270c:	2300      	movs	r3, #0
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f9f6 	bl	8002b04 <xQueueGenericSend>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800271e:	23ff      	movs	r3, #255	; 0xff
 8002720:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0208 	add.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 0208 	add.w	r2, r3, #8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f103 0208 	add.w	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d103      	bne.n	80027f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e00c      	b.n	800280c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3308      	adds	r3, #8
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e002      	b.n	8002800 <vListInsert+0x2e>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d2f6      	bcs.n	80027fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6892      	ldr	r2, [r2, #8]
 800285a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6852      	ldr	r2, [r2, #4]
 8002864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d103      	bne.n	8002878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ac:	f04f 0320 	mov.w	r3, #32
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	e7fe      	b.n	80028be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80028c0:	f001 fe74 	bl	80045ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	441a      	add	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	3b01      	subs	r3, #1
 80028f2:	68f9      	ldr	r1, [r7, #12]
 80028f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	441a      	add	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d114      	bne.n	8002940 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01a      	beq.n	8002954 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3310      	adds	r3, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f91c 	bl	8003b60 <xTaskRemoveFromEventList>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <xQueueGenericReset+0xcc>)
 8002930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	e009      	b.n	8002954 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3310      	adds	r3, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fef3 	bl	8002730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3324      	adds	r3, #36	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff feee 	bl	8002730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002954:	f001 fe58 	bl	8004608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002958:	2301      	movs	r3, #1
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000ed04 	.word	0xe000ed04

08002968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08e      	sub	sp, #56	; 0x38
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <xQueueGenericCreateStatic+0x28>
 800297c:	f04f 0320 	mov.w	r3, #32
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
 800298e:	e7fe      	b.n	800298e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <xQueueGenericCreateStatic+0x42>
 8002996:	f04f 0320 	mov.w	r3, #32
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <xQueueGenericCreateStatic+0x4e>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <xQueueGenericCreateStatic+0x52>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <xQueueGenericCreateStatic+0x54>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <xQueueGenericCreateStatic+0x6c>
 80029c0:	f04f 0320 	mov.w	r3, #32
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	e7fe      	b.n	80029d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <xQueueGenericCreateStatic+0x78>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <xQueueGenericCreateStatic+0x7c>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <xQueueGenericCreateStatic+0x7e>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <xQueueGenericCreateStatic+0x96>
 80029ea:	f04f 0320 	mov.w	r3, #32
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029fe:	2348      	movs	r3, #72	; 0x48
 8002a00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b48      	cmp	r3, #72	; 0x48
 8002a06:	d009      	beq.n	8002a1c <xQueueGenericCreateStatic+0xb4>
 8002a08:	f04f 0320 	mov.w	r3, #32
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e7fe      	b.n	8002a1a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f842 	bl	8002ac6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3730      	adds	r7, #48	; 0x30
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <xQueueGenericCreate+0x28>
 8002a60:	f04f 0320 	mov.w	r3, #32
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e7fe      	b.n	8002a72 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e004      	b.n	8002a8a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3348      	adds	r3, #72	; 0x48
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fea6 	bl	80047e0 <pvPortMalloc>
 8002a94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00f      	beq.n	8002abc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	3348      	adds	r3, #72	; 0x48
 8002aa0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aaa:	79fa      	ldrb	r2, [r7, #7]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f805 	bl	8002ac6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002abc:	69bb      	ldr	r3, [r7, #24]
	}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e002      	b.n	8002ae8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002af4:	2101      	movs	r1, #1
 8002af6:	69b8      	ldr	r0, [r7, #24]
 8002af8:	f7ff fece 	bl	8002898 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	; 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <xQueueGenericSend+0x30>
 8002b20:	f04f 0320 	mov.w	r3, #32
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b32:	e7fe      	b.n	8002b32 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSend+0x3e>
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSend+0x42>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSend+0x44>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <xQueueGenericSend+0x5c>
 8002b4c:	f04f 0320 	mov.w	r3, #32
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d103      	bne.n	8002b6e <xQueueGenericSend+0x6a>
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <xQueueGenericSend+0x6e>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <xQueueGenericSend+0x70>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <xQueueGenericSend+0x88>
 8002b78:	f04f 0320 	mov.w	r3, #32
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	e7fe      	b.n	8002b8a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b8c:	f001 f9a4 	bl	8003ed8 <xTaskGetSchedulerState>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <xQueueGenericSend+0x98>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <xQueueGenericSend+0x9c>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <xQueueGenericSend+0x9e>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <xQueueGenericSend+0xb6>
 8002ba6:	f04f 0320 	mov.w	r3, #32
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bba:	f001 fcf7 	bl	80045ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <xQueueGenericSend+0xcc>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d129      	bne.n	8002c24 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd6:	f000 fab6 	bl	8003146 <prvCopyDataToQueue>
 8002bda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 ffb9 	bl	8003b60 <xTaskRemoveFromEventList>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <xQueueGenericSend+0x1f0>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	e00a      	b.n	8002c1c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <xQueueGenericSend+0x1f0>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c1c:	f001 fcf4 	bl	8004608 <vPortExitCritical>
				return pdPASS;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e063      	b.n	8002cec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c2a:	f001 fced 	bl	8004608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e05c      	b.n	8002cec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fff1 	bl	8003c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c46:	f001 fcdf 	bl	8004608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c4a:	f000 fda5 	bl	8003798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c4e:	f001 fcad 	bl	80045ac <vPortEnterCritical>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d103      	bne.n	8002c68 <xQueueGenericSend+0x164>
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x17a>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c7e:	f001 fcc3 	bl	8004608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c82:	1d3a      	adds	r2, r7, #4
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 ffe0 	bl	8003c50 <xTaskCheckForTimeOut>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d124      	bne.n	8002ce0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c98:	f000 fb4d 	bl	8003336 <prvIsQueueFull>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 ff34 	bl	8003b18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb2:	f000 fad8 	bl	8003266 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cb6:	f000 fd7d 	bl	80037b4 <xTaskResumeAll>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f47f af7c 	bne.w	8002bba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <xQueueGenericSend+0x1f0>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	e772      	b.n	8002bba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd6:	f000 fac6 	bl	8003266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cda:	f000 fd6b 	bl	80037b4 <xTaskResumeAll>
 8002cde:	e76c      	b.n	8002bba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 fac0 	bl	8003266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ce6:	f000 fd65 	bl	80037b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cea:	2300      	movs	r3, #0
		}
	}
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08e      	sub	sp, #56	; 0x38
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <xQueueGiveFromISR+0x28>
 8002d0c:	f04f 0320 	mov.w	r3, #32
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	e7fe      	b.n	8002d1e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <xQueueGiveFromISR+0x44>
 8002d28:	f04f 0320 	mov.w	r3, #32
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e7fe      	b.n	8002d3a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <xQueueGiveFromISR+0x54>
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <xQueueGiveFromISR+0x58>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <xQueueGiveFromISR+0x5a>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <xQueueGiveFromISR+0x72>
 8002d56:	f04f 0320 	mov.w	r3, #32
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e7fe      	b.n	8002d68 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d6a:	f001 fcfb 	bl	8004764 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d72:	f04f 0320 	mov.w	r3, #32
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617a      	str	r2, [r7, #20]
 8002d84:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d22b      	bcs.n	8002df2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d112      	bne.n	8002ddc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	3324      	adds	r3, #36	; 0x24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fecc 	bl	8003b60 <xTaskRemoveFromEventList>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e007      	b.n	8002dec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dec:	2301      	movs	r3, #1
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	e001      	b.n	8002df6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3738      	adds	r7, #56	; 0x38
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8002e28:	f04f 0320 	mov.w	r3, #32
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	623b      	str	r3, [r7, #32]
 8002e3a:	e7fe      	b.n	8002e3a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <xQueueSemaphoreTake+0x4c>
 8002e44:	f04f 0320 	mov.w	r3, #32
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e7fe      	b.n	8002e56 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e58:	f001 f83e 	bl	8003ed8 <xTaskGetSchedulerState>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <xQueueSemaphoreTake+0x5c>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <xQueueSemaphoreTake+0x60>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <xQueueSemaphoreTake+0x62>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <xQueueSemaphoreTake+0x7a>
 8002e72:	f04f 0320 	mov.w	r3, #32
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e7fe      	b.n	8002e84 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e86:	f001 fb91 	bl	80045ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d024      	beq.n	8002ee0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002ea6:	f001 f9dd 	bl	8004264 <pvTaskIncrementMutexHeldCount>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00f      	beq.n	8002ed8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	3310      	adds	r3, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fe4f 	bl	8003b60 <xTaskRemoveFromEventList>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <xQueueSemaphoreTake+0x20c>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ed8:	f001 fb96 	bl	8004608 <vPortExitCritical>
				return pdPASS;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e096      	b.n	800300e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d110      	bne.n	8002f08 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <xQueueSemaphoreTake+0xf4>
 8002eec:	f04f 0320 	mov.w	r3, #32
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e7fe      	b.n	8002efe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f00:	f001 fb82 	bl	8004608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e082      	b.n	800300e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fe86 	bl	8003c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f1c:	f001 fb74 	bl	8004608 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f20:	f000 fc3a 	bl	8003798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f24:	f001 fb42 	bl	80045ac <vPortEnterCritical>
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d103      	bne.n	8002f3e <xQueueSemaphoreTake+0x132>
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d103      	bne.n	8002f54 <xQueueSemaphoreTake+0x148>
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f54:	f001 fb58 	bl	8004608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f58:	463a      	mov	r2, r7
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe75 	bl	8003c50 <xTaskCheckForTimeOut>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d132      	bne.n	8002fd2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f6e:	f000 f9cc 	bl	800330a <prvIsQueueEmpty>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d026      	beq.n	8002fc6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002f80:	f001 fb14 	bl	80045ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ffc3 	bl	8003f14 <xTaskPriorityInherit>
 8002f8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002f90:	f001 fb3a 	bl	8004608 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	3324      	adds	r3, #36	; 0x24
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fdbb 	bl	8003b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fa4:	f000 f95f 	bl	8003266 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fa8:	f000 fc04 	bl	80037b4 <xTaskResumeAll>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f47f af69 	bne.w	8002e86 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <xQueueSemaphoreTake+0x20c>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	e75f      	b.n	8002e86 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc8:	f000 f94d 	bl	8003266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fcc:	f000 fbf2 	bl	80037b4 <xTaskResumeAll>
 8002fd0:	e759      	b.n	8002e86 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fd4:	f000 f947 	bl	8003266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fd8:	f000 fbec 	bl	80037b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fde:	f000 f994 	bl	800330a <prvIsQueueEmpty>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f43f af4e 	beq.w	8002e86 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002ff0:	f001 fadc 	bl	80045ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff6:	f000 f88e 	bl	8003116 <prvGetDisinheritPriorityAfterTimeout>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003002:	4618      	mov	r0, r3
 8003004:	f001 f890 	bl	8004128 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003008:	f001 fafe 	bl	8004608 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800300c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800300e:	4618      	mov	r0, r3
 8003010:	3738      	adds	r7, #56	; 0x38
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08e      	sub	sp, #56	; 0x38
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <xQueueReceiveFromISR+0x2a>
 8003032:	f04f 0320 	mov.w	r3, #32
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	e7fe      	b.n	8003044 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <xQueueReceiveFromISR+0x38>
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <xQueueReceiveFromISR+0x3c>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <xQueueReceiveFromISR+0x3e>
 8003058:	2300      	movs	r3, #0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <xQueueReceiveFromISR+0x56>
 800305e:	f04f 0320 	mov.w	r3, #32
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	e7fe      	b.n	8003070 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003072:	f001 fb77 	bl	8004764 <vPortValidateInterruptPriority>
	__asm volatile
 8003076:	f3ef 8211 	mrs	r2, BASEPRI
 800307a:	f04f 0320 	mov.w	r3, #32
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	61ba      	str	r2, [r7, #24]
 800308c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800308e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02f      	beq.n	80030fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ac:	f000 f8b5 	bl	800321a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	1e5a      	subs	r2, r3, #1
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d112      	bne.n	80030e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	3310      	adds	r3, #16
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd46 	bl	8003b60 <xTaskRemoveFromEventList>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00e      	beq.n	80030f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e007      	b.n	80030f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ec:	3301      	adds	r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	b25a      	sxtb	r2, r3
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80030f8:	2301      	movs	r3, #1
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
 80030fc:	e001      	b.n	8003102 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80030fe:	2300      	movs	r3, #0
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800310e:	4618      	mov	r0, r3
 8003110:	3738      	adds	r7, #56	; 0x38
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1c3 0307 	rsb	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e001      	b.n	8003138 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003138:	68fb      	ldr	r3, [r7, #12]
	}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d14d      	bne.n	8003208 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ff55 	bl	8004020 <xTaskPriorityDisinherit>
 8003176:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	e043      	b.n	8003208 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6898      	ldr	r0, [r3, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	461a      	mov	r2, r3
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	f001 fd1f 	bl	8004bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d32b      	bcc.n	8003208 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e026      	b.n	8003208 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68d8      	ldr	r0, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	461a      	mov	r2, r3
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	f001 fd05 	bl	8004bd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	425b      	negs	r3, r3
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d207      	bcs.n	80031f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	425b      	negs	r3, r3
 80031f0:	441a      	add	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d105      	bne.n	8003208 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3b01      	subs	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003210:	697b      	ldr	r3, [r7, #20]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d018      	beq.n	800325e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d303      	bcc.n	800324e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	461a      	mov	r2, r3
 8003258:	6838      	ldr	r0, [r7, #0]
 800325a:	f001 fcbb 	bl	8004bd4 <memcpy>
	}
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800326e:	f001 f99d 	bl	80045ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003278:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800327a:	e011      	b.n	80032a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fc69 	bl	8003b60 <xTaskRemoveFromEventList>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003294:	f000 fd3c 	bl	8003d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	3b01      	subs	r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	dce9      	bgt.n	800327c <prvUnlockQueue+0x16>
 80032a8:	e000      	b.n	80032ac <prvUnlockQueue+0x46>
					break;
 80032aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032b4:	f001 f9a8 	bl	8004608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032b8:	f001 f978 	bl	80045ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c4:	e011      	b.n	80032ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3310      	adds	r3, #16
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fc44 	bl	8003b60 <xTaskRemoveFromEventList>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032de:	f000 fd17 	bl	8003d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032e2:	7bbb      	ldrb	r3, [r7, #14]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	dce9      	bgt.n	80032c6 <prvUnlockQueue+0x60>
 80032f2:	e000      	b.n	80032f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032fe:	f001 f983 	bl	8004608 <vPortExitCritical>
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003312:	f001 f94b 	bl	80045ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e001      	b.n	8003328 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003328:	f001 f96e 	bl	8004608 <vPortExitCritical>

	return xReturn;
 800332c:	68fb      	ldr	r3, [r7, #12]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800333e:	f001 f935 	bl	80045ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	429a      	cmp	r2, r3
 800334c:	d102      	bne.n	8003354 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e001      	b.n	8003358 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003358:	f001 f956 	bl	8004608 <vPortExitCritical>

	return xReturn;
 800335c:	68fb      	ldr	r3, [r7, #12]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08e      	sub	sp, #56	; 0x38
 800336a:	af04      	add	r7, sp, #16
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <xTaskCreateStatic+0x28>
	__asm volatile
 800337a:	f04f 0320 	mov.w	r3, #32
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	e7fe      	b.n	800338c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <xTaskCreateStatic+0x42>
 8003394:	f04f 0320 	mov.w	r3, #32
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e7fe      	b.n	80033a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033a8:	2354      	movs	r3, #84	; 0x54
 80033aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b54      	cmp	r3, #84	; 0x54
 80033b0:	d009      	beq.n	80033c6 <xTaskCreateStatic+0x60>
 80033b2:	f04f 0320 	mov.w	r3, #32
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e7fe      	b.n	80033c4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <xTaskCreateStatic+0xa4>
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01b      	beq.n	800340a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033e4:	2300      	movs	r3, #0
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f850 	bl	80034a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003404:	f000 f8cc 	bl	80035a0 <prvAddNewTaskToReadyList>
 8003408:	e001      	b.n	800340e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800340e:	697b      	ldr	r3, [r7, #20]
	}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af04      	add	r7, sp, #16
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f001 f9d7 	bl	80047e0 <pvPortMalloc>
 8003432:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800343a:	2054      	movs	r0, #84	; 0x54
 800343c:	f001 f9d0 	bl	80047e0 <pvPortMalloc>
 8003440:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	e005      	b.n	800345c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f001 fa87 	bl	8004964 <vPortFree>
 8003456:	e001      	b.n	800345c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	2300      	movs	r3, #0
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f80e 	bl	80034a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003486:	69f8      	ldr	r0, [r7, #28]
 8003488:	f000 f88a 	bl	80035a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800348c:	2301      	movs	r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e002      	b.n	8003498 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003498:	69bb      	ldr	r3, [r7, #24]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034ba:	3b01      	subs	r3, #1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f023 0307 	bic.w	r3, r3, #7
 80034c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <prvInitialiseNewTask+0x46>
 80034d4:	f04f 0320 	mov.w	r3, #32
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e7fe      	b.n	80034e6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e012      	b.n	8003514 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	7819      	ldrb	r1, [r3, #0]
 80034f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	3334      	adds	r3, #52	; 0x34
 80034fe:	460a      	mov	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d9e9      	bls.n	80034ee <prvInitialiseNewTask+0x4c>
 800351a:	e000      	b.n	800351e <prvInitialiseNewTask+0x7c>
		{
			break;
 800351c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2b06      	cmp	r3, #6
 800352a:	d901      	bls.n	8003530 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800352c:	2306      	movs	r3, #6
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	2200      	movs	r2, #0
 8003540:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f912 	bl	8002770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	3318      	adds	r3, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f90d 	bl	8002770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	f1c3 0207 	rsb	r2, r3, #7
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	2200      	movs	r2, #0
 8003570:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	69b8      	ldr	r0, [r7, #24]
 8003580:	f000 feea 	bl	8004358 <pxPortInitialiseStack>
 8003584:	4602      	mov	r2, r0
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003596:	bf00      	nop
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035a8:	f001 f800 	bl	80045ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035ac:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <prvAddNewTaskToReadyList+0xb8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a29      	ldr	r2, [pc, #164]	; (8003658 <prvAddNewTaskToReadyList+0xb8>)
 80035b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035be:	4a27      	ldr	r2, [pc, #156]	; (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035c4:	4b24      	ldr	r3, [pc, #144]	; (8003658 <prvAddNewTaskToReadyList+0xb8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d110      	bne.n	80035ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035cc:	f000 fbc4 	bl	8003d58 <prvInitialiseTaskLists>
 80035d0:	e00d      	b.n	80035ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <prvAddNewTaskToReadyList+0xc0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d802      	bhi.n	80035ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4a15      	ldr	r2, [pc, #84]	; (800366c <prvAddNewTaskToReadyList+0xcc>)
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7ff f8b2 	bl	800278a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003626:	f000 ffef 	bl	8004608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <prvAddNewTaskToReadyList+0xc0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00e      	beq.n	8003650 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <prvAddNewTaskToReadyList+0xbc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	429a      	cmp	r2, r3
 800363e:	d207      	bcs.n	8003650 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <prvAddNewTaskToReadyList+0xd0>)
 8003642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000380 	.word	0x20000380
 800365c:	20000280 	.word	0x20000280
 8003660:	2000038c 	.word	0x2000038c
 8003664:	2000039c 	.word	0x2000039c
 8003668:	20000388 	.word	0x20000388
 800366c:	20000284 	.word	0x20000284
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <vTaskDelay+0x60>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <vTaskDelay+0x2e>
 800368e:	f04f 0320 	mov.w	r3, #32
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	e7fe      	b.n	80036a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80036a2:	f000 f879 	bl	8003798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fdef 	bl	800428c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036ae:	f000 f881 	bl	80037b4 <xTaskResumeAll>
 80036b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <vTaskDelay+0x64>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200003a8 	.word	0x200003a8
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ea:	463a      	mov	r2, r7
 80036ec:	1d39      	adds	r1, r7, #4
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fd74 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	460a      	mov	r2, r1
 800370a:	491d      	ldr	r1, [pc, #116]	; (8003780 <vTaskStartScheduler+0xa4>)
 800370c:	481d      	ldr	r0, [pc, #116]	; (8003784 <vTaskStartScheduler+0xa8>)
 800370e:	f7ff fe2a 	bl	8003366 <xTaskCreateStatic>
 8003712:	4602      	mov	r2, r0
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <vTaskStartScheduler+0xac>)
 8003716:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <vTaskStartScheduler+0xac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e001      	b.n	800372a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d115      	bne.n	800375c <vTaskStartScheduler+0x80>
 8003730:	f04f 0320 	mov.w	r3, #32
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <vTaskStartScheduler+0xb0>)
 8003744:	f04f 32ff 	mov.w	r2, #4294967295
 8003748:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <vTaskStartScheduler+0xb4>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <vTaskStartScheduler+0xb8>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003756:	f000 fe8b 	bl	8004470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800375a:	e00d      	b.n	8003778 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d109      	bne.n	8003778 <vTaskStartScheduler+0x9c>
 8003764:	f04f 0320 	mov.w	r3, #32
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e7fe      	b.n	8003776 <vTaskStartScheduler+0x9a>
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	08004c5c 	.word	0x08004c5c
 8003784:	08003d29 	.word	0x08003d29
 8003788:	200003a4 	.word	0x200003a4
 800378c:	200003a0 	.word	0x200003a0
 8003790:	2000038c 	.word	0x2000038c
 8003794:	20000384 	.word	0x20000384

08003798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <vTaskSuspendAll+0x18>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a03      	ldr	r2, [pc, #12]	; (80037b0 <vTaskSuspendAll+0x18>)
 80037a4:	6013      	str	r3, [r2, #0]
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	200003a8 	.word	0x200003a8

080037b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037c2:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <xTaskResumeAll+0x114>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <xTaskResumeAll+0x2a>
 80037ca:	f04f 0320 	mov.w	r3, #32
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	e7fe      	b.n	80037dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037de:	f000 fee5 	bl	80045ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037e2:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <xTaskResumeAll+0x114>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <xTaskResumeAll+0x114>)
 80037ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <xTaskResumeAll+0x114>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d161      	bne.n	80038b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <xTaskResumeAll+0x118>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05d      	beq.n	80038b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037fc:	e02e      	b.n	800385c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037fe:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <xTaskResumeAll+0x11c>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3318      	adds	r3, #24
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f81a 	bl	8002844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f815 	bl	8002844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	409a      	lsls	r2, r3
 8003822:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <xTaskResumeAll+0x120>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <xTaskResumeAll+0x120>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <xTaskResumeAll+0x124>)
 800383a:	441a      	add	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7fe ffa1 	bl	800278a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <xTaskResumeAll+0x128>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <xTaskResumeAll+0x12c>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <xTaskResumeAll+0x11c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1cc      	bne.n	80037fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800386a:	f000 fb0f 	bl	8003e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <xTaskResumeAll+0x130>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d010      	beq.n	800389c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800387a:	f000 f837 	bl	80038ec <xTaskIncrementTick>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <xTaskResumeAll+0x12c>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3b01      	subs	r3, #1
 800388e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f1      	bne.n	800387a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <xTaskResumeAll+0x130>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <xTaskResumeAll+0x12c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <xTaskResumeAll+0x134>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038b8:	f000 fea6 	bl	8004608 <vPortExitCritical>

	return xAlreadyYielded;
 80038bc:	68bb      	ldr	r3, [r7, #8]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200003a8 	.word	0x200003a8
 80038cc:	20000380 	.word	0x20000380
 80038d0:	20000340 	.word	0x20000340
 80038d4:	20000388 	.word	0x20000388
 80038d8:	20000284 	.word	0x20000284
 80038dc:	20000280 	.word	0x20000280
 80038e0:	20000394 	.word	0x20000394
 80038e4:	20000390 	.word	0x20000390
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f6:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <xTaskIncrementTick+0x14c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 808c 	bne.w	8003a18 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003900:	4b4e      	ldr	r3, [pc, #312]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <xTaskIncrementTick+0x150>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11f      	bne.n	8003954 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003914:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <xTaskIncrementTick+0x46>
 800391e:	f04f 0320 	mov.w	r3, #32
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	e7fe      	b.n	8003930 <xTaskIncrementTick+0x44>
 8003932:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <xTaskIncrementTick+0x158>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a40      	ldr	r2, [pc, #256]	; (8003a40 <xTaskIncrementTick+0x154>)
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <xTaskIncrementTick+0x158>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <xTaskIncrementTick+0x15c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <xTaskIncrementTick+0x15c>)
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	f000 fa9c 	bl	8003e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003954:	4b3d      	ldr	r3, [pc, #244]	; (8003a4c <xTaskIncrementTick+0x160>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	429a      	cmp	r2, r3
 800395c:	d34d      	bcc.n	80039fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800395e:	4b38      	ldr	r3, [pc, #224]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <xTaskIncrementTick+0x80>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <xTaskIncrementTick+0x82>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <xTaskIncrementTick+0x160>)
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	601a      	str	r2, [r3, #0]
					break;
 800397a:	e03e      	b.n	80039fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800397c:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <xTaskIncrementTick+0x154>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d203      	bcs.n	800399c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <xTaskIncrementTick+0x160>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
						break;
 800399a:	e02e      	b.n	80039fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ff4f 	bl	8002844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3318      	adds	r3, #24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ff46 	bl	8002844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <xTaskIncrementTick+0x164>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <xTaskIncrementTick+0x164>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <xTaskIncrementTick+0x168>)
 80039d8:	441a      	add	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fe fed2 	bl	800278a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <xTaskIncrementTick+0x16c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3b4      	bcc.n	800395e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f8:	e7b1      	b.n	800395e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <xTaskIncrementTick+0x16c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4914      	ldr	r1, [pc, #80]	; (8003a54 <xTaskIncrementTick+0x168>)
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d907      	bls.n	8003a22 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e004      	b.n	8003a22 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <xTaskIncrementTick+0x170>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <xTaskIncrementTick+0x170>)
 8003a20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a22:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <xTaskIncrementTick+0x174>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a2e:	697b      	ldr	r3, [r7, #20]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	200003a8 	.word	0x200003a8
 8003a3c:	20000384 	.word	0x20000384
 8003a40:	20000338 	.word	0x20000338
 8003a44:	2000033c 	.word	0x2000033c
 8003a48:	20000398 	.word	0x20000398
 8003a4c:	200003a0 	.word	0x200003a0
 8003a50:	20000388 	.word	0x20000388
 8003a54:	20000284 	.word	0x20000284
 8003a58:	20000280 	.word	0x20000280
 8003a5c:	20000390 	.word	0x20000390
 8003a60:	20000394 	.word	0x20000394

08003a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a6a:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <vTaskSwitchContext+0xa0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <vTaskSwitchContext+0xa4>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a78:	e03e      	b.n	8003af8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <vTaskSwitchContext+0xa4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <vTaskSwitchContext+0xa8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f1c3 031f 	rsb	r3, r3, #31
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	491e      	ldr	r1, [pc, #120]	; (8003b10 <vTaskSwitchContext+0xac>)
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <vTaskSwitchContext+0x5a>
	__asm volatile
 8003aaa:	f04f 0320 	mov.w	r3, #32
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e7fe      	b.n	8003abc <vTaskSwitchContext+0x58>
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <vTaskSwitchContext+0xac>)
 8003aca:	4413      	add	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d104      	bne.n	8003aee <vTaskSwitchContext+0x8a>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <vTaskSwitchContext+0xb0>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	200003a8 	.word	0x200003a8
 8003b08:	20000394 	.word	0x20000394
 8003b0c:	20000388 	.word	0x20000388
 8003b10:	20000284 	.word	0x20000284
 8003b14:	20000280 	.word	0x20000280

08003b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <vTaskPlaceOnEventList+0x24>
 8003b28:	f04f 0320 	mov.w	r3, #32
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e7fe      	b.n	8003b3a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <vTaskPlaceOnEventList+0x44>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3318      	adds	r3, #24
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fe fe44 	bl	80027d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	6838      	ldr	r0, [r7, #0]
 8003b4e:	f000 fb9d 	bl	800428c <prvAddCurrentTaskToDelayedList>
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000280 	.word	0x20000280

08003b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <xTaskRemoveFromEventList+0x2a>
 8003b76:	f04f 0320 	mov.w	r3, #32
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e7fe      	b.n	8003b88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3318      	adds	r3, #24
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fe58 	bl	8002844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <xTaskRemoveFromEventList+0xac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11c      	bne.n	8003bd6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fe4f 	bl	8002844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	2201      	movs	r2, #1
 8003bac:	409a      	lsls	r2, r3
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <xTaskRemoveFromEventList+0xb0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <xTaskRemoveFromEventList+0xb0>)
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <xTaskRemoveFromEventList+0xb4>)
 8003bc6:	441a      	add	r2, r3
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7fe fddb 	bl	800278a <vListInsertEnd>
 8003bd4:	e005      	b.n	8003be2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3318      	adds	r3, #24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	480e      	ldr	r0, [pc, #56]	; (8003c18 <xTaskRemoveFromEventList+0xb8>)
 8003bde:	f7fe fdd4 	bl	800278a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <xTaskRemoveFromEventList+0xbc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d905      	bls.n	8003bfc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <xTaskRemoveFromEventList+0xc0>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e001      	b.n	8003c00 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003c00:	697b      	ldr	r3, [r7, #20]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200003a8 	.word	0x200003a8
 8003c10:	20000388 	.word	0x20000388
 8003c14:	20000284 	.word	0x20000284
 8003c18:	20000340 	.word	0x20000340
 8003c1c:	20000280 	.word	0x20000280
 8003c20:	20000394 	.word	0x20000394

08003c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <vTaskInternalSetTimeOutState+0x24>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <vTaskInternalSetTimeOutState+0x28>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	605a      	str	r2, [r3, #4]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	20000398 	.word	0x20000398
 8003c4c:	20000384 	.word	0x20000384

08003c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <xTaskCheckForTimeOut+0x24>
 8003c60:	f04f 0320 	mov.w	r3, #32
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e7fe      	b.n	8003c72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <xTaskCheckForTimeOut+0x3e>
 8003c7a:	f04f 0320 	mov.w	r3, #32
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e7fe      	b.n	8003c8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003c8e:	f000 fc8d 	bl	80045ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <xTaskCheckForTimeOut+0xb8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d102      	bne.n	8003cb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	e023      	b.n	8003cfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <xTaskCheckForTimeOut+0xbc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d007      	beq.n	8003cce <xTaskCheckForTimeOut+0x7e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d302      	bcc.n	8003cce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e015      	b.n	8003cfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d20b      	bcs.n	8003cf0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff9d 	bl	8003c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e004      	b.n	8003cfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cfa:	f000 fc85 	bl	8004608 <vPortExitCritical>

	return xReturn;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000384 	.word	0x20000384
 8003d0c:	20000398 	.word	0x20000398

08003d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <vTaskMissedYield+0x14>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	20000394 	.word	0x20000394

08003d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d30:	f000 f852 	bl	8003dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <prvIdleTask+0x28>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d9f9      	bls.n	8003d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <prvIdleTask+0x2c>)
 8003d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d4c:	e7f0      	b.n	8003d30 <prvIdleTask+0x8>
 8003d4e:	bf00      	nop
 8003d50:	20000284 	.word	0x20000284
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	e00c      	b.n	8003d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <prvInitialiseTaskLists+0x60>)
 8003d70:	4413      	add	r3, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fcdc 	bl	8002730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d9ef      	bls.n	8003d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d84:	480d      	ldr	r0, [pc, #52]	; (8003dbc <prvInitialiseTaskLists+0x64>)
 8003d86:	f7fe fcd3 	bl	8002730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d8a:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <prvInitialiseTaskLists+0x68>)
 8003d8c:	f7fe fcd0 	bl	8002730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d90:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <prvInitialiseTaskLists+0x6c>)
 8003d92:	f7fe fccd 	bl	8002730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d96:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <prvInitialiseTaskLists+0x70>)
 8003d98:	f7fe fcca 	bl	8002730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d9c:	480b      	ldr	r0, [pc, #44]	; (8003dcc <prvInitialiseTaskLists+0x74>)
 8003d9e:	f7fe fcc7 	bl	8002730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <prvInitialiseTaskLists+0x78>)
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <prvInitialiseTaskLists+0x64>)
 8003da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <prvInitialiseTaskLists+0x7c>)
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <prvInitialiseTaskLists+0x68>)
 8003dac:	601a      	str	r2, [r3, #0]
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000284 	.word	0x20000284
 8003dbc:	20000310 	.word	0x20000310
 8003dc0:	20000324 	.word	0x20000324
 8003dc4:	20000340 	.word	0x20000340
 8003dc8:	20000354 	.word	0x20000354
 8003dcc:	2000036c 	.word	0x2000036c
 8003dd0:	20000338 	.word	0x20000338
 8003dd4:	2000033c 	.word	0x2000033c

08003dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dde:	e019      	b.n	8003e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003de0:	f000 fbe4 	bl	80045ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <prvCheckTasksWaitingTermination+0x4c>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fd27 	bl	8002844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <prvCheckTasksWaitingTermination+0x50>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <prvCheckTasksWaitingTermination+0x50>)
 8003dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <prvCheckTasksWaitingTermination+0x54>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <prvCheckTasksWaitingTermination+0x54>)
 8003e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e0a:	f000 fbfd 	bl	8004608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f80e 	bl	8003e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <prvCheckTasksWaitingTermination+0x54>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e1      	bne.n	8003de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000354 	.word	0x20000354
 8003e28:	20000380 	.word	0x20000380
 8003e2c:	20000368 	.word	0x20000368

08003e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fd8c 	bl	8004964 <vPortFree>
				vPortFree( pxTCB );
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fd89 	bl	8004964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e52:	e017      	b.n	8003e84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d103      	bne.n	8003e66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fd80 	bl	8004964 <vPortFree>
	}
 8003e64:	e00e      	b.n	8003e84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d009      	beq.n	8003e84 <prvDeleteTCB+0x54>
 8003e70:	f04f 0320 	mov.w	r3, #32
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e7fe      	b.n	8003e82 <prvDeleteTCB+0x52>
	}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <prvResetNextTaskUnblockTime+0x44>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <prvResetNextTaskUnblockTime+0x14>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <prvResetNextTaskUnblockTime+0x16>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <prvResetNextTaskUnblockTime+0x48>)
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eae:	e008      	b.n	8003ec2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <prvResetNextTaskUnblockTime+0x44>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <prvResetNextTaskUnblockTime+0x48>)
 8003ec0:	6013      	str	r3, [r2, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000338 	.word	0x20000338
 8003ed4:	200003a0 	.word	0x200003a0

08003ed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <xTaskGetSchedulerState+0x34>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	e008      	b.n	8003efe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <xTaskGetSchedulerState+0x38>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	e001      	b.n	8003efe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003efe:	687b      	ldr	r3, [r7, #4]
	}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	2000038c 	.word	0x2000038c
 8003f10:	200003a8 	.word	0x200003a8

08003f14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06e      	beq.n	8004008 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <xTaskPriorityInherit+0x100>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d25e      	bcs.n	8003ff6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db06      	blt.n	8003f4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f40:	4b34      	ldr	r3, [pc, #208]	; (8004014 <xTaskPriorityInherit+0x100>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	f1c3 0207 	rsb	r2, r3, #7
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6959      	ldr	r1, [r3, #20]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <xTaskPriorityInherit+0x104>)
 8003f60:	4413      	add	r3, r2
 8003f62:	4299      	cmp	r1, r3
 8003f64:	d101      	bne.n	8003f6a <xTaskPriorityInherit+0x56>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xTaskPriorityInherit+0x58>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d03a      	beq.n	8003fe6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fc65 	bl	8002844 <uxListRemove>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4924      	ldr	r1, [pc, #144]	; (8004018 <xTaskPriorityInherit+0x104>)
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <xTaskPriorityInherit+0x98>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43da      	mvns	r2, r3
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <xTaskPriorityInherit+0x108>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <xTaskPriorityInherit+0x108>)
 8003faa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <xTaskPriorityInherit+0x100>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	2201      	movs	r2, #1
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <xTaskPriorityInherit+0x108>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	4a15      	ldr	r2, [pc, #84]	; (800401c <xTaskPriorityInherit+0x108>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <xTaskPriorityInherit+0x104>)
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f7fe fbd3 	bl	800278a <vListInsertEnd>
 8003fe4:	e004      	b.n	8003ff0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <xTaskPriorityInherit+0x100>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e008      	b.n	8004008 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <xTaskPriorityInherit+0x100>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	429a      	cmp	r2, r3
 8004002:	d201      	bcs.n	8004008 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004008:	68fb      	ldr	r3, [r7, #12]
	}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000280 	.word	0x20000280
 8004018:	20000284 	.word	0x20000284
 800401c:	20000388 	.word	0x20000388

08004020 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d06c      	beq.n	8004110 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004036:	4b39      	ldr	r3, [pc, #228]	; (800411c <xTaskPriorityDisinherit+0xfc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d009      	beq.n	8004054 <xTaskPriorityDisinherit+0x34>
 8004040:	f04f 0320 	mov.w	r3, #32
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e7fe      	b.n	8004052 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <xTaskPriorityDisinherit+0x50>
 800405c:	f04f 0320 	mov.w	r3, #32
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	e7fe      	b.n	800406e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	429a      	cmp	r2, r3
 8004084:	d044      	beq.n	8004110 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	2b00      	cmp	r3, #0
 800408c:	d140      	bne.n	8004110 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3304      	adds	r3, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fbd6 	bl	8002844 <uxListRemove>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	491f      	ldr	r1, [pc, #124]	; (8004120 <xTaskPriorityDisinherit+0x100>)
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xTaskPriorityDisinherit+0xaa>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2201      	movs	r2, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <xTaskPriorityDisinherit+0x104>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4013      	ands	r3, r2
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <xTaskPriorityDisinherit+0x104>)
 80040c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f1c3 0207 	rsb	r2, r3, #7
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	2201      	movs	r2, #1
 80040e4:	409a      	lsls	r2, r3
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <xTaskPriorityDisinherit+0x104>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <xTaskPriorityDisinherit+0x104>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <xTaskPriorityDisinherit+0x100>)
 80040fe:	441a      	add	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7fe fb3f 	bl	800278a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004110:	697b      	ldr	r3, [r7, #20]
	}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000280 	.word	0x20000280
 8004120:	20000284 	.word	0x20000284
 8004124:	20000388 	.word	0x20000388

08004128 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004136:	2301      	movs	r3, #1
 8004138:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8086 	beq.w	800424e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800414a:	f04f 0320 	mov.w	r3, #32
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e7fe      	b.n	800415c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d902      	bls.n	800416e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e002      	b.n	8004174 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	429a      	cmp	r2, r3
 800417c:	d067      	beq.n	800424e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	429a      	cmp	r2, r3
 8004186:	d162      	bne.n	800424e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d109      	bne.n	80041a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004192:	f04f 0320 	mov.w	r3, #32
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	e7fe      	b.n	80041a4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db04      	blt.n	80041c4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f1c3 0207 	rsb	r2, r3, #7
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	6959      	ldr	r1, [r3, #20]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a22      	ldr	r2, [pc, #136]	; (800425c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80041d4:	4413      	add	r3, r2
 80041d6:	4299      	cmp	r1, r3
 80041d8:	d101      	bne.n	80041de <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d034      	beq.n	800424e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fb2b 	bl	8002844 <uxListRemove>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d115      	bne.n	8004220 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	4918      	ldr	r1, [pc, #96]	; (800425c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	2201      	movs	r2, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43da      	mvns	r2, r3
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4013      	ands	r3, r2
 800421c:	4a10      	ldr	r2, [pc, #64]	; (8004260 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800421e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004240:	441a      	add	r2, r3
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fe fa9e 	bl	800278a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800424e:	bf00      	nop
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000280 	.word	0x20000280
 800425c:	20000284 	.word	0x20000284
 8004260:	20000388 	.word	0x20000388

08004264 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <pvTaskIncrementMutexHeldCount+0x24>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <pvTaskIncrementMutexHeldCount+0x24>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004276:	3201      	adds	r2, #1
 8004278:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <pvTaskIncrementMutexHeldCount+0x24>)
 800427c:	681b      	ldr	r3, [r3, #0]
	}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000280 	.word	0x20000280

0800428c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004296:	4b29      	ldr	r3, [pc, #164]	; (800433c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe face 	bl	8002844 <uxListRemove>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042ae:	4b24      	ldr	r3, [pc, #144]	; (8004340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	2201      	movs	r2, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4013      	ands	r3, r2
 80042c2:	4a20      	ldr	r2, [pc, #128]	; (8004344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d10a      	bne.n	80042e4 <prvAddCurrentTaskToDelayedList+0x58>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3304      	adds	r3, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	481a      	ldr	r0, [pc, #104]	; (8004348 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042de:	f7fe fa54 	bl	800278a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042e2:	e026      	b.n	8004332 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d209      	bcs.n	8004310 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <prvAddCurrentTaskToDelayedList+0xc0>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3304      	adds	r3, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f7fe fa62 	bl	80027d2 <vListInsert>
}
 800430e:	e010      	b.n	8004332 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe fa58 	bl	80027d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d202      	bcs.n	8004332 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800432c:	4a09      	ldr	r2, [pc, #36]	; (8004354 <prvAddCurrentTaskToDelayedList+0xc8>)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6013      	str	r3, [r2, #0]
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000384 	.word	0x20000384
 8004340:	20000280 	.word	0x20000280
 8004344:	20000388 	.word	0x20000388
 8004348:	2000036c 	.word	0x2000036c
 800434c:	2000033c 	.word	0x2000033c
 8004350:	20000338 	.word	0x20000338
 8004354:	200003a0 	.word	0x200003a0

08004358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b04      	subs	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b04      	subs	r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b04      	subs	r3, #4
 8004386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004388:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <pxPortInitialiseStack+0x64>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b14      	subs	r3, #20
 8004392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3b04      	subs	r3, #4
 800439e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f06f 0202 	mvn.w	r2, #2
 80043a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3b20      	subs	r3, #32
 80043ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	080043c1 	.word	0x080043c1

080043c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <prvTaskExitError+0x50>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d009      	beq.n	80043e8 <prvTaskExitError+0x28>
 80043d4:	f04f 0320 	mov.w	r3, #32
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e7fe      	b.n	80043e6 <prvTaskExitError+0x26>
 80043e8:	f04f 0320 	mov.w	r3, #32
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043fa:	bf00      	nop
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0fc      	beq.n	80043fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	2000000c 	.word	0x2000000c
	...

08004420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <pxCurrentTCBConst2>)
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	6808      	ldr	r0, [r1, #0]
 8004426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	f380 8809 	msr	PSP, r0
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8811 	msr	BASEPRI, r0
 800443a:	4770      	bx	lr
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst2>:
 8004440:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004448:	4808      	ldr	r0, [pc, #32]	; (800446c <prvPortStartFirstTask+0x24>)
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f380 8808 	msr	MSP, r0
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8814 	msr	CONTROL, r0
 800445a:	b662      	cpsie	i
 800445c:	b661      	cpsie	f
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	df00      	svc	0
 8004468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800446a:	bf00      	nop
 800446c:	e000ed08 	.word	0xe000ed08

08004470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <xPortStartScheduler+0x118>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a44      	ldr	r2, [pc, #272]	; (800458c <xPortStartScheduler+0x11c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d109      	bne.n	8004494 <xPortStartScheduler+0x24>
 8004480:	f04f 0320 	mov.w	r3, #32
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e7fe      	b.n	8004492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004494:	4b3c      	ldr	r3, [pc, #240]	; (8004588 <xPortStartScheduler+0x118>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <xPortStartScheduler+0x120>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d109      	bne.n	80044b2 <xPortStartScheduler+0x42>
 800449e:	f04f 0320 	mov.w	r3, #32
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e7fe      	b.n	80044b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044b2:	4b38      	ldr	r3, [pc, #224]	; (8004594 <xPortStartScheduler+0x124>)
 80044b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <xPortStartScheduler+0x128>)
 80044d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <xPortStartScheduler+0x12c>)
 80044dc:	2207      	movs	r2, #7
 80044de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044e0:	e009      	b.n	80044f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <xPortStartScheduler+0x12c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a2c      	ldr	r2, [pc, #176]	; (800459c <xPortStartScheduler+0x12c>)
 80044ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d0ef      	beq.n	80044e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <xPortStartScheduler+0x12c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	d009      	beq.n	8004522 <xPortStartScheduler+0xb2>
 800450e:	f04f 0320 	mov.w	r3, #32
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e7fe      	b.n	8004520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <xPortStartScheduler+0x12c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	4a1c      	ldr	r2, [pc, #112]	; (800459c <xPortStartScheduler+0x12c>)
 800452a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <xPortStartScheduler+0x12c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <xPortStartScheduler+0x12c>)
 8004536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <xPortStartScheduler+0x130>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <xPortStartScheduler+0x130>)
 8004546:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800454a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <xPortStartScheduler+0x130>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <xPortStartScheduler+0x130>)
 8004552:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8004556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004558:	f000 f8d6 	bl	8004708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <xPortStartScheduler+0x134>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004562:	f000 f8f5 	bl	8004750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <xPortStartScheduler+0x138>)
 800456c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004572:	f7ff ff69 	bl	8004448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004576:	f7ff fa75 	bl	8003a64 <vTaskSwitchContext>
	prvTaskExitError();
 800457a:	f7ff ff21 	bl	80043c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed00 	.word	0xe000ed00
 800458c:	410fc271 	.word	0x410fc271
 8004590:	410fc270 	.word	0x410fc270
 8004594:	e000e400 	.word	0xe000e400
 8004598:	200003ac 	.word	0x200003ac
 800459c:	200003b0 	.word	0x200003b0
 80045a0:	e000ed20 	.word	0xe000ed20
 80045a4:	2000000c 	.word	0x2000000c
 80045a8:	e000ef34 	.word	0xe000ef34

080045ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	f04f 0320 	mov.w	r3, #32
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <vPortEnterCritical+0x54>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <vPortEnterCritical+0x54>)
 80045cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <vPortEnterCritical+0x54>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10e      	bne.n	80045f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <vPortEnterCritical+0x58>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <vPortEnterCritical+0x48>
 80045e0:	f04f 0320 	mov.w	r3, #32
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	e7fe      	b.n	80045f2 <vPortEnterCritical+0x46>
	}
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	2000000c 	.word	0x2000000c
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <vPortExitCritical+0x4c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <vPortExitCritical+0x22>
 8004616:	f04f 0320 	mov.w	r3, #32
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e7fe      	b.n	8004628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <vPortExitCritical+0x4c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <vPortExitCritical+0x4c>)
 8004632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <vPortExitCritical+0x4c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <vPortExitCritical+0x3e>
 800463c:	2300      	movs	r3, #0
 800463e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	2000000c 	.word	0x2000000c
	...

08004660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004660:	f3ef 8009 	mrs	r0, PSP
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <pxCurrentTCBConst>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	f01e 0f10 	tst.w	lr, #16
 8004670:	bf08      	it	eq
 8004672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	6010      	str	r0, [r2, #0]
 800467c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004680:	f04f 0020 	mov.w	r0, #32
 8004684:	f380 8811 	msr	BASEPRI, r0
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f7ff f9e8 	bl	8003a64 <vTaskSwitchContext>
 8004694:	f04f 0000 	mov.w	r0, #0
 8004698:	f380 8811 	msr	BASEPRI, r0
 800469c:	bc09      	pop	{r0, r3}
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	6808      	ldr	r0, [r1, #0]
 80046a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a6:	f01e 0f10 	tst.w	lr, #16
 80046aa:	bf08      	it	eq
 80046ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046b0:	f380 8809 	msr	PSP, r0
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst>:
 80046c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
	__asm volatile
 80046ce:	f04f 0320 	mov.w	r3, #32
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046e0:	f7ff f904 	bl	80038ec <xTaskIncrementTick>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <SysTick_Handler+0x3c>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <vPortSetupTimerInterrupt+0x34>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortSetupTimerInterrupt+0x38>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <vPortSetupTimerInterrupt+0x3c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <vPortSetupTimerInterrupt+0x40>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <vPortSetupTimerInterrupt+0x44>)
 8004726:	3b01      	subs	r3, #1
 8004728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800472a:	4b04      	ldr	r3, [pc, #16]	; (800473c <vPortSetupTimerInterrupt+0x34>)
 800472c:	2207      	movs	r2, #7
 800472e:	601a      	str	r2, [r3, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000e010 	.word	0xe000e010
 8004740:	e000e018 	.word	0xe000e018
 8004744:	20000000 	.word	0x20000000
 8004748:	10624dd3 	.word	0x10624dd3
 800474c:	e000e014 	.word	0xe000e014

08004750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004760 <vPortEnableVFP+0x10>
 8004754:	6801      	ldr	r1, [r0, #0]
 8004756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800475a:	6001      	str	r1, [r0, #0]
 800475c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800475e:	bf00      	nop
 8004760:	e000ed88 	.word	0xe000ed88

08004764 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800476a:	f3ef 8305 	mrs	r3, IPSR
 800476e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d913      	bls.n	800479e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <vPortValidateInterruptPriority+0x6c>)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <vPortValidateInterruptPriority+0x70>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	7afa      	ldrb	r2, [r7, #11]
 8004786:	429a      	cmp	r2, r3
 8004788:	d209      	bcs.n	800479e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800478a:	f04f 0320 	mov.w	r3, #32
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	e7fe      	b.n	800479c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <vPortValidateInterruptPriority+0x74>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <vPortValidateInterruptPriority+0x78>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d909      	bls.n	80047c2 <vPortValidateInterruptPriority+0x5e>
 80047ae:	f04f 0320 	mov.w	r3, #32
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	e7fe      	b.n	80047c0 <vPortValidateInterruptPriority+0x5c>
	}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e3f0 	.word	0xe000e3f0
 80047d4:	200003ac 	.word	0x200003ac
 80047d8:	e000ed0c 	.word	0xe000ed0c
 80047dc:	200003b0 	.word	0x200003b0

080047e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047ec:	f7fe ffd4 	bl	8003798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047f0:	4b57      	ldr	r3, [pc, #348]	; (8004950 <pvPortMalloc+0x170>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047f8:	f000 f90c 	bl	8004a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047fc:	4b55      	ldr	r3, [pc, #340]	; (8004954 <pvPortMalloc+0x174>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 808c 	bne.w	8004922 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01c      	beq.n	800484a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004810:	2208      	movs	r2, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	2b00      	cmp	r3, #0
 8004820:	d013      	beq.n	800484a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f023 0307 	bic.w	r3, r3, #7
 8004828:	3308      	adds	r3, #8
 800482a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <pvPortMalloc+0x6a>
 8004836:	f04f 0320 	mov.w	r3, #32
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e7fe      	b.n	8004848 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d068      	beq.n	8004922 <pvPortMalloc+0x142>
 8004850:	4b41      	ldr	r3, [pc, #260]	; (8004958 <pvPortMalloc+0x178>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d863      	bhi.n	8004922 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800485a:	4b40      	ldr	r3, [pc, #256]	; (800495c <pvPortMalloc+0x17c>)
 800485c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <pvPortMalloc+0x17c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004864:	e004      	b.n	8004870 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d903      	bls.n	8004882 <pvPortMalloc+0xa2>
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f1      	bne.n	8004866 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004882:	4b33      	ldr	r3, [pc, #204]	; (8004950 <pvPortMalloc+0x170>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004888:	429a      	cmp	r2, r3
 800488a:	d04a      	beq.n	8004922 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2208      	movs	r2, #8
 8004892:	4413      	add	r3, r2
 8004894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1ad2      	subs	r2, r2, r3
 80048a6:	2308      	movs	r3, #8
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d91e      	bls.n	80048ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4413      	add	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <pvPortMalloc+0xf4>
 80048c0:	f04f 0320 	mov.w	r3, #32
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e7fe      	b.n	80048d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048e6:	69b8      	ldr	r0, [r7, #24]
 80048e8:	f000 f8f6 	bl	8004ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <pvPortMalloc+0x178>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <pvPortMalloc+0x178>)
 80048f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <pvPortMalloc+0x178>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b18      	ldr	r3, [pc, #96]	; (8004960 <pvPortMalloc+0x180>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d203      	bcs.n	800490e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <pvPortMalloc+0x178>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <pvPortMalloc+0x180>)
 800490c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <pvPortMalloc+0x174>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	431a      	orrs	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004922:	f7fe ff47 	bl	80037b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <pvPortMalloc+0x164>
 8004930:	f04f 0320 	mov.w	r3, #32
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e7fe      	b.n	8004942 <pvPortMalloc+0x162>
	return pvReturn;
 8004944:	69fb      	ldr	r3, [r7, #28]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3728      	adds	r7, #40	; 0x28
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000fbc 	.word	0x20000fbc
 8004954:	20000fc8 	.word	0x20000fc8
 8004958:	20000fc0 	.word	0x20000fc0
 800495c:	20000fb4 	.word	0x20000fb4
 8004960:	20000fc4 	.word	0x20000fc4

08004964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d046      	beq.n	8004a04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004976:	2308      	movs	r3, #8
 8004978:	425b      	negs	r3, r3
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <vPortFree+0xa8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <vPortFree+0x42>
 8004992:	f04f 0320 	mov.w	r3, #32
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e7fe      	b.n	80049a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <vPortFree+0x5e>
 80049ae:	f04f 0320 	mov.w	r3, #32
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	e7fe      	b.n	80049c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <vPortFree+0xa8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d019      	beq.n	8004a04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d115      	bne.n	8004a04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <vPortFree+0xa8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049e8:	f7fe fed6 	bl	8003798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <vPortFree+0xac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <vPortFree+0xac>)
 80049f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049fa:	6938      	ldr	r0, [r7, #16]
 80049fc:	f000 f86c 	bl	8004ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a00:	f7fe fed8 	bl	80037b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000fc8 	.word	0x20000fc8
 8004a10:	20000fc0 	.word	0x20000fc0

08004a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <prvHeapInit+0xac>)
 8004a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3307      	adds	r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0307 	bic.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <prvHeapInit+0xac>)
 8004a44:	4413      	add	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <prvHeapInit+0xb0>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <prvHeapInit+0xb0>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a60:	2208      	movs	r2, #8
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <prvHeapInit+0xb8>)
 8004aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <prvHeapInit+0xbc>)
 8004aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvHeapInit+0xc0>)
 8004aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	200003b4 	.word	0x200003b4
 8004ac4:	20000fb4 	.word	0x20000fb4
 8004ac8:	20000fbc 	.word	0x20000fbc
 8004acc:	20000fc4 	.word	0x20000fc4
 8004ad0:	20000fc0 	.word	0x20000fc0
 8004ad4:	20000fc8 	.word	0x20000fc8

08004ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ae0:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <prvInsertBlockIntoFreeList+0xac>)
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e002      	b.n	8004aec <prvInsertBlockIntoFreeList+0x14>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d8f7      	bhi.n	8004ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d108      	bne.n	8004b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d118      	bne.n	8004b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <prvInsertBlockIntoFreeList+0xb0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d00d      	beq.n	8004b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e008      	b.n	8004b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <prvInsertBlockIntoFreeList+0xb0>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e003      	b.n	8004b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d002      	beq.n	8004b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000fb4 	.word	0x20000fb4
 8004b88:	20000fbc 	.word	0x20000fbc

08004b8c <__libc_init_array>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4e0d      	ldr	r6, [pc, #52]	; (8004bc4 <__libc_init_array+0x38>)
 8004b90:	4c0d      	ldr	r4, [pc, #52]	; (8004bc8 <__libc_init_array+0x3c>)
 8004b92:	1ba4      	subs	r4, r4, r6
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	2500      	movs	r5, #0
 8004b98:	42a5      	cmp	r5, r4
 8004b9a:	d109      	bne.n	8004bb0 <__libc_init_array+0x24>
 8004b9c:	4e0b      	ldr	r6, [pc, #44]	; (8004bcc <__libc_init_array+0x40>)
 8004b9e:	4c0c      	ldr	r4, [pc, #48]	; (8004bd0 <__libc_init_array+0x44>)
 8004ba0:	f000 f82c 	bl	8004bfc <_init>
 8004ba4:	1ba4      	subs	r4, r4, r6
 8004ba6:	10a4      	asrs	r4, r4, #2
 8004ba8:	2500      	movs	r5, #0
 8004baa:	42a5      	cmp	r5, r4
 8004bac:	d105      	bne.n	8004bba <__libc_init_array+0x2e>
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bb4:	4798      	blx	r3
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	e7ee      	b.n	8004b98 <__libc_init_array+0xc>
 8004bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bbe:	4798      	blx	r3
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7f2      	b.n	8004baa <__libc_init_array+0x1e>
 8004bc4:	08004c9c 	.word	0x08004c9c
 8004bc8:	08004c9c 	.word	0x08004c9c
 8004bcc:	08004c9c 	.word	0x08004c9c
 8004bd0:	08004ca0 	.word	0x08004ca0

08004bd4 <memcpy>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	1e43      	subs	r3, r0, #1
 8004bd8:	440a      	add	r2, r1
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d100      	bne.n	8004be0 <memcpy+0xc>
 8004bde:	bd10      	pop	{r4, pc}
 8004be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be8:	e7f7      	b.n	8004bda <memcpy+0x6>

08004bea <memset>:
 8004bea:	4402      	add	r2, r0
 8004bec:	4603      	mov	r3, r0
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d100      	bne.n	8004bf4 <memset+0xa>
 8004bf2:	4770      	bx	lr
 8004bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf8:	e7f9      	b.n	8004bee <memset+0x4>
	...

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
