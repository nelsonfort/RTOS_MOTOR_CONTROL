
RTOS_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006004  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006250  08006250  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006250  08006250  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006250  08006250  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  20000010  08006268  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  08006268  00021078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013022  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000295a  00000000  00000000  00033062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  00036958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000210e4  00000000  00000000  000377b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df8d  00000000  00000000  0005889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cccca  00000000  00000000  00066829  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001334f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004030  00000000  00000000  00133570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800618c 	.word	0x0800618c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800618c 	.word	0x0800618c

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b098      	sub	sp, #96	; 0x60
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fb69 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f859 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f93d 	bl	80004a0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000226:	f000 f8b5 	bl	8000394 <MX_TIM3_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem1 */
  osSemaphoreDef(binSem1);
 800022a:	2300      	movs	r3, #0
 800022c:	65bb      	str	r3, [r7, #88]	; 0x58
 800022e:	2300      	movs	r3, #0
 8000230:	65fb      	str	r3, [r7, #92]	; 0x5c
  binSem1Handle = osSemaphoreCreate(osSemaphore(binSem1), 1);
 8000232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000236:	2101      	movs	r1, #1
 8000238:	4618      	mov	r0, r3
 800023a:	f003 fc8c 	bl	8003b56 <osSemaphoreCreate>
 800023e:	4602      	mov	r2, r0
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <main+0xa4>)
 8000242:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 8000244:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0xa8>)
 8000246:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000258:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f003 fc19 	bl	8003a96 <osThreadCreate>
 8000264:	4602      	mov	r2, r0
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <main+0xac>)
 8000268:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <main+0xb0>)
 800026c:	f107 0420 	add.w	r4, r7, #32
 8000270:	461d      	mov	r5, r3
 8000272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000276:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800027e:	f107 0320 	add.w	r3, r7, #32
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f003 fc06 	bl	8003a96 <osThreadCreate>
 800028a:	4602      	mov	r2, r0
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <main+0xb4>)
 800028e:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskPWM */
  osThreadDef(TaskPWM, TaskPWM_App, osPriorityIdle, 0, 128);
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <main+0xb8>)
 8000292:	1d3c      	adds	r4, r7, #4
 8000294:	461d      	mov	r5, r3
 8000296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800029e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPWMHandle = osThreadCreate(osThread(TaskPWM), NULL);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 fbf5 	bl	8003a96 <osThreadCreate>
 80002ac:	4602      	mov	r2, r0
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <main+0xbc>)
 80002b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002b2:	f003 fbe9 	bl	8003a88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0xa2>
 80002b8:	20000fcc 	.word	0x20000fcc
 80002bc:	080061ac 	.word	0x080061ac
 80002c0:	2000101c 	.word	0x2000101c
 80002c4:	080061d0 	.word	0x080061d0
 80002c8:	20001024 	.word	0x20001024
 80002cc:	080061f4 	.word	0x080061f4
 80002d0:	20001020 	.word	0x20001020

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0a6      	sub	sp, #152	; 0x98
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 ff49 	bl	800617a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2258      	movs	r2, #88	; 0x58
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 ff3b 	bl	800617a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2310      	movs	r3, #16
 800030e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000332:	4618      	mov	r0, r3
 8000334:	f000 fdae 	bl	8000e94 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033e:	f000 f995 	bl	800066c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fcae 	bl	8001cc0 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800036a:	f000 f97f 	bl	800066c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM34;
 800036e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000372:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000374:	2300      	movs	r3, #0
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fee6 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000386:	f000 f971 	bl	800066c <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3798      	adds	r7, #152	; 0x98
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08e      	sub	sp, #56	; 0x38
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	f107 031c 	add.w	r3, r7, #28
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b4:	463b      	mov	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003c6:	4b34      	ldr	r3, [pc, #208]	; (8000498 <MX_TIM3_Init+0x104>)
 80003c8:	4a34      	ldr	r2, [pc, #208]	; (800049c <MX_TIM3_Init+0x108>)
 80003ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003cc:	4b32      	ldr	r3, [pc, #200]	; (8000498 <MX_TIM3_Init+0x104>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d2:	4b31      	ldr	r3, [pc, #196]	; (8000498 <MX_TIM3_Init+0x104>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 80003d8:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <MX_TIM3_Init+0x104>)
 80003da:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80003de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b2d      	ldr	r3, [pc, #180]	; (8000498 <MX_TIM3_Init+0x104>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e6:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <MX_TIM3_Init+0x104>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003ec:	482a      	ldr	r0, [pc, #168]	; (8000498 <MX_TIM3_Init+0x104>)
 80003ee:	f002 f8cb 	bl	8002588 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80003f8:	f000 f938 	bl	800066c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000406:	4619      	mov	r1, r3
 8000408:	4823      	ldr	r0, [pc, #140]	; (8000498 <MX_TIM3_Init+0x104>)
 800040a:	f002 fd23 	bl	8002e54 <HAL_TIM_ConfigClockSource>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000414:	f000 f92a 	bl	800066c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000418:	481f      	ldr	r0, [pc, #124]	; (8000498 <MX_TIM3_Init+0x104>)
 800041a:	f002 f97d 	bl	8002718 <HAL_TIM_PWM_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000424:	f000 f922 	bl	800066c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000430:	f107 031c 	add.w	r3, r7, #28
 8000434:	4619      	mov	r1, r3
 8000436:	4818      	ldr	r0, [pc, #96]	; (8000498 <MX_TIM3_Init+0x104>)
 8000438:	f003 fa52 	bl	80038e0 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000442:	f000 f913 	bl	800066c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000446:	2360      	movs	r3, #96	; 0x60
 8000448:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1200;
 800044a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800044e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	480e      	ldr	r0, [pc, #56]	; (8000498 <MX_TIM3_Init+0x104>)
 8000460:	f002 fbe8 	bl	8002c34 <HAL_TIM_PWM_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800046a:	f000 f8ff 	bl	800066c <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 800046e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000472:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	2204      	movs	r2, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4807      	ldr	r0, [pc, #28]	; (8000498 <MX_TIM3_Init+0x104>)
 800047c:	f002 fbda 	bl	8002c34 <HAL_TIM_PWM_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000486:	f000 f8f1 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <MX_TIM3_Init+0x104>)
 800048c:	f000 f93a 	bl	8000704 <HAL_TIM_MspPostInit>

}
 8000490:	bf00      	nop
 8000492:	3738      	adds	r7, #56	; 0x38
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000fd0 	.word	0x20000fd0
 800049c:	40000400 	.word	0x40000400

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a36      	ldr	r2, [pc, #216]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a30      	ldr	r2, [pc, #192]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b28      	ldr	r3, [pc, #160]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b25      	ldr	r3, [pc, #148]	; (8000594 <MX_GPIO_Init+0xf4>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a24      	ldr	r2, [pc, #144]	; (8000594 <MX_GPIO_Init+0xf4>)
 8000504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <MX_GPIO_Init+0xf4>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2120      	movs	r1, #32
 800051a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051e:	f000 fc89 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_GPIO_Init+0xf8>)
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	4819      	ldr	r0, [pc, #100]	; (800059c <MX_GPIO_Init+0xfc>)
 8000538:	f000 faf2 	bl	8000b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800053c:	230c      	movs	r3, #12
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000540:	2302      	movs	r3, #2
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800054c:	2307      	movs	r3, #7
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 fae1 	bl	8000b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800055e:	2320      	movs	r3, #32
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fad2 	bl	8000b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2102      	movs	r1, #2
 8000580:	2028      	movs	r0, #40	; 0x28
 8000582:	f000 faa3 	bl	8000acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000586:	2028      	movs	r0, #40	; 0x28
 8000588:	f000 fabc 	bl	8000b04 <HAL_NVIC_EnableIRQ>

}
 800058c:	bf00      	nop
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	10210000 	.word	0x10210000
 800059c:	48000800 	.word	0x48000800

080005a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	if(B1_Pin == GPIO_Pin)
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005b0:	d104      	bne.n	80005bc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(binSem1Handle);
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fb4e 	bl	8003c58 <osSemaphoreRelease>

	}
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000fcc 	.word	0x20000fcc

080005c8 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2120      	movs	r1, #32
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fc2c 	bl	8000e34 <HAL_GPIO_WritePin>
	osSemaphoreWait(binSem1Handle, osWaitForever);
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <Task1_App+0x24>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fae9 	bl	8003bbc <osSemaphoreWait>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ea:	e7f1      	b.n	80005d0 <Task1_App+0x8>
 80005ec:	20000fcc 	.word	0x20000fcc

080005f0 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f000 fc18 	bl	8000e34 <HAL_GPIO_WritePin>
	  osDelay(1300);
 8000604:	f240 5014 	movw	r0, #1300	; 0x514
 8000608:	f003 fa91 	bl	8003b2e <osDelay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800060c:	e7f4      	b.n	80005f8 <Task2_App+0x8>
	...

08000610 <TaskPWM_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskPWM_App */
void TaskPWM_App(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskPWM_App */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000618:	2100      	movs	r1, #0
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <TaskPWM_App+0x34>)
 800061c:	f002 f8de 	bl	80027dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000620:	2104      	movs	r1, #4
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <TaskPWM_App+0x34>)
 8000624:	f002 f8da 	bl	80027dc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	for(uint8_t cont = 1; cont <=4 ; cont++ ){
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e002      	b.n	8000634 <TaskPWM_App+0x24>
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d9f9      	bls.n	800062e <TaskPWM_App+0x1e>
		//set_PWM(htim3, TIM_CHANNEL_1, 3600, 900*cont);
	}

    osDelay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f003 fa76 	bl	8003b2e <osDelay>
	for(uint8_t cont = 1; cont <=4 ; cont++ ){
 8000642:	e7f1      	b.n	8000628 <TaskPWM_App+0x18>
 8000644:	20000fd0 	.word	0x20000fd0

08000648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d101      	bne.n	800065e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800065a:	f000 f95f 	bl	800091c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40001000 	.word	0x40001000

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_TIM_Base_MspInit+0x38>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10b      	bne.n	80006ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_TIM_Base_MspInit+0x3c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a09      	ldr	r2, [pc, #36]	; (8000700 <HAL_TIM_Base_MspInit+0x3c>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_TIM_Base_MspInit+0x3c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40000400 	.word	0x40000400
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_TIM_MspPostInit+0x64>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d11c      	bne.n	8000760 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_TIM_MspPostInit+0x68>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <HAL_TIM_MspPostInit+0x68>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_TIM_MspPostInit+0x68>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800073e:	2350      	movs	r3, #80	; 0x50
 8000740:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f000 f9e0 	bl	8000b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40000400 	.word	0x40000400
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2036      	movs	r0, #54	; 0x36
 8000786:	f000 f9a1 	bl	8000acc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800078a:	2036      	movs	r0, #54	; 0x36
 800078c:	f000 f9ba 	bl	8000b04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_InitTick+0xa0>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <HAL_InitTick+0xa0>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	61d3      	str	r3, [r2, #28]
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_InitTick+0xa0>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a8:	f107 0210 	add.w	r2, r7, #16
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fc98 	bl	80020e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007b8:	f001 fc74 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80007bc:	4603      	mov	r3, r0
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_InitTick+0xa4>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0c9b      	lsrs	r3, r3, #18
 80007cc:	3b01      	subs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_InitTick+0xa8>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <HAL_InitTick+0xac>)
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_InitTick+0xa8>)
 80007d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_InitTick+0xa8>)
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_InitTick+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_InitTick+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_InitTick+0xa8>)
 80007f2:	f001 fec9 	bl	8002588 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <HAL_InitTick+0xa8>)
 80007fe:	f001 ff1b 	bl	8002638 <HAL_TIM_Base_Start_IT>
 8000802:	4603      	mov	r3, r0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	431bde83 	.word	0x431bde83
 8000818:	20001028 	.word	0x20001028
 800081c:	40001000 	.word	0x40001000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000858:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800085c:	f000 fb02 	bl	8000e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <TIM6_DAC_IRQHandler+0x10>)
 800086a:	f002 f8c3 	bl	80029f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20001028 	.word	0x20001028

08000878 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c6:	f7ff ffd7 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f005 fc27 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ce:	f7ff fca1 	bl	8000214 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008e0:	08006258 	.word	0x08006258
  ldr r2, =_sbss
 80008e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008e8:	20001078 	.word	0x20001078

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x28>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f8d8 	bl	8000ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff32 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff feb6 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	20001074 	.word	0x20001074

08000944 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;  
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20001074 	.word	0x20001074

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ff4c 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ade:	f7ff ff61 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	6978      	ldr	r0, [r7, #20]
 8000aea:	f7ff ffb1 	bl	8000a50 <NVIC_EncodePriority>
 8000aee:	4602      	mov	r2, r0
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff80 	bl	80009fc <__NVIC_SetPriority>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff54 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2e:	e160      	b.n	8000df2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2101      	movs	r1, #1
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8152 	beq.w	8000dec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d00b      	beq.n	8000b68 <HAL_GPIO_Init+0x48>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d007      	beq.n	8000b68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5c:	2b11      	cmp	r3, #17
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b12      	cmp	r3, #18
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0xea>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d123      	bne.n	8000c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	220f      	movs	r2, #15
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	691a      	ldr	r2, [r3, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3208      	adds	r2, #8
 8000c4c:	6939      	ldr	r1, [r7, #16]
 8000c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0203 	and.w	r2, r3, #3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80ac 	beq.w	8000dec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a5d      	ldr	r2, [pc, #372]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cac:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <HAL_GPIO_Init+0x2f4>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd6:	d025      	beq.n	8000d24 <HAL_GPIO_Init+0x204>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <HAL_GPIO_Init+0x2f8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d01f      	beq.n	8000d20 <HAL_GPIO_Init+0x200>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <HAL_GPIO_Init+0x2fc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d019      	beq.n	8000d1c <HAL_GPIO_Init+0x1fc>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4d      	ldr	r2, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x300>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1f8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4c      	ldr	r2, [pc, #304]	; (8000e24 <HAL_GPIO_Init+0x304>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1f4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4b      	ldr	r2, [pc, #300]	; (8000e28 <HAL_GPIO_Init+0x308>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1f0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4a      	ldr	r2, [pc, #296]	; (8000e2c <HAL_GPIO_Init+0x30c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1ec>
 8000d08:	2306      	movs	r3, #6
 8000d0a:	e00c      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	e00a      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d10:	2305      	movs	r3, #5
 8000d12:	e008      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d14:	2304      	movs	r3, #4
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d24:	2300      	movs	r3, #0
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d36:	4937      	ldr	r1, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2f4>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d92:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f ae97 	bne.w	8000b30 <HAL_GPIO_Init+0x10>
  }
}
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	48001000 	.word	0x48001000
 8000e28:	48001400 	.word	0x48001400
 8000e2c:	48001800 	.word	0x48001800
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb8c 	bl	80005a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f000 bf01 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 8160 	beq.w	800117e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ebe:	4bae      	ldr	r3, [pc, #696]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eca:	4bab      	ldr	r3, [pc, #684]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d159      	bne.n	8000f8a <HAL_RCC_OscConfig+0xf6>
 8000ed6:	4ba8      	ldr	r3, [pc, #672]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d152      	bne.n	8000f8a <HAL_RCC_OscConfig+0xf6>
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ef8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x82>
 8000f10:	4b99      	ldr	r3, [pc, #612]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	e015      	b.n	8000f42 <HAL_RCC_OscConfig+0xae>
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f3e:	4b8e      	ldr	r3, [pc, #568]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f4e:	fa92 f2a2 	rbit	r2, r2
 8000f52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f5a:	fab2 f282 	clz	r2, r2
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	f042 0220 	orr.w	r2, r2, #32
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	f002 021f 	and.w	r2, r2, #31
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8102 	beq.w	800117c <HAL_RCC_OscConfig+0x2e8>
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 80fc 	bne.w	800117c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f000 be93 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x110>
 8000f96:	4b78      	ldr	r3, [pc, #480]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a77      	ldr	r2, [pc, #476]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e030      	b.n	8001006 <HAL_RCC_OscConfig+0x172>
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x134>
 8000fae:	4b72      	ldr	r3, [pc, #456]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a71      	ldr	r2, [pc, #452]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b6f      	ldr	r3, [pc, #444]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a6e      	ldr	r2, [pc, #440]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e01e      	b.n	8001006 <HAL_RCC_OscConfig+0x172>
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd2:	d10c      	bne.n	8000fee <HAL_RCC_OscConfig+0x15a>
 8000fd4:	4b68      	ldr	r3, [pc, #416]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a67      	ldr	r2, [pc, #412]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b65      	ldr	r3, [pc, #404]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a64      	ldr	r2, [pc, #400]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e00b      	b.n	8001006 <HAL_RCC_OscConfig+0x172>
 8000fee:	4b62      	ldr	r3, [pc, #392]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a61      	ldr	r2, [pc, #388]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d059      	beq.n	80010c4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fc98 	bl	8000944 <HAL_GetTick>
 8001014:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101a:	f7ff fc93 	bl	8000944 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d902      	bls.n	8001030 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	f000 be40 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 8001030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001034:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001044:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d102      	bne.n	8001062 <HAL_RCC_OscConfig+0x1ce>
 800105c:	4b46      	ldr	r3, [pc, #280]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x1fa>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800107e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001092:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001096:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800109a:	fa92 f2a2 	rbit	r2, r2
 800109e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80010a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f002 021f 	and.w	r2, r2, #31
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0ab      	beq.n	800101a <HAL_RCC_OscConfig+0x186>
 80010c2:	e05c      	b.n	800117e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fc3e 	bl	8000944 <HAL_GetTick>
 80010c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff fc39 	bl	8000944 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d902      	bls.n	80010e4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	f000 bde6 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80010f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d102      	bne.n	8001116 <HAL_RCC_OscConfig+0x282>
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	e015      	b.n	8001142 <HAL_RCC_OscConfig+0x2ae>
 8001116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800112a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001132:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_RCC_OscConfig+0x2e4>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001146:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800114a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800114e:	fa92 f2a2 	rbit	r2, r2
 8001152:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001156:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	f042 0220 	orr.w	r2, r2, #32
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	f002 021f 	and.w	r2, r2, #31
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ab      	bne.n	80010ce <HAL_RCC_OscConfig+0x23a>
 8001176:	e002      	b.n	800117e <HAL_RCC_OscConfig+0x2ea>
 8001178:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 8170 	beq.w	800146e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800118e:	4bd0      	ldr	r3, [pc, #832]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800119a:	4bcd      	ldr	r3, [pc, #820]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d16d      	bne.n	8001282 <HAL_RCC_OscConfig+0x3ee>
 80011a6:	4bca      	ldr	r3, [pc, #808]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011b2:	d166      	bne.n	8001282 <HAL_RCC_OscConfig+0x3ee>
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80011c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x350>
 80011de:	4bbc      	ldr	r3, [pc, #752]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e013      	b.n	800120c <HAL_RCC_OscConfig+0x378>
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001208:	4bb1      	ldr	r3, [pc, #708]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	2202      	movs	r2, #2
 800120e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001212:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001216:	fa92 f2a2 	rbit	r2, r2
 800121a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800121e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f002 021f 	and.w	r2, r2, #31
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <HAL_RCC_OscConfig+0x3ba>
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d002      	beq.n	800124e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	f000 bd31 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4ba0      	ldr	r3, [pc, #640]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	21f8      	movs	r1, #248	; 0xf8
 800125e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001266:	fa91 f1a1 	rbit	r1, r1
 800126a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800126e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001272:	fab1 f181 	clz	r1, r1
 8001276:	b2c9      	uxtb	r1, r1
 8001278:	408b      	lsls	r3, r1
 800127a:	4995      	ldr	r1, [pc, #596]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001280:	e0f5      	b.n	800146e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8085 	beq.w	8001398 <HAL_RCC_OscConfig+0x504>
 800128e:	2301      	movs	r3, #1
 8001290:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80012a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	461a      	mov	r2, r3
 80012b6:	2301      	movs	r3, #1
 80012b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb43 	bl	8000944 <HAL_GetTick>
 80012be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fb3e 	bl	8000944 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d902      	bls.n	80012da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	f000 bceb 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x476>
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	e013      	b.n	8001332 <HAL_RCC_OscConfig+0x49e>
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001322:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800132e:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	2202      	movs	r2, #2
 8001334:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001338:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800133c:	fa92 f2a2 	rbit	r2, r2
 8001340:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001344:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001348:	fab2 f282 	clz	r2, r2
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f042 0220 	orr.w	r2, r2, #32
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	f002 021f 	and.w	r2, r2, #31
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0af      	beq.n	80012c4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b5a      	ldr	r3, [pc, #360]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	21f8      	movs	r1, #248	; 0xf8
 8001374:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800137c:	fa91 f1a1 	rbit	r1, r1
 8001380:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001384:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001388:	fab1 f181 	clz	r1, r1
 800138c:	b2c9      	uxtb	r1, r1
 800138e:	408b      	lsls	r3, r1
 8001390:	494f      	ldr	r1, [pc, #316]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
 8001396:	e06a      	b.n	800146e <HAL_RCC_OscConfig+0x5da>
 8001398:	2301      	movs	r3, #1
 800139a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80013aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	461a      	mov	r2, r3
 80013c0:	2300      	movs	r3, #0
 80013c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fabe 	bl	8000944 <HAL_GetTick>
 80013c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fab9 	bl	8000944 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d902      	bls.n	80013e4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	f000 bc66 	b.w	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	fab3 f383 	clz	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <HAL_RCC_OscConfig+0x580>
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	e013      	b.n	800143c <HAL_RCC_OscConfig+0x5a8>
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800142c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_RCC_OscConfig+0x63c>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	2202      	movs	r2, #2
 800143e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001442:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001446:	fa92 f2a2 	rbit	r2, r2
 800144a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800144e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001452:	fab2 f282 	clz	r2, r2
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	f042 0220 	orr.w	r2, r2, #32
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	f002 021f 	and.w	r2, r2, #31
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1af      	bne.n	80013ce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80da 	beq.w	8001632 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d069      	beq.n	800155c <HAL_RCC_OscConfig+0x6c8>
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800149a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x640>)
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	461a      	mov	r2, r3
 80014ae:	2301      	movs	r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fa47 	bl	8000944 <HAL_GetTick>
 80014b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e00d      	b.n	80014d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fa42 	bl	8000944 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d905      	bls.n	80014d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e3ef      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 80014d0:	40021000 	.word	0x40021000
 80014d4:	10908120 	.word	0x10908120
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014e2:	fa93 f2a3 	rbit	r2, r3
 80014e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014f0:	2202      	movs	r2, #2
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fa93 f2a3 	rbit	r2, r3
 80014fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fa93 f2a3 	rbit	r2, r3
 8001516:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800151a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151c:	4ba4      	ldr	r3, [pc, #656]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 800151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001520:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001524:	2102      	movs	r1, #2
 8001526:	6019      	str	r1, [r3, #0]
 8001528:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f1a3 	rbit	r1, r3
 8001532:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001536:	6019      	str	r1, [r3, #0]
  return result;
 8001538:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0b0      	beq.n	80014bc <HAL_RCC_OscConfig+0x628>
 800155a:	e06a      	b.n	8001632 <HAL_RCC_OscConfig+0x79e>
 800155c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001572:	601a      	str	r2, [r3, #0]
  return result;
 8001574:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001578:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	4b8c      	ldr	r3, [pc, #560]	; (80017b4 <HAL_RCC_OscConfig+0x920>)
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	461a      	mov	r2, r3
 800158a:	2300      	movs	r3, #0
 800158c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff f9d9 	bl	8000944 <HAL_GetTick>
 8001592:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001596:	e009      	b.n	80015ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff f9d4 	bl	8000944 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e381      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 80015ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015b0:	2202      	movs	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015c8:	2202      	movs	r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e0:	2202      	movs	r2, #2
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80015f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015fc:	2102      	movs	r1, #2
 80015fe:	6019      	str	r1, [r3, #0]
 8001600:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f1a3 	rbit	r1, r3
 800160a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800160e:	6019      	str	r1, [r3, #0]
  return result;
 8001610:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1b2      	bne.n	8001598 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8157 	beq.w	80018f0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001648:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d112      	bne.n	800167a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	4b56      	ldr	r3, [pc, #344]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a55      	ldr	r2, [pc, #340]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167a:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_RCC_OscConfig+0x924>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d11a      	bne.n	80016bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x924>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_RCC_OscConfig+0x924>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff f957 	bl	8000944 <HAL_GetTick>
 8001696:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	e009      	b.n	80016b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff f952 	bl	8000944 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2ff      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_RCC_OscConfig+0x924>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ef      	beq.n	800169c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x840>
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a39      	ldr	r2, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	e02f      	b.n	8001734 <HAL_RCC_OscConfig+0x8a0>
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x864>
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0x8a0>
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x888>
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0x8a0>
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 800172e:	f023 0304 	bic.w	r3, r3, #4
 8001732:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06a      	beq.n	8001814 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f901 	bl	8000944 <HAL_GetTick>
 8001742:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff f8fc 	bl	8000944 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e2a7      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 8001760:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800178e:	601a      	str	r2, [r3, #0]
  return result;
 8001790:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001794:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x928>
 80017aa:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <HAL_RCC_OscConfig+0x91c>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0x944>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	10908120 	.word	0x10908120
 80017b8:	40007000 	.word	0x40007000
 80017bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fa93 f2a3 	rbit	r2, r3
 80017ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4bc0      	ldr	r3, [pc, #768]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80017dc:	2102      	movs	r1, #2
 80017de:	6011      	str	r1, [r2, #0]
 80017e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	fa92 f1a2 	rbit	r1, r2
 80017ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017ee:	6011      	str	r1, [r2, #0]
  return result;
 80017f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	fab2 f282 	clz	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f002 021f 	and.w	r2, r2, #31
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d09a      	beq.n	8001748 <HAL_RCC_OscConfig+0x8b4>
 8001812:	e063      	b.n	80018dc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff f896 	bl	8000944 <HAL_GetTick>
 8001818:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f891 	bl	8000944 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e23c      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 8001836:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001864:	601a      	str	r2, [r3, #0]
  return result;
 8001866:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800186a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x9f2>
 8001880:	4b95      	ldr	r3, [pc, #596]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	e00d      	b.n	80018a2 <HAL_RCC_OscConfig+0xa0e>
 8001886:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018a6:	2102      	movs	r1, #2
 80018a8:	6011      	str	r1, [r2, #0]
 80018aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	fa92 f1a2 	rbit	r1, r2
 80018b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018b8:	6011      	str	r1, [r2, #0]
  return result;
 80018ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1a0      	bne.n	800181e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e4:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a7b      	ldr	r2, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80018ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 81d9 	beq.w	8001cae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fc:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	f000 81a6 	beq.w	8001c56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b02      	cmp	r3, #2
 8001912:	f040 811e 	bne.w	8001b52 <HAL_RCC_OscConfig+0xcbe>
 8001916:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800191a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800191e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800192e:	601a      	str	r2, [r3, #0]
  return result;
 8001930:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001934:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	461a      	mov	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7fe fffa 	bl	8000944 <HAL_GetTick>
 8001950:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	e009      	b.n	800196a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7fe fff5 	bl	8000944 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1a2      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 800196a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800196e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001982:	601a      	str	r2, [r3, #0]
  return result;
 8001984:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001988:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_RCC_OscConfig+0xb10>
 800199e:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	e01b      	b.n	80019dc <HAL_RCC_OscConfig+0xb48>
 80019a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fa92 f1a2 	rbit	r1, r2
 80019f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019f4:	6011      	str	r1, [r2, #0]
  return result;
 80019f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	fab2 f282 	clz	r2, r2
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f042 0220 	orr.w	r2, r2, #32
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f002 021f 	and.w	r2, r2, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d19e      	bne.n	8001956 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f023 020f 	bic.w	r2, r3, #15
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	492c      	ldr	r1, [pc, #176]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a19      	ldr	r1, [r3, #32]
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	4925      	ldr	r1, [pc, #148]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a60:	601a      	str	r2, [r3, #0]
  return result;
 8001a62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe ff61 	bl	8000944 <HAL_GetTick>
 8001a82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a86:	e009      	b.n	8001a9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe ff5c 	bl	8000944 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e109      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 8001a9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ab4:	601a      	str	r2, [r3, #0]
  return result;
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0xc48>
 8001ad0:	4b01      	ldr	r3, [pc, #4]	; (8001ad8 <HAL_RCC_OscConfig+0xc44>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e01e      	b.n	8001b14 <HAL_RCC_OscConfig+0xc80>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0xe28>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b1c:	6011      	str	r1, [r2, #0]
 8001b1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fa92 f1a2 	rbit	r1, r2
 8001b28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b2c:	6011      	str	r1, [r2, #0]
  return result;
 8001b2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	fab2 f282 	clz	r2, r2
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f042 0220 	orr.w	r2, r2, #32
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	f002 021f 	and.w	r2, r2, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d09b      	beq.n	8001a88 <HAL_RCC_OscConfig+0xbf4>
 8001b50:	e0ad      	b.n	8001cae <HAL_RCC_OscConfig+0xe1a>
 8001b52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe fedc 	bl	8000944 <HAL_GetTick>
 8001b8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe fed7 	bl	8000944 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e084      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
 8001ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0xd4c>
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_RCC_OscConfig+0xe28>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0xd84>
 8001be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_OscConfig+0xe28>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f107 0214 	add.w	r2, r7, #20
 8001c1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	f107 0214 	add.w	r2, r7, #20
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fa92 f1a2 	rbit	r1, r2
 8001c2c:	f107 0210 	add.w	r2, r7, #16
 8001c30:	6011      	str	r1, [r2, #0]
  return result;
 8001c32:	f107 0210 	add.w	r2, r7, #16
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d19e      	bne.n	8001b92 <HAL_RCC_OscConfig+0xcfe>
 8001c54:	e02b      	b.n	8001cae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e025      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0xe28>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_RCC_OscConfig+0xe28>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c78:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d111      	bne.n	8001caa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d108      	bne.n	8001caa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09e      	sub	sp, #120	; 0x78
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e162      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b90      	ldr	r3, [pc, #576]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b8d      	ldr	r3, [pc, #564]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	498b      	ldr	r1, [pc, #556]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e14a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	497f      	ldr	r1, [pc, #508]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80dc 	beq.w	8001eec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d13c      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xf6>
 8001d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xa6>
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e00f      	b.n	8001d86 <HAL_RCC_ClockConfig+0xc6>
 8001d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	667b      	str	r3, [r7, #100]	; 0x64
 8001d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d78:	663b      	str	r3, [r7, #96]	; 0x60
 8001d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d96:	fab2 f282 	clz	r2, r2
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f042 0220 	orr.w	r2, r2, #32
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f002 021f 	and.w	r2, r2, #31
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d17b      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0f3      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d13c      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x178>
 8001dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x128>
 8001de2:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e00f      	b.n	8001e08 <HAL_RCC_ClockConfig+0x148>
 8001de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
 8001df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8001dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e10:	fa92 f2a2 	rbit	r2, r2
 8001e14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f042 0220 	orr.w	r2, r2, #32
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f002 021f 	and.w	r2, r2, #31
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d13a      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0b2      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x1a0>
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e00d      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1bc>
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	61ba      	str	r2, [r7, #24]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	fa92 f2a2 	rbit	r2, r2
 8001e86:	617a      	str	r2, [r7, #20]
  return result;
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e079      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	491a      	ldr	r1, [pc, #104]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fd42 	bl	8000944 <HAL_GetTick>
 8001ec0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe fd3e 	bl	8000944 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e061      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d214      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4906      	ldr	r1, [pc, #24]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e040      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2de>
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	491a      	ldr	r1, [pc, #104]	; (8001fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4912      	ldr	r1, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f62:	f000 f829 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4601      	mov	r1, r0
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f70:	22f0      	movs	r2, #240	; 0xf0
 8001f72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	40d3      	lsrs	r3, r2
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x2ec>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_RCC_ClockConfig+0x2f0>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_ClockConfig+0x2f4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fbea 	bl	8000770 <HAL_InitTick>
  
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3778      	adds	r7, #120	; 0x78
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08006218 	.word	0x08006218
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b08b      	sub	sp, #44	; 0x2c
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x36>
 8001fe6:	e03f      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fea:	623b      	str	r3, [r7, #32]
      break;
 8001fec:	e03f      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ff4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ff8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	fa92 f2a2 	rbit	r2, r2
 8002000:	607a      	str	r2, [r7, #4]
  return result;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	40d3      	lsrs	r3, r2
 800200c:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_RCC_GetSysClockFreq+0xcc>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	220f      	movs	r2, #15
 800201c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	fa92 f2a2 	rbit	r2, r2
 8002024:	60fa      	str	r2, [r7, #12]
  return result;
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	40d3      	lsrs	r3, r2
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	fbb2 f2f3 	udiv	r2, r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e007      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fbb2 f2f3 	udiv	r2, r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	623b      	str	r3, [r7, #32]
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc8>)
 800206a:	623b      	str	r3, [r7, #32]
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6a3b      	ldr	r3, [r7, #32]
}
 8002070:	4618      	mov	r0, r3
 8002072:	372c      	adds	r7, #44	; 0x2c
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40021000 	.word	0x40021000
 8002080:	007a1200 	.word	0x007a1200
 8002084:	08006230 	.word	0x08006230
 8002088:	08006240 	.word	0x08006240

0800208c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020aa:	f7ff ffef 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020ae:	4601      	mov	r1, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	fa92 f2a2 	rbit	r2, r2
 80020c4:	603a      	str	r2, [r7, #0]
  return result;
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	40d3      	lsrs	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08006228 	.word	0x08006228

080020e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	220f      	movs	r2, #15
 80020f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCC_GetClockConfig+0x60>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0207 	and.w	r2, r3, #7
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b092      	sub	sp, #72	; 0x48
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80d4 	beq.w	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002170:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10e      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b48      	ldr	r3, [pc, #288]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a41      	ldr	r2, [pc, #260]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fbc7 	bl	8000944 <HAL_GetTick>
 80021b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fbc3 	bl	8000944 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1d6      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8084 	beq.w	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d07c      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	461a      	mov	r2, r3
 8002246:	2300      	movs	r3, #0
 8002248:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04b      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fb73 	bl	8000944 <HAL_GetTick>
 800225e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fb6f 	bl	8000944 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e180      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002278:	2302      	movs	r3, #2
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	61fb      	str	r3, [r7, #28]
  return result;
 8002290:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d108      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022a6:	4b01      	ldr	r3, [pc, #4]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	e00d      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40007000 	.word	0x40007000
 80022b4:	10908100 	.word	0x10908100
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	4ba0      	ldr	r3, [pc, #640]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2202      	movs	r2, #2
 80022ca:	613a      	str	r2, [r7, #16]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	60fa      	str	r2, [r7, #12]
  return result;
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0b7      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022f2:	4b95      	ldr	r3, [pc, #596]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4992      	ldr	r1, [pc, #584]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002304:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a8d      	ldr	r2, [pc, #564]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002324:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f023 0203 	bic.w	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4985      	ldr	r1, [pc, #532]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002342:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	497e      	ldr	r1, [pc, #504]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002360:	4b79      	ldr	r3, [pc, #484]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4976      	ldr	r1, [pc, #472]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237e:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f023 0210 	bic.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	496f      	ldr	r1, [pc, #444]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	4967      	ldr	r1, [pc, #412]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f023 0220 	bic.w	r2, r3, #32
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4960      	ldr	r1, [pc, #384]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d8:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	4958      	ldr	r1, [pc, #352]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f6:	4b54      	ldr	r3, [pc, #336]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	4951      	ldr	r1, [pc, #324]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002414:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4949      	ldr	r1, [pc, #292]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002432:	4b45      	ldr	r3, [pc, #276]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4942      	ldr	r1, [pc, #264]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	4933      	ldr	r1, [pc, #204]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	492b      	ldr	r1, [pc, #172]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4924      	ldr	r1, [pc, #144]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	4915      	ldr	r1, [pc, #84]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	490d      	ldr	r1, [pc, #52]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	4906      	ldr	r1, [pc, #24]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00c      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002540:	4b01      	ldr	r3, [pc, #4]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	e002      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	490b      	ldr	r1, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002556:	4313      	orrs	r3, r2
 8002558:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002572:	4904      	ldr	r1, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002574:	4313      	orrs	r3, r2
 8002576:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3748      	adds	r7, #72	; 0x48
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e049      	b.n	800262e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe f888 	bl	80006c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 fd26 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d001      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04f      	b.n	80026f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <HAL_TIM_Base_Start_IT+0xc4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01d      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x76>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d018      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x76>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_TIM_Base_Start_IT+0xc8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x76>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_TIM_Base_Start_IT+0xcc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00e      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x76>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <HAL_TIM_Base_Start_IT+0xd0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d009      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x76>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_TIM_Base_Start_IT+0xd4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x76>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_TIM_Base_Start_IT+0xd8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d115      	bne.n	80026da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_TIM_Base_Start_IT+0xdc>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b06      	cmp	r3, #6
 80026be:	d015      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0xb4>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c6:	d011      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d8:	e008      	b.n	80026ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e000      	b.n	80026ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40000400 	.word	0x40000400
 8002704:	40000800 	.word	0x40000800
 8002708:	40013400 	.word	0x40013400
 800270c:	40014000 	.word	0x40014000
 8002710:	40015000 	.word	0x40015000
 8002714:	00010007 	.word	0x00010007

08002718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e049      	b.n	80027be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f841 	bl	80027c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f000 fc5e 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_TIM_PWM_Start+0x24>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e03c      	b.n	800287a <HAL_TIM_PWM_Start+0x9e>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d109      	bne.n	800281a <HAL_TIM_PWM_Start+0x3e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	e02f      	b.n	800287a <HAL_TIM_PWM_Start+0x9e>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d109      	bne.n	8002834 <HAL_TIM_PWM_Start+0x58>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e022      	b.n	800287a <HAL_TIM_PWM_Start+0x9e>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d109      	bne.n	800284e <HAL_TIM_PWM_Start+0x72>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e015      	b.n	800287a <HAL_TIM_PWM_Start+0x9e>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b10      	cmp	r3, #16
 8002852:	d109      	bne.n	8002868 <HAL_TIM_PWM_Start+0x8c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e008      	b.n	800287a <HAL_TIM_PWM_Start+0x9e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0a1      	b.n	80029c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start+0xb6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	e023      	b.n	80028da <HAL_TIM_PWM_Start+0xfe>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0xc6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	e01b      	b.n	80028da <HAL_TIM_PWM_Start+0xfe>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0xd6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b0:	e013      	b.n	80028da <HAL_TIM_PWM_Start+0xfe>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0xe6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028c0:	e00b      	b.n	80028da <HAL_TIM_PWM_Start+0xfe>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0xf6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	e003      	b.n	80028da <HAL_TIM_PWM_Start+0xfe>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 ffd6 	bl	8003894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a38      	ldr	r2, [pc, #224]	; (80029d0 <HAL_TIM_PWM_Start+0x1f4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_TIM_PWM_Start+0x148>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a37      	ldr	r2, [pc, #220]	; (80029d4 <HAL_TIM_PWM_Start+0x1f8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_TIM_PWM_Start+0x148>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a35      	ldr	r2, [pc, #212]	; (80029d8 <HAL_TIM_PWM_Start+0x1fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_TIM_PWM_Start+0x148>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_TIM_PWM_Start+0x200>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_TIM_PWM_Start+0x148>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_TIM_PWM_Start+0x204>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_TIM_PWM_Start+0x148>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <HAL_TIM_PWM_Start+0x208>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_TIM_PWM_Start+0x14c>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_TIM_PWM_Start+0x14e>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <HAL_TIM_PWM_Start+0x1f4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d01d      	beq.n	8002984 <HAL_TIM_PWM_Start+0x1a8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d018      	beq.n	8002984 <HAL_TIM_PWM_Start+0x1a8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_TIM_PWM_Start+0x20c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_TIM_PWM_Start+0x1a8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_TIM_PWM_Start+0x210>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00e      	beq.n	8002984 <HAL_TIM_PWM_Start+0x1a8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_TIM_PWM_Start+0x1f8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_TIM_PWM_Start+0x1a8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_PWM_Start+0x1fc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_TIM_PWM_Start+0x1a8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_TIM_PWM_Start+0x208>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d115      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_TIM_PWM_Start+0x214>)
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d015      	beq.n	80029c2 <HAL_TIM_PWM_Start+0x1e6>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d011      	beq.n	80029c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ae:	e008      	b.n	80029c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e000      	b.n	80029c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40013400 	.word	0x40013400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800
 80029e4:	40015000 	.word	0x40015000
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800
 80029f0:	00010007 	.word	0x00010007

080029f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0202 	mvn.w	r2, #2
 8002a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 facf 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fac1 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fad2 	bl	8002fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0204 	mvn.w	r2, #4
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 faa5 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa97 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 faa8 	bl	8002fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0208 	mvn.w	r2, #8
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2204      	movs	r2, #4
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa7b 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa6d 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa7e 	bl	8002fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0210 	mvn.w	r2, #16
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2208      	movs	r2, #8
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa51 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa43 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa54 	bl	8002fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0201 	mvn.w	r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fd fd68 	bl	8000648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b80      	cmp	r3, #128	; 0x80
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 ff34 	bl	8003a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b80      	cmp	r3, #128	; 0x80
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 ff27 	bl	8003a20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d10e      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa02 	bl	8003002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d10e      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0220 	mvn.w	r2, #32
 8002c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fee7 	bl	80039f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0fd      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x216>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b14      	cmp	r3, #20
 8002c5a:	f200 80f0 	bhi.w	8002e3e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002cb9 	.word	0x08002cb9
 8002c68:	08002e3f 	.word	0x08002e3f
 8002c6c:	08002e3f 	.word	0x08002e3f
 8002c70:	08002e3f 	.word	0x08002e3f
 8002c74:	08002cf9 	.word	0x08002cf9
 8002c78:	08002e3f 	.word	0x08002e3f
 8002c7c:	08002e3f 	.word	0x08002e3f
 8002c80:	08002e3f 	.word	0x08002e3f
 8002c84:	08002d3b 	.word	0x08002d3b
 8002c88:	08002e3f 	.word	0x08002e3f
 8002c8c:	08002e3f 	.word	0x08002e3f
 8002c90:	08002e3f 	.word	0x08002e3f
 8002c94:	08002d7b 	.word	0x08002d7b
 8002c98:	08002e3f 	.word	0x08002e3f
 8002c9c:	08002e3f 	.word	0x08002e3f
 8002ca0:	08002e3f 	.word	0x08002e3f
 8002ca4:	08002dbd 	.word	0x08002dbd
 8002ca8:	08002e3f 	.word	0x08002e3f
 8002cac:	08002e3f 	.word	0x08002e3f
 8002cb0:	08002e3f 	.word	0x08002e3f
 8002cb4:	08002dfd 	.word	0x08002dfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fa48 	bl	8003154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	619a      	str	r2, [r3, #24]
      break;
 8002cf6:	e0a3      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fac2 	bl	8003288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	021a      	lsls	r2, r3, #8
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	619a      	str	r2, [r3, #24]
      break;
 8002d38:	e082      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fb35 	bl	80033b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0208 	orr.w	r2, r2, #8
 8002d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0204 	bic.w	r2, r2, #4
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69d9      	ldr	r1, [r3, #28]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
      break;
 8002d78:	e062      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fba7 	bl	80034d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	021a      	lsls	r2, r3, #8
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	61da      	str	r2, [r3, #28]
      break;
 8002dba:	e041      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fbf6 	bl	80035b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002dfa:	e021      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc40 	bl	8003688 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e3c:	e000      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002e3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop

08002e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0a8      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d067      	beq.n	8002f78 <HAL_TIM_ConfigClockSource+0x124>
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d80b      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x70>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d073      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d802      	bhi.n	8002eba <HAL_TIM_ConfigClockSource+0x66>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d06f      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eb8:	e078      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d06c      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
 8002ebe:	2b30      	cmp	r3, #48	; 0x30
 8002ec0:	d06a      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002ec2:	e073      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ec4:	2b70      	cmp	r3, #112	; 0x70
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_TIM_ConfigClockSource+0x90>
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d804      	bhi.n	8002ed6 <HAL_TIM_ConfigClockSource+0x82>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d033      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xe4>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d041      	beq.n	8002f58 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002ed4:	e06a      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d066      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x156>
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee0:	d017      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ee2:	e063      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f000 fcae 	bl	8003854 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
      break;
 8002f10:	e04c      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f000 fc97 	bl	8003854 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f34:	609a      	str	r2, [r3, #8]
      break;
 8002f36:	e039      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f000 fc0b 	bl	8003760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2150      	movs	r1, #80	; 0x50
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fc64 	bl	800381e <TIM_ITRx_SetConfig>
      break;
 8002f56:	e029      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f000 fc2a 	bl	80037be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2160      	movs	r1, #96	; 0x60
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fc54 	bl	800381e <TIM_ITRx_SetConfig>
      break;
 8002f76:	e019      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f000 fbeb 	bl	8003760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fc44 	bl	800381e <TIM_ITRx_SetConfig>
      break;
 8002f96:	e009      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fc3b 	bl	800381e <TIM_ITRx_SetConfig>
        break;
 8002fa8:	e000      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a42      	ldr	r2, [pc, #264]	; (8003134 <TIM_Base_SetConfig+0x11c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003036:	d00f      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <TIM_Base_SetConfig+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <TIM_Base_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <TIM_Base_SetConfig+0x128>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <TIM_Base_SetConfig+0x12c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a31      	ldr	r2, [pc, #196]	; (8003134 <TIM_Base_SetConfig+0x11c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01f      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d01b      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2e      	ldr	r2, [pc, #184]	; (8003138 <TIM_Base_SetConfig+0x120>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d017      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2d      	ldr	r2, [pc, #180]	; (800313c <TIM_Base_SetConfig+0x124>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <TIM_Base_SetConfig+0x128>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00f      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2c      	ldr	r2, [pc, #176]	; (8003148 <TIM_Base_SetConfig+0x130>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00b      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2b      	ldr	r2, [pc, #172]	; (800314c <TIM_Base_SetConfig+0x134>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <TIM_Base_SetConfig+0x138>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a25      	ldr	r2, [pc, #148]	; (8003144 <TIM_Base_SetConfig+0x12c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d108      	bne.n	80030c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <TIM_Base_SetConfig+0x11c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <TIM_Base_SetConfig+0x100>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <TIM_Base_SetConfig+0x128>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x100>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <TIM_Base_SetConfig+0x130>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x100>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <TIM_Base_SetConfig+0x134>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x100>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a11      	ldr	r2, [pc, #68]	; (8003150 <TIM_Base_SetConfig+0x138>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x100>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <TIM_Base_SetConfig+0x12c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40000400 	.word	0x40000400
 800313c:	40000800 	.word	0x40000800
 8003140:	40013400 	.word	0x40013400
 8003144:	40015000 	.word	0x40015000
 8003148:	40014000 	.word	0x40014000
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800

08003154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f023 0302 	bic.w	r3, r3, #2
 80031a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a30      	ldr	r2, [pc, #192]	; (8003270 <TIM_OC1_SetConfig+0x11c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <TIM_OC1_SetConfig+0x88>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <TIM_OC1_SetConfig+0x120>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00f      	beq.n	80031dc <TIM_OC1_SetConfig+0x88>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a2e      	ldr	r2, [pc, #184]	; (8003278 <TIM_OC1_SetConfig+0x124>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00b      	beq.n	80031dc <TIM_OC1_SetConfig+0x88>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a2d      	ldr	r2, [pc, #180]	; (800327c <TIM_OC1_SetConfig+0x128>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <TIM_OC1_SetConfig+0x88>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <TIM_OC1_SetConfig+0x12c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_OC1_SetConfig+0x88>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <TIM_OC1_SetConfig+0x130>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10c      	bne.n	80031f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0308 	bic.w	r3, r3, #8
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <TIM_OC1_SetConfig+0x11c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_OC1_SetConfig+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <TIM_OC1_SetConfig+0x120>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_OC1_SetConfig+0xd2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <TIM_OC1_SetConfig+0x124>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_OC1_SetConfig+0xd2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1a      	ldr	r2, [pc, #104]	; (800327c <TIM_OC1_SetConfig+0x128>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_OC1_SetConfig+0xd2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <TIM_OC1_SetConfig+0x12c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_OC1_SetConfig+0xd2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <TIM_OC1_SetConfig+0x130>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d111      	bne.n	800324a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40013400 	.word	0x40013400
 8003278:	40014000 	.word	0x40014000
 800327c:	40014400 	.word	0x40014400
 8003280:	40014800 	.word	0x40014800
 8003284:	40015000 	.word	0x40015000

08003288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0210 	bic.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0320 	bic.w	r3, r3, #32
 80032d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <TIM_OC2_SetConfig+0x110>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_OC2_SetConfig+0x74>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a2b      	ldr	r2, [pc, #172]	; (800339c <TIM_OC2_SetConfig+0x114>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_OC2_SetConfig+0x74>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <TIM_OC2_SetConfig+0x118>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10d      	bne.n	8003318 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <TIM_OC2_SetConfig+0x110>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <TIM_OC2_SetConfig+0xc0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <TIM_OC2_SetConfig+0x114>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_OC2_SetConfig+0xc0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <TIM_OC2_SetConfig+0x11c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_OC2_SetConfig+0xc0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <TIM_OC2_SetConfig+0x120>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_OC2_SetConfig+0xc0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <TIM_OC2_SetConfig+0x124>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_OC2_SetConfig+0xc0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <TIM_OC2_SetConfig+0x118>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d113      	bne.n	8003370 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003356:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40013400 	.word	0x40013400
 80033a0:	40015000 	.word	0x40015000
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800

080033b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <TIM_OC3_SetConfig+0x10c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_OC3_SetConfig+0x72>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2a      	ldr	r2, [pc, #168]	; (80034c0 <TIM_OC3_SetConfig+0x110>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_OC3_SetConfig+0x72>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <TIM_OC3_SetConfig+0x114>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10d      	bne.n	800343e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800343c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <TIM_OC3_SetConfig+0x10c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <TIM_OC3_SetConfig+0xbe>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <TIM_OC3_SetConfig+0x110>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00f      	beq.n	800346e <TIM_OC3_SetConfig+0xbe>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <TIM_OC3_SetConfig+0x118>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_OC3_SetConfig+0xbe>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <TIM_OC3_SetConfig+0x11c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_OC3_SetConfig+0xbe>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <TIM_OC3_SetConfig+0x120>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_OC3_SetConfig+0xbe>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <TIM_OC3_SetConfig+0x114>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d113      	bne.n	8003496 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800347c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40013400 	.word	0x40013400
 80034c4:	40015000 	.word	0x40015000
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800

080034d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	031b      	lsls	r3, r3, #12
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <TIM_OC4_SetConfig+0xc8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <TIM_OC4_SetConfig+0x8c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <TIM_OC4_SetConfig+0xcc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00f      	beq.n	8003560 <TIM_OC4_SetConfig+0x8c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <TIM_OC4_SetConfig+0xd0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00b      	beq.n	8003560 <TIM_OC4_SetConfig+0x8c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <TIM_OC4_SetConfig+0xd4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_OC4_SetConfig+0x8c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a16      	ldr	r2, [pc, #88]	; (80035ac <TIM_OC4_SetConfig+0xd8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC4_SetConfig+0x8c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <TIM_OC4_SetConfig+0xdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d109      	bne.n	8003574 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	40015000 	.word	0x40015000

080035b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <TIM_OC5_SetConfig+0xbc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <TIM_OC5_SetConfig+0x82>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <TIM_OC5_SetConfig+0xc0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00f      	beq.n	8003636 <TIM_OC5_SetConfig+0x82>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a17      	ldr	r2, [pc, #92]	; (8003678 <TIM_OC5_SetConfig+0xc4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_OC5_SetConfig+0x82>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <TIM_OC5_SetConfig+0xc8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_OC5_SetConfig+0x82>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <TIM_OC5_SetConfig+0xcc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC5_SetConfig+0x82>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <TIM_OC5_SetConfig+0xd0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d109      	bne.n	800364a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800
 8003684:	40015000 	.word	0x40015000

08003688 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	051b      	lsls	r3, r3, #20
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <TIM_OC6_SetConfig+0xc0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <TIM_OC6_SetConfig+0x84>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a19      	ldr	r2, [pc, #100]	; (800374c <TIM_OC6_SetConfig+0xc4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00f      	beq.n	800370c <TIM_OC6_SetConfig+0x84>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a18      	ldr	r2, [pc, #96]	; (8003750 <TIM_OC6_SetConfig+0xc8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <TIM_OC6_SetConfig+0x84>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a17      	ldr	r2, [pc, #92]	; (8003754 <TIM_OC6_SetConfig+0xcc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <TIM_OC6_SetConfig+0x84>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <TIM_OC6_SetConfig+0xd0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_OC6_SetConfig+0x84>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <TIM_OC6_SetConfig+0xd4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d109      	bne.n	8003720 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	029b      	lsls	r3, r3, #10
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40013400 	.word	0x40013400
 8003750:	40014000 	.word	0x40014000
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800
 800375c:	40015000 	.word	0x40015000

08003760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0201 	bic.w	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 030a 	bic.w	r3, r3, #10
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037be:	b480      	push	{r7}
 80037c0:	b087      	sub	sp, #28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0210 	bic.w	r2, r3, #16
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	f043 0307 	orr.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	431a      	orrs	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	2201      	movs	r2, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e06d      	b.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800393c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d01d      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d018      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10c      	bne.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40015000 	.word	0x40015000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40014000 	.word	0x40014000

080039f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a46:	2b84      	cmp	r3, #132	; 0x84
 8003a48:	d005      	beq.n	8003a56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	3303      	adds	r3, #3
 8003a54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a6a:	f3ef 8305 	mrs	r3, IPSR
 8003a6e:	607b      	str	r3, [r7, #4]
  return(result);
 8003a70:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a8c:	f001 f8f0 	bl	8004c70 <vTaskStartScheduler>
  
  return osOK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a98:	b089      	sub	sp, #36	; 0x24
 8003a9a:	af04      	add	r7, sp, #16
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <osThreadCreate+0x54>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01c      	beq.n	8003aea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685c      	ldr	r4, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681d      	ldr	r5, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691e      	ldr	r6, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ffb6 	bl	8003a34 <makeFreeRtosPriority>
 8003ac8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ad2:	9202      	str	r2, [sp, #8]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	9100      	str	r1, [sp, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4632      	mov	r2, r6
 8003adc:	4629      	mov	r1, r5
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f000 ff0b 	bl	80048fa <xTaskCreateStatic>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e01c      	b.n	8003b24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685c      	ldr	r4, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af6:	b29e      	uxth	r6, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff98 	bl	8003a34 <makeFreeRtosPriority>
 8003b04:	4602      	mov	r2, r0
 8003b06:	f107 030c 	add.w	r3, r7, #12
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	9200      	str	r2, [sp, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4632      	mov	r2, r6
 8003b12:	4629      	mov	r1, r5
 8003b14:	4620      	mov	r0, r4
 8003b16:	f000 ff49 	bl	80049ac <xTaskCreate>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b24:	68fb      	ldr	r3, [r7, #12]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <osDelay+0x16>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	e000      	b.n	8003b46 <osDelay+0x18>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f85e 	bl	8004c08 <vTaskDelay>
  
  return osOK;
 8003b4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af02      	add	r7, sp, #8
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10b      	bne.n	8003b86 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2303      	movs	r3, #3
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f000 f9bd 	bl	8003efc <xQueueGenericCreateStatic>
 8003b82:	4603      	mov	r3, r0
 8003b84:	e016      	b.n	8003bb4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e014      	b.n	8003bb4 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d110      	bne.n	8003bb2 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003b90:	2203      	movs	r2, #3
 8003b92:	2100      	movs	r1, #0
 8003b94:	2001      	movs	r0, #1
 8003b96:	f000 fa23 	bl	8003fe0 <xQueueGenericCreate>
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <osSemaphoreCreate+0x58>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fa75 	bl	8004098 <xQueueGenericSend>
      return sema;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	e000      	b.n	8003bb4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003bb2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	e03a      	b.n	8003c4a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d103      	bne.n	8003be8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e009      	b.n	8003bfc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <osSemaphoreWait+0x40>
      ticks = 1;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003bfc:	f7ff ff32 	bl	8003a64 <inHandlerMode>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d017      	beq.n	8003c36 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fcce 	bl	80045b0 <xQueueReceiveFromISR>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <osSemaphoreWait+0x62>
      return osErrorOS;
 8003c1a:	23ff      	movs	r3, #255	; 0xff
 8003c1c:	e015      	b.n	8003c4a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d011      	beq.n	8003c48 <osSemaphoreWait+0x8c>
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <osSemaphoreWait+0x98>)
 8003c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	e008      	b.n	8003c48 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003c36:	68f9      	ldr	r1, [r7, #12]
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fbb1 	bl	80043a0 <xQueueSemaphoreTake>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d001      	beq.n	8003c48 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003c44:	23ff      	movs	r3, #255	; 0xff
 8003c46:	e000      	b.n	8003c4a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003c68:	f7ff fefc 	bl	8003a64 <inHandlerMode>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fb07 	bl	800428c <xQueueGiveFromISR>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d001      	beq.n	8003c88 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003c84:	23ff      	movs	r3, #255	; 0xff
 8003c86:	e017      	b.n	8003cb8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <osSemaphoreRelease+0x5e>
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <osSemaphoreRelease+0x68>)
 8003c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	e00a      	b.n	8003cb6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9f6 	bl	8004098 <xQueueGenericSend>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d001      	beq.n	8003cb6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003cb2:	23ff      	movs	r3, #255	; 0xff
 8003cb4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 0208 	add.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f103 0208 	add.w	r2, r3, #8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f103 0208 	add.w	r2, r3, #8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d103      	bne.n	8003d86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e00c      	b.n	8003da0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e002      	b.n	8003d94 <vListInsert+0x2e>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d2f6      	bcs.n	8003d8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	601a      	str	r2, [r3, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6892      	ldr	r2, [r2, #8]
 8003dee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6852      	ldr	r2, [r2, #4]
 8003df8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d103      	bne.n	8003e0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e40:	f04f 0320 	mov.w	r3, #32
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	e7fe      	b.n	8003e52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e54:	f001 fe72 	bl	8005b3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	441a      	add	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	3b01      	subs	r3, #1
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	441a      	add	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d114      	bne.n	8003ed4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01a      	beq.n	8003ee8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3310      	adds	r3, #16
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 f91c 	bl	80050f4 <xTaskRemoveFromEventList>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <xQueueGenericReset+0xcc>)
 8003ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	e009      	b.n	8003ee8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3310      	adds	r3, #16
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fef3 	bl	8003cc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff feee 	bl	8003cc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ee8:	f001 fe56 	bl	8005b98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003eec:	2301      	movs	r3, #1
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	; 0x38
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <xQueueGenericCreateStatic+0x28>
 8003f10:	f04f 0320 	mov.w	r3, #32
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f22:	e7fe      	b.n	8003f22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <xQueueGenericCreateStatic+0x42>
 8003f2a:	f04f 0320 	mov.w	r3, #32
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3c:	e7fe      	b.n	8003f3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <xQueueGenericCreateStatic+0x4e>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <xQueueGenericCreateStatic+0x52>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <xQueueGenericCreateStatic+0x54>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <xQueueGenericCreateStatic+0x6c>
 8003f54:	f04f 0320 	mov.w	r3, #32
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	623b      	str	r3, [r7, #32]
 8003f66:	e7fe      	b.n	8003f66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <xQueueGenericCreateStatic+0x78>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <xQueueGenericCreateStatic+0x7c>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <xQueueGenericCreateStatic+0x7e>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <xQueueGenericCreateStatic+0x96>
 8003f7e:	f04f 0320 	mov.w	r3, #32
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	e7fe      	b.n	8003f90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f92:	2348      	movs	r3, #72	; 0x48
 8003f94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b48      	cmp	r3, #72	; 0x48
 8003f9a:	d009      	beq.n	8003fb0 <xQueueGenericCreateStatic+0xb4>
 8003f9c:	f04f 0320 	mov.w	r3, #32
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e7fe      	b.n	8003fae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f842 	bl	800405a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3730      	adds	r7, #48	; 0x30
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <xQueueGenericCreate+0x28>
 8003ff4:	f04f 0320 	mov.w	r3, #32
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e7fe      	b.n	8004006 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e004      	b.n	800401e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3348      	adds	r3, #72	; 0x48
 8004022:	4618      	mov	r0, r3
 8004024:	f001 fea4 	bl	8005d70 <pvPortMalloc>
 8004028:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00f      	beq.n	8004050 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	3348      	adds	r3, #72	; 0x48
 8004034:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800403e:	79fa      	ldrb	r2, [r7, #7]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f805 	bl	800405a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004050:	69bb      	ldr	r3, [r7, #24]
	}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e002      	b.n	800407c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004088:	2101      	movs	r1, #1
 800408a:	69b8      	ldr	r0, [r7, #24]
 800408c:	f7ff fece 	bl	8003e2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040a6:	2300      	movs	r3, #0
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <xQueueGenericSend+0x30>
 80040b4:	f04f 0320 	mov.w	r3, #32
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c6:	e7fe      	b.n	80040c6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <xQueueGenericSend+0x3e>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <xQueueGenericSend+0x42>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueGenericSend+0x44>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <xQueueGenericSend+0x5c>
 80040e0:	f04f 0320 	mov.w	r3, #32
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	e7fe      	b.n	80040f2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d103      	bne.n	8004102 <xQueueGenericSend+0x6a>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <xQueueGenericSend+0x6e>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <xQueueGenericSend+0x70>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <xQueueGenericSend+0x88>
 800410c:	f04f 0320 	mov.w	r3, #32
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	e7fe      	b.n	800411e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004120:	f001 f9a4 	bl	800546c <xTaskGetSchedulerState>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <xQueueGenericSend+0x98>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <xQueueGenericSend+0x9c>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <xQueueGenericSend+0x9e>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <xQueueGenericSend+0xb6>
 800413a:	f04f 0320 	mov.w	r3, #32
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e7fe      	b.n	800414c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800414e:	f001 fcf5 	bl	8005b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <xQueueGenericSend+0xcc>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d129      	bne.n	80041b8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800416a:	f000 fab6 	bl	80046da <prvCopyDataToQueue>
 800416e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d010      	beq.n	800419a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	3324      	adds	r3, #36	; 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f000 ffb9 	bl	80050f4 <xTaskRemoveFromEventList>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004188:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <xQueueGenericSend+0x1f0>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	e00a      	b.n	80041b0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041a0:	4b39      	ldr	r3, [pc, #228]	; (8004288 <xQueueGenericSend+0x1f0>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041b0:	f001 fcf2 	bl	8005b98 <vPortExitCritical>
				return pdPASS;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e063      	b.n	8004280 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041be:	f001 fceb 	bl	8005b98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e05c      	b.n	8004280 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fff1 	bl	80051b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041da:	f001 fcdd 	bl	8005b98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041de:	f000 fda5 	bl	8004d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e2:	f001 fcab 	bl	8005b3c <vPortEnterCritical>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d103      	bne.n	80041fc <xQueueGenericSend+0x164>
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004202:	b25b      	sxtb	r3, r3
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d103      	bne.n	8004212 <xQueueGenericSend+0x17a>
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004212:	f001 fcc1 	bl	8005b98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004216:	1d3a      	adds	r2, r7, #4
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 ffe0 	bl	80051e4 <xTaskCheckForTimeOut>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d124      	bne.n	8004274 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800422a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800422c:	f000 fb4d 	bl	80048ca <prvIsQueueFull>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	3310      	adds	r3, #16
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 ff34 	bl	80050ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004246:	f000 fad8 	bl	80047fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800424a:	f000 fd7d 	bl	8004d48 <xTaskResumeAll>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af7c 	bne.w	800414e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <xQueueGenericSend+0x1f0>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	e772      	b.n	800414e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800426a:	f000 fac6 	bl	80047fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800426e:	f000 fd6b 	bl	8004d48 <xTaskResumeAll>
 8004272:	e76c      	b.n	800414e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004276:	f000 fac0 	bl	80047fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800427a:	f000 fd65 	bl	8004d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800427e:	2300      	movs	r3, #0
		}
	}
}
 8004280:	4618      	mov	r0, r3
 8004282:	3738      	adds	r7, #56	; 0x38
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08e      	sub	sp, #56	; 0x38
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <xQueueGiveFromISR+0x28>
 80042a0:	f04f 0320 	mov.w	r3, #32
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	e7fe      	b.n	80042b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <xQueueGiveFromISR+0x44>
 80042bc:	f04f 0320 	mov.w	r3, #32
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e7fe      	b.n	80042ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <xQueueGiveFromISR+0x54>
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <xQueueGiveFromISR+0x58>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <xQueueGiveFromISR+0x5a>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <xQueueGiveFromISR+0x72>
 80042ea:	f04f 0320 	mov.w	r3, #32
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	e7fe      	b.n	80042fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042fe:	f001 fcf9 	bl	8005cf4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004302:	f3ef 8211 	mrs	r2, BASEPRI
 8004306:	f04f 0320 	mov.w	r3, #32
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	617a      	str	r2, [r7, #20]
 8004318:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800431a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432a:	429a      	cmp	r2, r3
 800432c:	d22b      	bcs.n	8004386 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004340:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d112      	bne.n	8004370 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	3324      	adds	r3, #36	; 0x24
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fecc 	bl	80050f4 <xTaskRemoveFromEventList>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00e      	beq.n	8004380 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e007      	b.n	8004380 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004374:	3301      	adds	r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	b25a      	sxtb	r2, r3
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004380:	2301      	movs	r3, #1
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
 8004384:	e001      	b.n	800438a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004386:	2300      	movs	r3, #0
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004396:	4618      	mov	r0, r3
 8004398:	3738      	adds	r7, #56	; 0x38
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08e      	sub	sp, #56	; 0x38
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80043bc:	f04f 0320 	mov.w	r3, #32
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	e7fe      	b.n	80043ce <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <xQueueSemaphoreTake+0x4c>
 80043d8:	f04f 0320 	mov.w	r3, #32
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e7fe      	b.n	80043ea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ec:	f001 f83e 	bl	800546c <xTaskGetSchedulerState>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <xQueueSemaphoreTake+0x5c>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <xQueueSemaphoreTake+0x60>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <xQueueSemaphoreTake+0x62>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <xQueueSemaphoreTake+0x7a>
 8004406:	f04f 0320 	mov.w	r3, #32
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	e7fe      	b.n	8004418 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800441a:	f001 fb8f 	bl	8005b3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d024      	beq.n	8004474 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800443a:	f001 f9dd 	bl	80057f8 <pvTaskIncrementMutexHeldCount>
 800443e:	4602      	mov	r2, r0
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00f      	beq.n	800446c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	3310      	adds	r3, #16
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fe4f 	bl	80050f4 <xTaskRemoveFromEventList>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <xQueueSemaphoreTake+0x20c>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800446c:	f001 fb94 	bl	8005b98 <vPortExitCritical>
				return pdPASS;
 8004470:	2301      	movs	r3, #1
 8004472:	e096      	b.n	80045a2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d110      	bne.n	800449c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <xQueueSemaphoreTake+0xf4>
 8004480:	f04f 0320 	mov.w	r3, #32
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e7fe      	b.n	8004492 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004494:	f001 fb80 	bl	8005b98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004498:	2300      	movs	r3, #0
 800449a:	e082      	b.n	80045a2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fe86 	bl	80051b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044b0:	f001 fb72 	bl	8005b98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044b4:	f000 fc3a 	bl	8004d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044b8:	f001 fb40 	bl	8005b3c <vPortEnterCritical>
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d103      	bne.n	80044d2 <xQueueSemaphoreTake+0x132>
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d103      	bne.n	80044e8 <xQueueSemaphoreTake+0x148>
 80044e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e8:	f001 fb56 	bl	8005b98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ec:	463a      	mov	r2, r7
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fe75 	bl	80051e4 <xTaskCheckForTimeOut>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d132      	bne.n	8004566 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004502:	f000 f9cc 	bl	800489e <prvIsQueueEmpty>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d026      	beq.n	800455a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004514:	f001 fb12 	bl	8005b3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 ffc3 	bl	80054a8 <xTaskPriorityInherit>
 8004522:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004524:	f001 fb38 	bl	8005b98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fdbb 	bl	80050ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004538:	f000 f95f 	bl	80047fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800453c:	f000 fc04 	bl	8004d48 <xTaskResumeAll>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	f47f af69 	bne.w	800441a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004548:	4b18      	ldr	r3, [pc, #96]	; (80045ac <xQueueSemaphoreTake+0x20c>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	e75f      	b.n	800441a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800455a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800455c:	f000 f94d 	bl	80047fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004560:	f000 fbf2 	bl	8004d48 <xTaskResumeAll>
 8004564:	e759      	b.n	800441a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004568:	f000 f947 	bl	80047fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456c:	f000 fbec 	bl	8004d48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004572:	f000 f994 	bl	800489e <prvIsQueueEmpty>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	f43f af4e 	beq.w	800441a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004584:	f001 fada 	bl	8005b3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800458a:	f000 f88e 	bl	80046aa <prvGetDisinheritPriorityAfterTimeout>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f890 	bl	80056bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800459c:	f001 fafc 	bl	8005b98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3738      	adds	r7, #56	; 0x38
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08e      	sub	sp, #56	; 0x38
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <xQueueReceiveFromISR+0x2a>
 80045c6:	f04f 0320 	mov.w	r3, #32
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	e7fe      	b.n	80045d8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <xQueueReceiveFromISR+0x38>
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <xQueueReceiveFromISR+0x3c>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <xQueueReceiveFromISR+0x3e>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <xQueueReceiveFromISR+0x56>
 80045f2:	f04f 0320 	mov.w	r3, #32
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e7fe      	b.n	8004604 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004606:	f001 fb75 	bl	8005cf4 <vPortValidateInterruptPriority>
	__asm volatile
 800460a:	f3ef 8211 	mrs	r2, BASEPRI
 800460e:	f04f 0320 	mov.w	r3, #32
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	61ba      	str	r2, [r7, #24]
 8004620:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004622:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02f      	beq.n	8004692 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004640:	f000 f8b5 	bl	80047ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	1e5a      	subs	r2, r3, #1
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800464c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d112      	bne.n	800467c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	3310      	adds	r3, #16
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fd46 	bl	80050f4 <xTaskRemoveFromEventList>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e007      	b.n	800468c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800467c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004680:	3301      	adds	r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	b25a      	sxtb	r2, r3
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800468c:	2301      	movs	r3, #1
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
 8004690:	e001      	b.n	8004696 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	613b      	str	r3, [r7, #16]
	__asm volatile
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3738      	adds	r7, #56	; 0x38
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1c3 0307 	rsb	r3, r3, #7
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e001      	b.n	80046cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80046cc:	68fb      	ldr	r3, [r7, #12]
	}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10d      	bne.n	8004714 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d14d      	bne.n	800479c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 ff55 	bl	80055b4 <xTaskPriorityDisinherit>
 800470a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	e043      	b.n	800479c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6898      	ldr	r0, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	461a      	mov	r2, r3
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	f001 fd1d 	bl	8006164 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	441a      	add	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d32b      	bcc.n	800479c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	e026      	b.n	800479c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68d8      	ldr	r0, [r3, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	461a      	mov	r2, r3
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	f001 fd03 	bl	8006164 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	425b      	negs	r3, r3
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d207      	bcs.n	800478a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	425b      	negs	r3, r3
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d105      	bne.n	800479c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3b01      	subs	r3, #1
 800479a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047a4:	697b      	ldr	r3, [r7, #20]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d018      	beq.n	80047f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	441a      	add	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d303      	bcc.n	80047e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68d9      	ldr	r1, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	461a      	mov	r2, r3
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f001 fcb9 	bl	8006164 <memcpy>
	}
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004802:	f001 f99b 	bl	8005b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800480c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800480e:	e011      	b.n	8004834 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d012      	beq.n	800483e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3324      	adds	r3, #36	; 0x24
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fc69 	bl	80050f4 <xTaskRemoveFromEventList>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004828:	f000 fd3c 	bl	80052a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	3b01      	subs	r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	dce9      	bgt.n	8004810 <prvUnlockQueue+0x16>
 800483c:	e000      	b.n	8004840 <prvUnlockQueue+0x46>
					break;
 800483e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	22ff      	movs	r2, #255	; 0xff
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004848:	f001 f9a6 	bl	8005b98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800484c:	f001 f976 	bl	8005b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004856:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004858:	e011      	b.n	800487e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3310      	adds	r3, #16
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fc44 	bl	80050f4 <xTaskRemoveFromEventList>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004872:	f000 fd17 	bl	80052a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	3b01      	subs	r3, #1
 800487a:	b2db      	uxtb	r3, r3
 800487c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800487e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004882:	2b00      	cmp	r3, #0
 8004884:	dce9      	bgt.n	800485a <prvUnlockQueue+0x60>
 8004886:	e000      	b.n	800488a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004888:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004892:	f001 f981 	bl	8005b98 <vPortExitCritical>
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048a6:	f001 f949 	bl	8005b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e001      	b.n	80048bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048bc:	f001 f96c 	bl	8005b98 <vPortExitCritical>

	return xReturn;
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048d2:	f001 f933 	bl	8005b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	429a      	cmp	r2, r3
 80048e0:	d102      	bne.n	80048e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e001      	b.n	80048ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 f954 	bl	8005b98 <vPortExitCritical>

	return xReturn;
 80048f0:	68fb      	ldr	r3, [r7, #12]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b08e      	sub	sp, #56	; 0x38
 80048fe:	af04      	add	r7, sp, #16
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <xTaskCreateStatic+0x28>
	__asm volatile
 800490e:	f04f 0320 	mov.w	r3, #32
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	e7fe      	b.n	8004920 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <xTaskCreateStatic+0x42>
 8004928:	f04f 0320 	mov.w	r3, #32
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e7fe      	b.n	800493a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800493c:	2354      	movs	r3, #84	; 0x54
 800493e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b54      	cmp	r3, #84	; 0x54
 8004944:	d009      	beq.n	800495a <xTaskCreateStatic+0x60>
 8004946:	f04f 0320 	mov.w	r3, #32
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e7fe      	b.n	8004958 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01e      	beq.n	800499e <xTaskCreateStatic+0xa4>
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004978:	2300      	movs	r3, #0
 800497a:	9303      	str	r3, [sp, #12]
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	9302      	str	r3, [sp, #8]
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f850 	bl	8004a36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004998:	f000 f8cc 	bl	8004b34 <prvAddNewTaskToReadyList>
 800499c:	e001      	b.n	80049a2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049a2:	697b      	ldr	r3, [r7, #20]
	}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af04      	add	r7, sp, #16
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 f9d5 	bl	8005d70 <pvPortMalloc>
 80049c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80049ce:	2054      	movs	r0, #84	; 0x54
 80049d0:	f001 f9ce 	bl	8005d70 <pvPortMalloc>
 80049d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
 80049e2:	e005      	b.n	80049f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049e4:	6978      	ldr	r0, [r7, #20]
 80049e6:	f001 fa85 	bl	8005ef4 <vPortFree>
 80049ea:	e001      	b.n	80049f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d017      	beq.n	8004a26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	2300      	movs	r3, #0
 8004a02:	9303      	str	r3, [sp, #12]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f80e 	bl	8004a36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1a:	69f8      	ldr	r0, [r7, #28]
 8004a1c:	f000 f88a 	bl	8004b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a20:	2301      	movs	r3, #1
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e002      	b.n	8004a2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b088      	sub	sp, #32
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <prvInitialiseNewTask+0x46>
 8004a68:	f04f 0320 	mov.w	r3, #32
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	e7fe      	b.n	8004a7a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e012      	b.n	8004aa8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	7819      	ldrb	r1, [r3, #0]
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3334      	adds	r3, #52	; 0x34
 8004a92:	460a      	mov	r2, r1
 8004a94:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b0f      	cmp	r3, #15
 8004aac:	d9e9      	bls.n	8004a82 <prvInitialiseNewTask+0x4c>
 8004aae:	e000      	b.n	8004ab2 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004ab0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d901      	bls.n	8004ac4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ac0:	2306      	movs	r3, #6
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ace:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff f912 	bl	8003d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	3318      	adds	r3, #24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff f90d 	bl	8003d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	f1c3 0207 	rsb	r2, r3, #7
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2200      	movs	r2, #0
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	68f9      	ldr	r1, [r7, #12]
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f000 feea 	bl	80058ec <pxPortInitialiseStack>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2a:	bf00      	nop
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b3c:	f000 fffe 	bl	8005b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b40:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <prvAddNewTaskToReadyList+0xb8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a29      	ldr	r2, [pc, #164]	; (8004bec <prvAddNewTaskToReadyList+0xb8>)
 8004b48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b4a:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <prvAddNewTaskToReadyList+0xbc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <prvAddNewTaskToReadyList+0xbc>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <prvAddNewTaskToReadyList+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d110      	bne.n	8004b82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b60:	f000 fbc4 	bl	80052ec <prvInitialiseTaskLists>
 8004b64:	e00d      	b.n	8004b82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b66:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <prvAddNewTaskToReadyList+0xc0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <prvAddNewTaskToReadyList+0xbc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d802      	bhi.n	8004b82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b7c:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <prvAddNewTaskToReadyList+0xbc>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <prvAddNewTaskToReadyList+0xc4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <prvAddNewTaskToReadyList+0xc4>)
 8004b8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <prvAddNewTaskToReadyList+0xc8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <prvAddNewTaskToReadyList+0xc8>)
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <prvAddNewTaskToReadyList+0xcc>)
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f7ff f8b2 	bl	8003d1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bba:	f000 ffed 	bl	8005b98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <prvAddNewTaskToReadyList+0xc0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvAddNewTaskToReadyList+0xbc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d207      	bcs.n	8004be4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <prvAddNewTaskToReadyList+0xd0>)
 8004bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000380 	.word	0x20000380
 8004bf0:	20000280 	.word	0x20000280
 8004bf4:	2000038c 	.word	0x2000038c
 8004bf8:	2000039c 	.word	0x2000039c
 8004bfc:	20000388 	.word	0x20000388
 8004c00:	20000284 	.word	0x20000284
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c1a:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <vTaskDelay+0x60>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <vTaskDelay+0x2e>
 8004c22:	f04f 0320 	mov.w	r3, #32
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	e7fe      	b.n	8004c34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004c36:	f000 f879 	bl	8004d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fdef 	bl	8005820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c42:	f000 f881 	bl	8004d48 <xTaskResumeAll>
 8004c46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d107      	bne.n	8004c5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <vTaskDelay+0x64>)
 8004c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200003a8 	.word	0x200003a8
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c7e:	463a      	mov	r2, r7
 8004c80:	1d39      	adds	r1, r7, #4
 8004c82:	f107 0308 	add.w	r3, r7, #8
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fb faaa 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	9202      	str	r2, [sp, #8]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	491d      	ldr	r1, [pc, #116]	; (8004d14 <vTaskStartScheduler+0xa4>)
 8004ca0:	481d      	ldr	r0, [pc, #116]	; (8004d18 <vTaskStartScheduler+0xa8>)
 8004ca2:	f7ff fe2a 	bl	80048fa <xTaskCreateStatic>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <vTaskStartScheduler+0xac>)
 8004caa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <vTaskStartScheduler+0xac>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e001      	b.n	8004cbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d115      	bne.n	8004cf0 <vTaskStartScheduler+0x80>
 8004cc4:	f04f 0320 	mov.w	r3, #32
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <vTaskStartScheduler+0xb0>)
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <vTaskStartScheduler+0xb4>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ce4:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <vTaskStartScheduler+0xb8>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cea:	f000 fe89 	bl	8005a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cee:	e00d      	b.n	8004d0c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d109      	bne.n	8004d0c <vTaskStartScheduler+0x9c>
 8004cf8:	f04f 0320 	mov.w	r3, #32
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e7fe      	b.n	8004d0a <vTaskStartScheduler+0x9a>
}
 8004d0c:	bf00      	nop
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08006210 	.word	0x08006210
 8004d18:	080052bd 	.word	0x080052bd
 8004d1c:	200003a4 	.word	0x200003a4
 8004d20:	200003a0 	.word	0x200003a0
 8004d24:	2000038c 	.word	0x2000038c
 8004d28:	20000384 	.word	0x20000384

08004d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <vTaskSuspendAll+0x18>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a03      	ldr	r2, [pc, #12]	; (8004d44 <vTaskSuspendAll+0x18>)
 8004d38:	6013      	str	r3, [r2, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	200003a8 	.word	0x200003a8

08004d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d56:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <xTaskResumeAll+0x114>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <xTaskResumeAll+0x2a>
 8004d5e:	f04f 0320 	mov.w	r3, #32
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	e7fe      	b.n	8004d70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d72:	f000 fee3 	bl	8005b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d76:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <xTaskResumeAll+0x114>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	4a37      	ldr	r2, [pc, #220]	; (8004e5c <xTaskResumeAll+0x114>)
 8004d7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <xTaskResumeAll+0x114>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d161      	bne.n	8004e4c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d88:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <xTaskResumeAll+0x118>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05d      	beq.n	8004e4c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d90:	e02e      	b.n	8004df0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d92:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <xTaskResumeAll+0x11c>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff f81a 	bl	8003dd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff f815 	bl	8003dd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	2201      	movs	r2, #1
 8004db4:	409a      	lsls	r2, r3
 8004db6:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <xTaskResumeAll+0x120>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <xTaskResumeAll+0x120>)
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <xTaskResumeAll+0x124>)
 8004dce:	441a      	add	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fe ffa1 	bl	8003d1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <xTaskResumeAll+0x128>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <xTaskResumeAll+0x12c>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <xTaskResumeAll+0x11c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1cc      	bne.n	8004d92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dfe:	f000 fb0f 	bl	8005420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <xTaskResumeAll+0x130>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e0e:	f000 f837 	bl	8004e80 <xTaskIncrementTick>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <xTaskResumeAll+0x12c>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f1      	bne.n	8004e0e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <xTaskResumeAll+0x130>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <xTaskResumeAll+0x12c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTaskResumeAll+0x134>)
 8004e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e4c:	f000 fea4 	bl	8005b98 <vPortExitCritical>

	return xAlreadyYielded;
 8004e50:	68bb      	ldr	r3, [r7, #8]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200003a8 	.word	0x200003a8
 8004e60:	20000380 	.word	0x20000380
 8004e64:	20000340 	.word	0x20000340
 8004e68:	20000388 	.word	0x20000388
 8004e6c:	20000284 	.word	0x20000284
 8004e70:	20000280 	.word	0x20000280
 8004e74:	20000394 	.word	0x20000394
 8004e78:	20000390 	.word	0x20000390
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e8a:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <xTaskIncrementTick+0x14c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 808c 	bne.w	8004fac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e94:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <xTaskIncrementTick+0x150>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e9c:	4a4c      	ldr	r2, [pc, #304]	; (8004fd0 <xTaskIncrementTick+0x150>)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11f      	bne.n	8004ee8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ea8:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <xTaskIncrementTick+0x154>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <xTaskIncrementTick+0x46>
 8004eb2:	f04f 0320 	mov.w	r3, #32
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	e7fe      	b.n	8004ec4 <xTaskIncrementTick+0x44>
 8004ec6:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <xTaskIncrementTick+0x154>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <xTaskIncrementTick+0x158>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a40      	ldr	r2, [pc, #256]	; (8004fd4 <xTaskIncrementTick+0x154>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4a40      	ldr	r2, [pc, #256]	; (8004fd8 <xTaskIncrementTick+0x158>)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <xTaskIncrementTick+0x15c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	4a3e      	ldr	r2, [pc, #248]	; (8004fdc <xTaskIncrementTick+0x15c>)
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	f000 fa9c 	bl	8005420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <xTaskIncrementTick+0x160>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d34d      	bcc.n	8004f8e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <xTaskIncrementTick+0x154>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <xTaskIncrementTick+0x80>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <xTaskIncrementTick+0x82>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f06:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <xTaskIncrementTick+0x160>)
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0c:	601a      	str	r2, [r3, #0]
					break;
 8004f0e:	e03e      	b.n	8004f8e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <xTaskIncrementTick+0x154>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d203      	bcs.n	8004f30 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f28:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <xTaskIncrementTick+0x160>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6013      	str	r3, [r2, #0]
						break;
 8004f2e:	e02e      	b.n	8004f8e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe ff4f 	bl	8003dd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3318      	adds	r3, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe ff46 	bl	8003dd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	2201      	movs	r2, #1
 8004f52:	409a      	lsls	r2, r3
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <xTaskIncrementTick+0x164>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <xTaskIncrementTick+0x164>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <xTaskIncrementTick+0x168>)
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe fed2 	bl	8003d1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <xTaskIncrementTick+0x16c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b4      	bcc.n	8004ef2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8c:	e7b1      	b.n	8004ef2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f8e:	4b17      	ldr	r3, [pc, #92]	; (8004fec <xTaskIncrementTick+0x16c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	4914      	ldr	r1, [pc, #80]	; (8004fe8 <xTaskIncrementTick+0x168>)
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d907      	bls.n	8004fb6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e004      	b.n	8004fb6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <xTaskIncrementTick+0x170>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	4a0f      	ldr	r2, [pc, #60]	; (8004ff0 <xTaskIncrementTick+0x170>)
 8004fb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <xTaskIncrementTick+0x174>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200003a8 	.word	0x200003a8
 8004fd0:	20000384 	.word	0x20000384
 8004fd4:	20000338 	.word	0x20000338
 8004fd8:	2000033c 	.word	0x2000033c
 8004fdc:	20000398 	.word	0x20000398
 8004fe0:	200003a0 	.word	0x200003a0
 8004fe4:	20000388 	.word	0x20000388
 8004fe8:	20000284 	.word	0x20000284
 8004fec:	20000280 	.word	0x20000280
 8004ff0:	20000390 	.word	0x20000390
 8004ff4:	20000394 	.word	0x20000394

08004ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ffe:	4b26      	ldr	r3, [pc, #152]	; (8005098 <vTaskSwitchContext+0xa0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005006:	4b25      	ldr	r3, [pc, #148]	; (800509c <vTaskSwitchContext+0xa4>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800500c:	e03e      	b.n	800508c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800500e:	4b23      	ldr	r3, [pc, #140]	; (800509c <vTaskSwitchContext+0xa4>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <vTaskSwitchContext+0xa8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005022:	7afb      	ldrb	r3, [r7, #11]
 8005024:	f1c3 031f 	rsb	r3, r3, #31
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	491e      	ldr	r1, [pc, #120]	; (80050a4 <vTaskSwitchContext+0xac>)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <vTaskSwitchContext+0x5a>
	__asm volatile
 800503e:	f04f 0320 	mov.w	r3, #32
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	e7fe      	b.n	8005050 <vTaskSwitchContext+0x58>
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <vTaskSwitchContext+0xac>)
 800505e:	4413      	add	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3308      	adds	r3, #8
 8005074:	429a      	cmp	r2, r3
 8005076:	d104      	bne.n	8005082 <vTaskSwitchContext+0x8a>
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <vTaskSwitchContext+0xb0>)
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	200003a8 	.word	0x200003a8
 800509c:	20000394 	.word	0x20000394
 80050a0:	20000388 	.word	0x20000388
 80050a4:	20000284 	.word	0x20000284
 80050a8:	20000280 	.word	0x20000280

080050ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <vTaskPlaceOnEventList+0x24>
 80050bc:	f04f 0320 	mov.w	r3, #32
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e7fe      	b.n	80050ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <vTaskPlaceOnEventList+0x44>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3318      	adds	r3, #24
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fe fe44 	bl	8003d66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050de:	2101      	movs	r1, #1
 80050e0:	6838      	ldr	r0, [r7, #0]
 80050e2:	f000 fb9d 	bl	8005820 <prvAddCurrentTaskToDelayedList>
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000280 	.word	0x20000280

080050f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <xTaskRemoveFromEventList+0x2a>
 800510a:	f04f 0320 	mov.w	r3, #32
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e7fe      	b.n	800511c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3318      	adds	r3, #24
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fe58 	bl	8003dd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <xTaskRemoveFromEventList+0xac>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11c      	bne.n	800516a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fe4f 	bl	8003dd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	2201      	movs	r2, #1
 8005140:	409a      	lsls	r2, r3
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <xTaskRemoveFromEventList+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <xTaskRemoveFromEventList+0xb0>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <xTaskRemoveFromEventList+0xb4>)
 800515a:	441a      	add	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fe fddb 	bl	8003d1e <vListInsertEnd>
 8005168:	e005      	b.n	8005176 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3318      	adds	r3, #24
 800516e:	4619      	mov	r1, r3
 8005170:	480e      	ldr	r0, [pc, #56]	; (80051ac <xTaskRemoveFromEventList+0xb8>)
 8005172:	f7fe fdd4 	bl	8003d1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <xTaskRemoveFromEventList+0xbc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d905      	bls.n	8005190 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <xTaskRemoveFromEventList+0xc0>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e001      	b.n	8005194 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005194:	697b      	ldr	r3, [r7, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	200003a8 	.word	0x200003a8
 80051a4:	20000388 	.word	0x20000388
 80051a8:	20000284 	.word	0x20000284
 80051ac:	20000340 	.word	0x20000340
 80051b0:	20000280 	.word	0x20000280
 80051b4:	20000394 	.word	0x20000394

080051b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <vTaskInternalSetTimeOutState+0x24>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <vTaskInternalSetTimeOutState+0x28>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000398 	.word	0x20000398
 80051e0:	20000384 	.word	0x20000384

080051e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <xTaskCheckForTimeOut+0x24>
 80051f4:	f04f 0320 	mov.w	r3, #32
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e7fe      	b.n	8005206 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <xTaskCheckForTimeOut+0x3e>
 800520e:	f04f 0320 	mov.w	r3, #32
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e7fe      	b.n	8005220 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005222:	f000 fc8b 	bl	8005b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005226:	4b1d      	ldr	r3, [pc, #116]	; (800529c <xTaskCheckForTimeOut+0xb8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d102      	bne.n	8005246 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e023      	b.n	800528e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <xTaskCheckForTimeOut+0xbc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d007      	beq.n	8005262 <xTaskCheckForTimeOut+0x7e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e015      	b.n	800528e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	429a      	cmp	r2, r3
 800526a:	d20b      	bcs.n	8005284 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ff9d 	bl	80051b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	e004      	b.n	800528e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800528e:	f000 fc83 	bl	8005b98 <vPortExitCritical>

	return xReturn;
 8005292:	69fb      	ldr	r3, [r7, #28]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000384 	.word	0x20000384
 80052a0:	20000398 	.word	0x20000398

080052a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <vTaskMissedYield+0x14>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000394 	.word	0x20000394

080052bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052c4:	f000 f852 	bl	800536c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <prvIdleTask+0x28>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d9f9      	bls.n	80052c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <prvIdleTask+0x2c>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052e0:	e7f0      	b.n	80052c4 <prvIdleTask+0x8>
 80052e2:	bf00      	nop
 80052e4:	20000284 	.word	0x20000284
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	e00c      	b.n	8005312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <prvInitialiseTaskLists+0x60>)
 8005304:	4413      	add	r3, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fcdc 	bl	8003cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3301      	adds	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b06      	cmp	r3, #6
 8005316:	d9ef      	bls.n	80052f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005318:	480d      	ldr	r0, [pc, #52]	; (8005350 <prvInitialiseTaskLists+0x64>)
 800531a:	f7fe fcd3 	bl	8003cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800531e:	480d      	ldr	r0, [pc, #52]	; (8005354 <prvInitialiseTaskLists+0x68>)
 8005320:	f7fe fcd0 	bl	8003cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005324:	480c      	ldr	r0, [pc, #48]	; (8005358 <prvInitialiseTaskLists+0x6c>)
 8005326:	f7fe fccd 	bl	8003cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800532a:	480c      	ldr	r0, [pc, #48]	; (800535c <prvInitialiseTaskLists+0x70>)
 800532c:	f7fe fcca 	bl	8003cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <prvInitialiseTaskLists+0x74>)
 8005332:	f7fe fcc7 	bl	8003cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <prvInitialiseTaskLists+0x78>)
 8005338:	4a05      	ldr	r2, [pc, #20]	; (8005350 <prvInitialiseTaskLists+0x64>)
 800533a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvInitialiseTaskLists+0x7c>)
 800533e:	4a05      	ldr	r2, [pc, #20]	; (8005354 <prvInitialiseTaskLists+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000284 	.word	0x20000284
 8005350:	20000310 	.word	0x20000310
 8005354:	20000324 	.word	0x20000324
 8005358:	20000340 	.word	0x20000340
 800535c:	20000354 	.word	0x20000354
 8005360:	2000036c 	.word	0x2000036c
 8005364:	20000338 	.word	0x20000338
 8005368:	2000033c 	.word	0x2000033c

0800536c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005372:	e019      	b.n	80053a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005374:	f000 fbe2 	bl	8005b3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <prvCheckTasksWaitingTermination+0x4c>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fd27 	bl	8003dd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <prvCheckTasksWaitingTermination+0x50>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <prvCheckTasksWaitingTermination+0x50>)
 8005392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005394:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3b01      	subs	r3, #1
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 800539c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800539e:	f000 fbfb 	bl	8005b98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f80e 	bl	80053c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e1      	bne.n	8005374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000354 	.word	0x20000354
 80053bc:	20000380 	.word	0x20000380
 80053c0:	20000368 	.word	0x20000368

080053c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fd8a 	bl	8005ef4 <vPortFree>
				vPortFree( pxTCB );
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fd87 	bl	8005ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053e6:	e017      	b.n	8005418 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d103      	bne.n	80053fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fd7e 	bl	8005ef4 <vPortFree>
	}
 80053f8:	e00e      	b.n	8005418 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005400:	2b02      	cmp	r3, #2
 8005402:	d009      	beq.n	8005418 <prvDeleteTCB+0x54>
 8005404:	f04f 0320 	mov.w	r3, #32
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e7fe      	b.n	8005416 <prvDeleteTCB+0x52>
	}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <prvResetNextTaskUnblockTime+0x44>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <prvResetNextTaskUnblockTime+0x14>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <prvResetNextTaskUnblockTime+0x16>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <prvResetNextTaskUnblockTime+0x48>)
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005442:	e008      	b.n	8005456 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <prvResetNextTaskUnblockTime+0x44>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4a05      	ldr	r2, [pc, #20]	; (8005468 <prvResetNextTaskUnblockTime+0x48>)
 8005454:	6013      	str	r3, [r2, #0]
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000338 	.word	0x20000338
 8005468:	200003a0 	.word	0x200003a0

0800546c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <xTaskGetSchedulerState+0x34>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800547a:	2301      	movs	r3, #1
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	e008      	b.n	8005492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <xTaskGetSchedulerState+0x38>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005488:	2302      	movs	r3, #2
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e001      	b.n	8005492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005492:	687b      	ldr	r3, [r7, #4]
	}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	2000038c 	.word	0x2000038c
 80054a4:	200003a8 	.word	0x200003a8

080054a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d06e      	beq.n	800559c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <xTaskPriorityInherit+0x100>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d25e      	bcs.n	800558a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	db06      	blt.n	80054e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d4:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <xTaskPriorityInherit+0x100>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	f1c3 0207 	rsb	r2, r3, #7
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6959      	ldr	r1, [r3, #20]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4a2e      	ldr	r2, [pc, #184]	; (80055ac <xTaskPriorityInherit+0x104>)
 80054f4:	4413      	add	r3, r2
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d101      	bne.n	80054fe <xTaskPriorityInherit+0x56>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <xTaskPriorityInherit+0x58>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d03a      	beq.n	800557a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	3304      	adds	r3, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe fc65 	bl	8003dd8 <uxListRemove>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d115      	bne.n	8005540 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	4924      	ldr	r1, [pc, #144]	; (80055ac <xTaskPriorityInherit+0x104>)
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <xTaskPriorityInherit+0x98>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	2201      	movs	r2, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	43da      	mvns	r2, r3
 8005536:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <xTaskPriorityInherit+0x108>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4013      	ands	r3, r2
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <xTaskPriorityInherit+0x108>)
 800553e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005540:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <xTaskPriorityInherit+0x100>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	2201      	movs	r2, #1
 8005550:	409a      	lsls	r2, r3
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <xTaskPriorityInherit+0x108>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <xTaskPriorityInherit+0x108>)
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4a10      	ldr	r2, [pc, #64]	; (80055ac <xTaskPriorityInherit+0x104>)
 800556a:	441a      	add	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7fe fbd3 	bl	8003d1e <vListInsertEnd>
 8005578:	e004      	b.n	8005584 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <xTaskPriorityInherit+0x100>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e008      	b.n	800559c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <xTaskPriorityInherit+0x100>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	429a      	cmp	r2, r3
 8005596:	d201      	bcs.n	800559c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005598:	2301      	movs	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800559c:	68fb      	ldr	r3, [r7, #12]
	}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000280 	.word	0x20000280
 80055ac:	20000284 	.word	0x20000284
 80055b0:	20000388 	.word	0x20000388

080055b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d06c      	beq.n	80056a4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055ca:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <xTaskPriorityDisinherit+0xfc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d009      	beq.n	80055e8 <xTaskPriorityDisinherit+0x34>
 80055d4:	f04f 0320 	mov.w	r3, #32
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e7fe      	b.n	80055e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <xTaskPriorityDisinherit+0x50>
 80055f0:	f04f 0320 	mov.w	r3, #32
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	e7fe      	b.n	8005602 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	429a      	cmp	r2, r3
 8005618:	d044      	beq.n	80056a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561e:	2b00      	cmp	r3, #0
 8005620:	d140      	bne.n	80056a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fbd6 	bl	8003dd8 <uxListRemove>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d115      	bne.n	800565e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	491f      	ldr	r1, [pc, #124]	; (80056b4 <xTaskPriorityDisinherit+0x100>)
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskPriorityDisinherit+0xaa>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	2201      	movs	r2, #1
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <xTaskPriorityDisinherit+0x104>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <xTaskPriorityDisinherit+0x104>)
 800565c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	f1c3 0207 	rsb	r2, r3, #7
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	2201      	movs	r2, #1
 8005678:	409a      	lsls	r2, r3
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <xTaskPriorityDisinherit+0x104>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <xTaskPriorityDisinherit+0x104>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <xTaskPriorityDisinherit+0x100>)
 8005692:	441a      	add	r2, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fe fb3f 	bl	8003d1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056a4:	697b      	ldr	r3, [r7, #20]
	}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000280 	.word	0x20000280
 80056b4:	20000284 	.word	0x20000284
 80056b8:	20000388 	.word	0x20000388

080056bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8086 	beq.w	80057e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80056de:	f04f 0320 	mov.w	r3, #32
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e7fe      	b.n	80056f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d902      	bls.n	8005702 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e002      	b.n	8005708 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	429a      	cmp	r2, r3
 8005710:	d067      	beq.n	80057e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	d162      	bne.n	80057e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800571c:	4b33      	ldr	r3, [pc, #204]	; (80057ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	429a      	cmp	r2, r3
 8005724:	d109      	bne.n	800573a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005726:	f04f 0320 	mov.w	r3, #32
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	e7fe      	b.n	8005738 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	db04      	blt.n	8005758 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f1c3 0207 	rsb	r2, r3, #7
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	6959      	ldr	r1, [r3, #20]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005768:	4413      	add	r3, r2
 800576a:	4299      	cmp	r1, r3
 800576c:	d101      	bne.n	8005772 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d034      	beq.n	80057e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fb2b 	bl	8003dd8 <uxListRemove>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d115      	bne.n	80057b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4918      	ldr	r1, [pc, #96]	; (80057f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43da      	mvns	r2, r3
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4013      	ands	r3, r2
 80057b0:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80057b2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2201      	movs	r2, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80057d4:	441a      	add	r2, r3
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7fe fa9e 	bl	8003d1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057e2:	bf00      	nop
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000280 	.word	0x20000280
 80057f0:	20000284 	.word	0x20000284
 80057f4:	20000388 	.word	0x20000388

080057f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <pvTaskIncrementMutexHeldCount+0x24>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <pvTaskIncrementMutexHeldCount+0x24>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800580a:	3201      	adds	r2, #1
 800580c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800580e:	4b03      	ldr	r3, [pc, #12]	; (800581c <pvTaskIncrementMutexHeldCount+0x24>)
 8005810:	681b      	ldr	r3, [r3, #0]
	}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000280 	.word	0x20000280

08005820 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800582a:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005830:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe face 	bl	8003dd8 <uxListRemove>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	2201      	movs	r2, #1
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	43da      	mvns	r2, r3
 8005850:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4013      	ands	r3, r2
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d10a      	bne.n	8005878 <prvAddCurrentTaskToDelayedList+0x58>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005868:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	481a      	ldr	r0, [pc, #104]	; (80058dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005872:	f7fe fa54 	bl	8003d1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005876:	e026      	b.n	80058c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d209      	bcs.n	80058a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005890:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7fe fa62 	bl	8003d66 <vListInsert>
}
 80058a2:	e010      	b.n	80058c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe fa58 	bl	8003d66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d202      	bcs.n	80058c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058c0:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6013      	str	r3, [r2, #0]
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000384 	.word	0x20000384
 80058d4:	20000280 	.word	0x20000280
 80058d8:	20000388 	.word	0x20000388
 80058dc:	2000036c 	.word	0x2000036c
 80058e0:	2000033c 	.word	0x2000033c
 80058e4:	20000338 	.word	0x20000338
 80058e8:	200003a0 	.word	0x200003a0

080058ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3b04      	subs	r3, #4
 80058fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b04      	subs	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3b04      	subs	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800591c:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <pxPortInitialiseStack+0x64>)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b14      	subs	r3, #20
 8005926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3b04      	subs	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f06f 0202 	mvn.w	r2, #2
 800593a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3b20      	subs	r3, #32
 8005940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005942:	68fb      	ldr	r3, [r7, #12]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	08005955 	.word	0x08005955

08005954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <prvTaskExitError+0x50>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d009      	beq.n	800597c <prvTaskExitError+0x28>
 8005968:	f04f 0320 	mov.w	r3, #32
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e7fe      	b.n	800597a <prvTaskExitError+0x26>
 800597c:	f04f 0320 	mov.w	r3, #32
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800598e:	bf00      	nop
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0fc      	beq.n	8005990 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
	...

080059b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <pxCurrentTCBConst2>)
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	6808      	ldr	r0, [r1, #0]
 80059b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	f380 8809 	msr	PSP, r0
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8811 	msr	BASEPRI, r0
 80059ca:	4770      	bx	lr
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst2>:
 80059d0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059d8:	4808      	ldr	r0, [pc, #32]	; (80059fc <prvPortStartFirstTask+0x24>)
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	6800      	ldr	r0, [r0, #0]
 80059de:	f380 8808 	msr	MSP, r0
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f380 8814 	msr	CONTROL, r0
 80059ea:	b662      	cpsie	i
 80059ec:	b661      	cpsie	f
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	df00      	svc	0
 80059f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059fa:	bf00      	nop
 80059fc:	e000ed08 	.word	0xe000ed08

08005a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a06:	4b44      	ldr	r3, [pc, #272]	; (8005b18 <xPortStartScheduler+0x118>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a44      	ldr	r2, [pc, #272]	; (8005b1c <xPortStartScheduler+0x11c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d109      	bne.n	8005a24 <xPortStartScheduler+0x24>
 8005a10:	f04f 0320 	mov.w	r3, #32
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e7fe      	b.n	8005a22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a24:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <xPortStartScheduler+0x118>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3d      	ldr	r2, [pc, #244]	; (8005b20 <xPortStartScheduler+0x120>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d109      	bne.n	8005a42 <xPortStartScheduler+0x42>
 8005a2e:	f04f 0320 	mov.w	r3, #32
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e7fe      	b.n	8005a40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a42:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <xPortStartScheduler+0x124>)
 8005a44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <xPortStartScheduler+0x128>)
 8005a68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a6a:	4b30      	ldr	r3, [pc, #192]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005a6c:	2207      	movs	r2, #7
 8005a6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a70:	e009      	b.n	8005a86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005a72:	4b2e      	ldr	r3, [pc, #184]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	4a2c      	ldr	r2, [pc, #176]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005a7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d0ef      	beq.n	8005a72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1c3 0307 	rsb	r3, r3, #7
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d009      	beq.n	8005ab2 <xPortStartScheduler+0xb2>
 8005a9e:	f04f 0320 	mov.w	r3, #32
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	e7fe      	b.n	8005ab0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ab2:	4b1e      	ldr	r3, [pc, #120]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005aba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ac4:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <xPortStartScheduler+0x12c>)
 8005ac6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <xPortStartScheduler+0x130>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <xPortStartScheduler+0x130>)
 8005ad6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ada:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005adc:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <xPortStartScheduler+0x130>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <xPortStartScheduler+0x130>)
 8005ae2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8005ae6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ae8:	f000 f8d6 	bl	8005c98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <xPortStartScheduler+0x134>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005af2:	f000 f8f5 	bl	8005ce0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <xPortStartScheduler+0x138>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <xPortStartScheduler+0x138>)
 8005afc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b02:	f7ff ff69 	bl	80059d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b06:	f7ff fa77 	bl	8004ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b0a:	f7ff ff23 	bl	8005954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed00 	.word	0xe000ed00
 8005b1c:	410fc271 	.word	0x410fc271
 8005b20:	410fc270 	.word	0x410fc270
 8005b24:	e000e400 	.word	0xe000e400
 8005b28:	200003ac 	.word	0x200003ac
 8005b2c:	200003b0 	.word	0x200003b0
 8005b30:	e000ed20 	.word	0xe000ed20
 8005b34:	2000000c 	.word	0x2000000c
 8005b38:	e000ef34 	.word	0xe000ef34

08005b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	f04f 0320 	mov.w	r3, #32
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <vPortEnterCritical+0x54>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <vPortEnterCritical+0x54>)
 8005b5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <vPortEnterCritical+0x54>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10e      	bne.n	8005b84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <vPortEnterCritical+0x58>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d009      	beq.n	8005b84 <vPortEnterCritical+0x48>
 8005b70:	f04f 0320 	mov.w	r3, #32
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	e7fe      	b.n	8005b82 <vPortEnterCritical+0x46>
	}
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	2000000c 	.word	0x2000000c
 8005b94:	e000ed04 	.word	0xe000ed04

08005b98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <vPortExitCritical+0x4c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <vPortExitCritical+0x22>
 8005ba6:	f04f 0320 	mov.w	r3, #32
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	e7fe      	b.n	8005bb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <vPortExitCritical+0x4c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <vPortExitCritical+0x4c>)
 8005bc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bc4:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <vPortExitCritical+0x4c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <vPortExitCritical+0x3e>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	2000000c 	.word	0x2000000c
	...

08005bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bf0:	f3ef 8009 	mrs	r0, PSP
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <pxCurrentTCBConst>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	f01e 0f10 	tst.w	lr, #16
 8005c00:	bf08      	it	eq
 8005c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0a:	6010      	str	r0, [r2, #0]
 8005c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c10:	f04f 0020 	mov.w	r0, #32
 8005c14:	f380 8811 	msr	BASEPRI, r0
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f7ff f9ea 	bl	8004ff8 <vTaskSwitchContext>
 8005c24:	f04f 0000 	mov.w	r0, #0
 8005c28:	f380 8811 	msr	BASEPRI, r0
 8005c2c:	bc09      	pop	{r0, r3}
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	6808      	ldr	r0, [r1, #0]
 8005c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c36:	f01e 0f10 	tst.w	lr, #16
 8005c3a:	bf08      	it	eq
 8005c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c40:	f380 8809 	msr	PSP, r0
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w

08005c50 <pxCurrentTCBConst>:
 8005c50:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop

08005c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c5e:	f04f 0320 	mov.w	r3, #32
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c70:	f7ff f906 	bl	8004e80 <xTaskIncrementTick>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <SysTick_Handler+0x3c>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	2300      	movs	r3, #0
 8005c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <vPortSetupTimerInterrupt+0x34>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <vPortSetupTimerInterrupt+0x38>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <vPortSetupTimerInterrupt+0x3c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <vPortSetupTimerInterrupt+0x40>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	099b      	lsrs	r3, r3, #6
 8005cb4:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <vPortSetupTimerInterrupt+0x44>)
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cba:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <vPortSetupTimerInterrupt+0x34>)
 8005cbc:	2207      	movs	r2, #7
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000e010 	.word	0xe000e010
 8005cd0:	e000e018 	.word	0xe000e018
 8005cd4:	20000000 	.word	0x20000000
 8005cd8:	10624dd3 	.word	0x10624dd3
 8005cdc:	e000e014 	.word	0xe000e014

08005ce0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ce0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005cf0 <vPortEnableVFP+0x10>
 8005ce4:	6801      	ldr	r1, [r0, #0]
 8005ce6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cea:	6001      	str	r1, [r0, #0]
 8005cec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cee:	bf00      	nop
 8005cf0:	e000ed88 	.word	0xe000ed88

08005cf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cfa:	f3ef 8305 	mrs	r3, IPSR
 8005cfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b0f      	cmp	r3, #15
 8005d04:	d913      	bls.n	8005d2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d06:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <vPortValidateInterruptPriority+0x6c>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <vPortValidateInterruptPriority+0x70>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	7afa      	ldrb	r2, [r7, #11]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d209      	bcs.n	8005d2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005d1a:	f04f 0320 	mov.w	r3, #32
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e7fe      	b.n	8005d2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <vPortValidateInterruptPriority+0x74>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <vPortValidateInterruptPriority+0x78>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d909      	bls.n	8005d52 <vPortValidateInterruptPriority+0x5e>
 8005d3e:	f04f 0320 	mov.w	r3, #32
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	e7fe      	b.n	8005d50 <vPortValidateInterruptPriority+0x5c>
	}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	e000e3f0 	.word	0xe000e3f0
 8005d64:	200003ac 	.word	0x200003ac
 8005d68:	e000ed0c 	.word	0xe000ed0c
 8005d6c:	200003b0 	.word	0x200003b0

08005d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d7c:	f7fe ffd6 	bl	8004d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d80:	4b57      	ldr	r3, [pc, #348]	; (8005ee0 <pvPortMalloc+0x170>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d88:	f000 f90c 	bl	8005fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d8c:	4b55      	ldr	r3, [pc, #340]	; (8005ee4 <pvPortMalloc+0x174>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 808c 	bne.w	8005eb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01c      	beq.n	8005dda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005da0:	2208      	movs	r2, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d013      	beq.n	8005dda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f023 0307 	bic.w	r3, r3, #7
 8005db8:	3308      	adds	r3, #8
 8005dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <pvPortMalloc+0x6a>
 8005dc6:	f04f 0320 	mov.w	r3, #32
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e7fe      	b.n	8005dd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d068      	beq.n	8005eb2 <pvPortMalloc+0x142>
 8005de0:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <pvPortMalloc+0x178>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d863      	bhi.n	8005eb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dea:	4b40      	ldr	r3, [pc, #256]	; (8005eec <pvPortMalloc+0x17c>)
 8005dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dee:	4b3f      	ldr	r3, [pc, #252]	; (8005eec <pvPortMalloc+0x17c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005df4:	e004      	b.n	8005e00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d903      	bls.n	8005e12 <pvPortMalloc+0xa2>
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f1      	bne.n	8005df6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e12:	4b33      	ldr	r3, [pc, #204]	; (8005ee0 <pvPortMalloc+0x170>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d04a      	beq.n	8005eb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2208      	movs	r2, #8
 8005e22:	4413      	add	r3, r2
 8005e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	2308      	movs	r3, #8
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d91e      	bls.n	8005e7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <pvPortMalloc+0xf4>
 8005e50:	f04f 0320 	mov.w	r3, #32
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e7fe      	b.n	8005e62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e76:	69b8      	ldr	r0, [r7, #24]
 8005e78:	f000 f8f6 	bl	8006068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <pvPortMalloc+0x178>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <pvPortMalloc+0x178>)
 8005e88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <pvPortMalloc+0x178>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <pvPortMalloc+0x180>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d203      	bcs.n	8005e9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <pvPortMalloc+0x178>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <pvPortMalloc+0x180>)
 8005e9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <pvPortMalloc+0x174>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005eb2:	f7fe ff49 	bl	8004d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <pvPortMalloc+0x164>
 8005ec0:	f04f 0320 	mov.w	r3, #32
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e7fe      	b.n	8005ed2 <pvPortMalloc+0x162>
	return pvReturn;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000fbc 	.word	0x20000fbc
 8005ee4:	20000fc8 	.word	0x20000fc8
 8005ee8:	20000fc0 	.word	0x20000fc0
 8005eec:	20000fb4 	.word	0x20000fb4
 8005ef0:	20000fc4 	.word	0x20000fc4

08005ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d046      	beq.n	8005f94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f06:	2308      	movs	r3, #8
 8005f08:	425b      	negs	r3, r3
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <vPortFree+0xa8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <vPortFree+0x42>
 8005f22:	f04f 0320 	mov.w	r3, #32
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e7fe      	b.n	8005f34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <vPortFree+0x5e>
 8005f3e:	f04f 0320 	mov.w	r3, #32
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	e7fe      	b.n	8005f50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <vPortFree+0xa8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d019      	beq.n	8005f94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d115      	bne.n	8005f94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <vPortFree+0xa8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f78:	f7fe fed8 	bl	8004d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <vPortFree+0xac>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4413      	add	r3, r2
 8005f86:	4a06      	ldr	r2, [pc, #24]	; (8005fa0 <vPortFree+0xac>)
 8005f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f8a:	6938      	ldr	r0, [r7, #16]
 8005f8c:	f000 f86c 	bl	8006068 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f90:	f7fe feda 	bl	8004d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f94:	bf00      	nop
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000fc8 	.word	0x20000fc8
 8005fa0:	20000fc0 	.word	0x20000fc0

08005fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005faa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <prvHeapInit+0xac>)
 8005fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3307      	adds	r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <prvHeapInit+0xac>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <prvHeapInit+0xb0>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <prvHeapInit+0xb0>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0307 	bic.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a15      	ldr	r2, [pc, #84]	; (8006058 <prvHeapInit+0xb4>)
 8006004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <prvHeapInit+0xb4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <prvHeapInit+0xb4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <prvHeapInit+0xb4>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <prvHeapInit+0xb8>)
 8006032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4a09      	ldr	r2, [pc, #36]	; (8006060 <prvHeapInit+0xbc>)
 800603a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <prvHeapInit+0xc0>)
 800603e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	200003b4 	.word	0x200003b4
 8006054:	20000fb4 	.word	0x20000fb4
 8006058:	20000fbc 	.word	0x20000fbc
 800605c:	20000fc4 	.word	0x20000fc4
 8006060:	20000fc0 	.word	0x20000fc0
 8006064:	20000fc8 	.word	0x20000fc8

08006068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006070:	4b28      	ldr	r3, [pc, #160]	; (8006114 <prvInsertBlockIntoFreeList+0xac>)
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e002      	b.n	800607c <prvInsertBlockIntoFreeList+0x14>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d8f7      	bhi.n	8006076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d108      	bne.n	80060aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d118      	bne.n	80060f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <prvInsertBlockIntoFreeList+0xb0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d00d      	beq.n	80060e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e008      	b.n	80060f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <prvInsertBlockIntoFreeList+0xb0>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e003      	b.n	80060f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d002      	beq.n	8006106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000fb4 	.word	0x20000fb4
 8006118:	20000fbc 	.word	0x20000fbc

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4e0d      	ldr	r6, [pc, #52]	; (8006154 <__libc_init_array+0x38>)
 8006120:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <__libc_init_array+0x3c>)
 8006122:	1ba4      	subs	r4, r4, r6
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	2500      	movs	r5, #0
 8006128:	42a5      	cmp	r5, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	4e0b      	ldr	r6, [pc, #44]	; (800615c <__libc_init_array+0x40>)
 800612e:	4c0c      	ldr	r4, [pc, #48]	; (8006160 <__libc_init_array+0x44>)
 8006130:	f000 f82c 	bl	800618c <_init>
 8006134:	1ba4      	subs	r4, r4, r6
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	2500      	movs	r5, #0
 800613a:	42a5      	cmp	r5, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006144:	4798      	blx	r3
 8006146:	3501      	adds	r5, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800614e:	4798      	blx	r3
 8006150:	3501      	adds	r5, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	08006250 	.word	0x08006250
 8006158:	08006250 	.word	0x08006250
 800615c:	08006250 	.word	0x08006250
 8006160:	08006254 	.word	0x08006254

08006164 <memcpy>:
 8006164:	b510      	push	{r4, lr}
 8006166:	1e43      	subs	r3, r0, #1
 8006168:	440a      	add	r2, r1
 800616a:	4291      	cmp	r1, r2
 800616c:	d100      	bne.n	8006170 <memcpy+0xc>
 800616e:	bd10      	pop	{r4, pc}
 8006170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006178:	e7f7      	b.n	800616a <memcpy+0x6>

0800617a <memset>:
 800617a:	4402      	add	r2, r0
 800617c:	4603      	mov	r3, r0
 800617e:	4293      	cmp	r3, r2
 8006180:	d100      	bne.n	8006184 <memset+0xa>
 8006182:	4770      	bx	lr
 8006184:	f803 1b01 	strb.w	r1, [r3], #1
 8006188:	e7f9      	b.n	800617e <memset+0x4>
	...

0800618c <_init>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr

08006198 <_fini>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr
